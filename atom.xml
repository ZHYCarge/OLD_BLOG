<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZHYCarge的博客</title>
  
  <subtitle>旧平台，已不再维护，请点击下方链接转至新平台访问</subtitle>
  <link href="https://zhycarge.github.io/OLD_BLOG/atom.xml" rel="self"/>
  
  <link href="https://zhycarge.github.io/OLD_BLOG/"/>
  <updated>2024-12-09T14:17:49.000Z</updated>
  <id>https://zhycarge.github.io/OLD_BLOG/</id>
  
  <author>
    <name>ZHYCarge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>尾声&amp;新生</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2024/12/08/%E5%B0%BE%E5%A3%B0&amp;%E6%96%B0%E7%94%9F/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2024/12/08/%E5%B0%BE%E5%A3%B0&amp;%E6%96%B0%E7%94%9F/</id>
    <published>2024-12-08T10:55:51.000Z</published>
    <updated>2024-12-09T14:17:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从“新”出发"><a href="#从“新”出发" class="headerlink" title="从“新”出发"></a>从“新”出发</h1><span id="more"></span><p>距今本博客平台已经存在了3年了。从对技术懵懵懂懂，一无所知，到现在勉勉强强，从完全稚嫩的文笔，到现在稍显稚嫩的文笔，这个平台陪我成长了许多。。。</p><p>但是，天下没有不散的宴席。由于当时自身技术知识的薄弱（回首看平台的部署历程苦不堪言。。博客采用的插件也从未更新过。。），加上对博文分类（哪里来的奇奇怪怪分类）、内容撰写的十分混乱（甚至博客平台内的图片图床都包含了三四个平台），导致对这个博客网站内容仿佛屎山，重构起来十分困难（还有<code>Next</code>主题发生过<a href="https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848">仓库更换事件</a>）。</p><p>因此，打算对此博客平台进行一次系统化的重构，并将使用<code>GitHub</code>的仓库存档功能对这个博客平台进行封存，留作纪念。</p><p>准备进行的工作如下:</p><ul><li><p>仓库封存。将该博客平台重命名并列入<code>GitHub</code>的存档仓库进行封存</p></li><li><p>重新开始。删除所有博文，重构规范（包括但不限于完善分组分类，确定统一书写格式）。</p></li><li><p>更换留言平台。更换<code>Valine</code>评论平台变成<code>Waline</code>。<strong>据本博文发出后，<code>Valine</code>评论平台随时可能会被移除</strong></p></li><li><p>整合插件。更新相关插件、主题等，并做好定时更新，做好现有插件的记录（U1S1我都不知道这个平台已经存在过什么插件了。。。）</p></li><li><p>新增友人帐功能。</p></li><li><p>抢救“垃圾”。（从“垃圾堆”里翻找一下还能用的部分，对老旧博文进行更新后重新发布）</p></li></ul><p>至此，博客平台改造可能会持续一个礼拜到两个礼拜，该博客平台内的所有照片信息不再保证链接有效性。</p><p>更新后，为保证后续还要从里面翻找“垃圾”，会将该博客平台用到的大部分照片一同保存到存档仓库中，方便后续查看。</p><p>如果对该博客平台中相关博文仍存在疑问，请通过邮件与我联系:<a href="mailto:ZHYCarge@zhycarge.top">ZHYCarge@zhycarge.top</a></p><p>向前走，初心不泯。</p><center>二〇二四年十二月</center>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;从“新”出发&quot;&gt;&lt;a href=&quot;#从“新”出发&quot; class=&quot;headerlink&quot; title=&quot;从“新”出发&quot;&gt;&lt;/a&gt;从“新”出发&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Announce" scheme="https://zhycarge.github.io/OLD_BLOG/tags/Announce/"/>
    
  </entry>
  
  <entry>
    <title>毕设问题汇总</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2023/03/14/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2023/03/14/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2023-03-14T09:46:29.000Z</published>
    <updated>2023-03-14T09:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="好像密码不正确呢？再试试吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="15a5f05c7fa09b59a76dee481914e95ad5b91f523eea6e6a327e170e6b775bf0">9863e730576695b52e0649b599751ab4544977e71ef33a71ead5b64f72966bec79f3d96bc0c710efd0b98b7606e9dae297fb584a90886a94eadccfda05934a64302c5e76ce3af2775f5b130d1b42f3661e84d0ab3c1157cc022eeffc11b39bab37d8df14d8253dc860fbff7bbe1742bbbaa42a835df7b85ae8bcc0cea98c52b0040593f12643cb1bef34d696764e75db87b3b1111a0f65255050ac82c0cea8a1b49fb1a0374b706599729932e2312c17d563419d1d206bd8830b73c4fe2c26ff5845b1e6ae675b5b6be64befb91880b66eb0a75dbb4af029a25380346b1985b4c6c257b1b3e1c8c78dc9fecf50501f7bcb7d5192bc6ccc25c1d6dae83729e9222a9290a042cf1125e6e86fb918428ba5cd43a40c54ba213c1d9357c1941699dadae0913dfc167e0246569e8aceab9629873c61287b6f2588e7f68e6c5cde1ec2db656963b6371200bd1d7794c98b5c667ca2bc1da1d02313f89d3da506bfffe397d62af532fd33090caec0c65a38a499bd7433a1aae28a3c7e186d97b665d18350e8f6ab01123ecffb5c1e328a8cfdc8ce536dd090387d3ba7e55977916c72b13550cc0319949a80094016508651e5da9a01e5e7eec1d50e24a3fe3a8744493cea3dff4c227a46af54cb618bd5a0ea060cf5816fac40d0fe107fe382e55865b3ba2f7f5a21b6b599c44911a15848bf85</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">输入正确密码查看正确文章</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/OLD_BLOG/lib/hbe.js"></script><link href="/OLD_BLOG/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">此处存放毕设的相关问题汇总信息</summary>
    
    
    
    
    <category term="毕设" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E6%AF%95%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>国考之常识推理</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2023/01/03/%E5%9B%BD%E8%80%83%E4%B9%8B%E5%B8%B8%E8%AF%86%E6%8E%A8%E7%90%86/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2023/01/03/%E5%9B%BD%E8%80%83%E4%B9%8B%E5%B8%B8%E8%AF%86%E6%8E%A8%E7%90%86/</id>
    <published>2023-01-03T09:24:32.000Z</published>
    <updated>2023-01-04T03:31:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="国考之常识推理"><a href="#国考之常识推理" class="headerlink" title="国考之常识推理"></a>国考之常识推理</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>记录整理网络中如何快速判断常识答案的蒙题技巧</p><span id="more"></span><h1 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h1><h2 id="题干分析法"><a href="#题干分析法" class="headerlink" title="题干分析法"></a>题干分析法</h2><p>主体一致。抓住定语、约束范围的词语</p><p>例1：</p><p>日前，习近平主席在亚太经合组织工商领导人峰会上表示，新常态将给中国带来新的发展机遇。下列关于我国经济发展“新常态”的主要特点描述正确的一项是(C)。</p><p>A.从高速增长转为低速增长</p><p>B.从投资驱动转向要素驱动</p><p>C.经济结构不断优化升级</p><p>D.面临的挑战趋于常态化</p><p>由于表示是<code>新常态</code>，A：低速增长不为<code>新</code>，排除；B：无法体现<code>新的感觉</code>；C：优化升级可以体现<code>新的、好处的发展趋势</code>；D：挑战常态化，表示不出来<code>新的东西</code>。因此选<code>C</code></p><h2 id="绝对表述排除法"><a href="#绝对表述排除法" class="headerlink" title="绝对表述排除法"></a>绝对表述排除法</h2><p>绝对化表述内容不选。例如：一定、完全、所有、任何、必须、最、绝对、唯一，一般用于选非题</p><p>例：</p><p>关于我国的水资源与水能，下列说法错误的是:(A)</p><p>A.我国水能大部分分布在西南地区,按河流统计以雅鲁藏布江水系最多</p><p>B.我国水能资源理论蕴藏量居世界首位</p><p>C.我国已经被联合国列为13个贫水国家之一</p><p>D.我国是一-个水资源短缺、水灾频繁的国家</p><p>由于在A选项中出现了 <code>最</code>字，因此优先排除</p><h2 id="逻辑分析法"><a href="#逻辑分析法" class="headerlink" title="逻辑分析法"></a>逻辑分析法</h2><p>选项是否出现矛盾关系</p><p>例：</p><p>下列与我国军事国防相关的说法错误的是:(A)</p><p>A.大力发展军民融合是维护国家主权和安全的战略基石</p><p>B.新形势下我军的军事战略方针是积极防御</p><p>C.中国位于海洋地缘战略区和欧亚大陆地缘战略区的交接处</p><p>D.维护地区和世界和平是我国军队担负的主要战略任务之一</p><p>军民融合对安全起不到作用</p><h2 id="法律常识推理"><a href="#法律常识推理" class="headerlink" title="法律常识推理"></a>法律常识推理</h2><p>核心内容：</p><ul><li>人身安全高于财产安全</li><li>不能让人“不爽”</li><li>维护社会公平</li><li>保护弱者、受害者</li></ul><p>例：</p><p>下列关于行政许可的表述中，错误的是:(C)</p><p>A.实施行政许可，应当遵循便民的原则，提高办事效率，提供优质服务</p><p>B.公民、法人或者其他组织依法取得的行政许可受法律保护，行政机关不得擅自改变已经生效的行政许可</p><p>C.行政许可的实施和结果，除涉及国家秘密的外，应当公开</p><p>D.公民、法人或者其他组织对行政机关实施行政许可，享有陈述权、申辩权</p><p>由于在实际执行过程中，除国家秘密外，还可能包含企业、个人的个人隐私，因此需要进行保密——<code>不能让人“不爽”</code></p><h1 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h1><h2 id="心中有党"><a href="#心中有党" class="headerlink" title="心中有党"></a>心中有党</h2><p>选项中涉及到习近平总书记的要进行选择，有国家领导人的一般都不选</p><p>例：</p><p>“四个全面”是新一届党的领导集体治国理政的战略布局。下列与“四个全面”有关的说法正确的是:(d)</p><p>A.党的十八大通过了《中共中央关于全面深化改革若干重大问题的决定》</p><p>B.十八届三中全会通过了《中共中央关于全面推进依法治国若干重大问题的决定》</p><p>C.十八届四中全会提出了“全面建成小康社会”的战略目标</p><p>D.习近平总书记在江苏调研时将“从严治党”首次提升到“全面从严”的高度</p><h2 id="公平正义"><a href="#公平正义" class="headerlink" title="公平正义"></a>公平正义</h2><p>可以与<a href="#%E6%B3%95%E5%BE%8B%E5%B8%B8%E8%AF%86%E6%8E%A8%E7%90%86">法律常识推理</a>一起判断</p><p>例：</p><p>甲于2010年3月1日开始使用“红红太阳”牌商标，乙同年4月1日开始使用相同商标。商标局于2011年5月10日同一天收到甲、乙关于“红红太阳”商标的申请文件，但甲的文件是5月8日寄出的，乙的文件是5月5日寄出的。商标局应初步审定公告谁的申请?(A)</p><p>A.公告甲的申请，因甲、乙虽同时申请，但甲使用在先</p><p>B.同时公告，因甲、乙申请日期相同</p><p>C.公告乙的申请，因乙申请在先</p><p>D.可以由商标局自由裁定.</p><h2 id="字斟句酌"><a href="#字斟句酌" class="headerlink" title="字斟句酌"></a>字斟句酌</h2><p>例：</p><p>下列情形中，甲和乙只需承担双方责任,无需承担共同责任的是:（A）</p><p>A.甲养的羊误入乙的菜地，乙发现后不管不问导致损失扩大</p><p>B.甲乙共同实施了故意伤害行为</p><p>C.甲乙合伙办了一家快递企业，乙在运输过程中丢失包裹</p><p>D.甲与乙协商共同买下一套房屋，二人约定各欠卖方十万元房款</p><h1 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h1><h2 id="正确选项积极向上，常和党性在一起"><a href="#正确选项积极向上，常和党性在一起" class="headerlink" title="正确选项积极向上，常和党性在一起"></a>正确选项积极向上，常和党性在一起</h2><p>与<a href="#%E5%BF%83%E4%B8%AD%E6%9C%89%E5%85%9A">心中有党</a>类似</p><h2 id="矛盾选项和稀泥，你不会就要选其一"><a href="#矛盾选项和稀泥，你不会就要选其一" class="headerlink" title="矛盾选项和稀泥，你不会就要选其一"></a>矛盾选项和稀泥，你不会就要选其一</h2><p>与<a href="#%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E6%B3%95">逻辑分析法</a>类似</p><p>例:</p><p>掩星是一种天文现象，指一个天体在另一个天体与观测者之间通过而产生 的遮蔽现象。<br>科学家经常借助观察这一现象来判断星体是否有大气层。当行星掩过 遥远恒星，如果恒星<br>变得模糊之后才消失，那么可以认为：(B)<br>A.该恒星有稠密的大气层<br>B.该行星有稠密的大气层<br>C.该恒星无大气层或大气层稀薄<br>D.该行星无大气层或大气层稀薄</p><h2 id="小心数字，数字经常迷惑你"><a href="#小心数字，数字经常迷惑你" class="headerlink" title="小心数字，数字经常迷惑你"></a>小心数字，数字经常迷惑你</h2><p>在判断不出来的时候，包含数字的项往往是错误的</p><p>例：</p><p>关于丝绸之路经济带，下列说法不正确的是：（C）<br>A.东接亚太经济圈，西系欧洲经济圈<br>B.被认为是世界上最长、最具有发展潜力的经济大走廊<br>C.以温带季风气候为主，年平均降水量在 800 毫米左右<br>D.是国家主席习近平在哈萨克斯坦纳扎尔巴耶夫大学演讲时提出的</p><h2 id="诗词哲学题不会，找关键词定主体"><a href="#诗词哲学题不会，找关键词定主体" class="headerlink" title="诗词哲学题不会，找关键词定主体"></a>诗词哲学题不会，找关键词定主体</h2><p>找关键词与内容相关即可与<a href="#%E9%A2%98%E5%B9%B2%E5%88%86%E6%9E%90%E6%B3%95">题干分析法</a>类似</p><p>例1：</p><p>我国古代用 “金”“石”“丝”“竹”指代不同材质、类别的乐器。下列诗词涉及 “竹”的是：（C）<br>A.珠帘夕殿闻钟磬，白日秋天忆鼓鼙<br>B.主人有酒欢今夕,请奏鸣琴广陵客<br>C.深秋帘幕千家雨，落日楼台一笛风<br>D.哀筝一弄湘江曲,声声写尽湘波绿</p><p>看选项可知，笛子一般都是使用竹子做的，其它乐器与竹子无关</p><p>例2：</p><p>对下列对联依次所指的文学家，判断正确的一项是：（C）<br>①哀怨托离骚，生而独开诗赋立；孤忠报楚国，余风波及汉湘人。<br>②兵甲富于胸中，一代功名高宋室；忧乐关乎天下，千秋俎豆重苏台。<br>③质而绮，真而醇，自可传之千古；樽中酒，篱下诗，岂甘了此一生。<br>④笔诤时政，心在苍生，万户争传新乐府；堤建西湖，神归东洛，千秋永祀老诗翁。<br>A.孔子 李白 李煜 陆游<br>B.屈原 陶潜 李煜 白居易<br>C.屈原 范仲淹 陶潜 白居易<br>D.孔子 李白 白居易 范仲淹</p><p>第一句：<code>离骚</code>，能判断出是屈原；第二句：<code>忧乐</code>，能想到范仲淹；第三句：<code>篱下</code>，能想到陶渊明；第四句：<code>新乐府</code>、<code>西湖</code>，能想到白居易</p><h2 id="太绝对要提高警惕，不符合中庸语气"><a href="#太绝对要提高警惕，不符合中庸语气" class="headerlink" title="太绝对要提高警惕，不符合中庸语气"></a>太绝对要提高警惕，不符合中庸语气</h2><p>与<a href="#%E7%BB%9D%E5%AF%B9%E8%A1%A8%E8%BF%B0%E6%8E%92%E9%99%A4%E6%B3%95">绝对表述排除法</a>类似，答案一定是比较模糊的、摸棱两可的，若出现过于绝对的内容，则一般是错误的</p><p>例：</p><p>关于地质年代与地层，下列说法错误的是：（D）<br>A.当岩层之间有切割现象时，被切割的岩层比切割的岩层古老<br>B.发现大量三叶虫化石的岩层比发现大量鱼类化石的岩层古老<br>C.放射性同位素方法可用来测定岩层的形成年代<br>D.在全球范围内,形成于同一地质时期的岩层岩性都是相同的</p><p>选项太过于绝对</p><h2 id="包含关系，选择最概括的"><a href="#包含关系，选择最概括的" class="headerlink" title="包含关系，选择最概括的"></a>包含关系，选择最概括的</h2><p>选择包含面最广的，涉及内容最多的</p><p>例：</p><p>下列关于我国脱贫攻坚工作说法准确的是：（D）<br>A.强化行政一把手负总责的责任制<br>B.坚持先扶志，再扶智，后扶技的顺序<br>C.坚持中央统筹省负总责县乡抓落实的工作机制<br>D.动员全党全国全社会力量，坚持精准扶贫，精准脱贫</p><h2 id="本质出发点落脚点，实在不行选民意"><a href="#本质出发点落脚点，实在不行选民意" class="headerlink" title="本质出发点落脚点，实在不行选民意"></a>本质出发点落脚点，实在不行选民意</h2><p>看到人民群众，基本都是正确的</p><p>例1：</p><p>“中国共产党必须始终代表中国先进生产力的发展要求，代表中国先进文化的前进方向，代表中国最广大人民的根本利益。”这是对“三个 代表”重要思想的集中概括。“三个代表”重要思想的根本出发点和落脚点是：（A）<br>A.实现人民的愿望、满足人民的需要、维护人民的利益<br>B.大力促进先进生产力的发展<br>C.大力发展社会主义先进文化<br>D.不断增强社会主义国家的综合国力</p><p>例2：</p><p>习近平总书记指出，体育强国的基础在于（ A），要通过举办北京冬奥会、冬残奥会，把我国冰雪运动特别是雪上运动搞上去,在 3 亿人中更好推广冰雪运动。</p><p>A.群众体育<br>B.竞技体育<br>C.体育文化<br>D.体育产业</p><h2 id="四个选项三个同，选择存异选项"><a href="#四个选项三个同，选择存异选项" class="headerlink" title="四个选项三个同，选择存异选项"></a>四个选项三个同，选择存异选项</h2><p>选择与其它选项不同的</p><p>例：</p><p>下列关于武器装备的说法中错误的是：（C）<br>A.尼米兹级航母是美军装备的核动力航空母舰<br>B.S300 导弹是俄罗斯生产的高空防空导弹<br>C.枭龙是我国生产的性能优良的无人机<br>D.Ｆ-22 是美军装备的先进的隐身战机</p><p>由于其它四个选项都在说国外，因此选C</p><h2 id="正确选项常辨证说，错误选项脱离实际"><a href="#正确选项常辨证说，错误选项脱离实际" class="headerlink" title="正确选项常辨证说，错误选项脱离实际"></a>正确选项常辨证说，错误选项脱离实际</h2><p>选项内容要符合实际情况</p><p>例：</p><p>下列关于农业的说法正确的是：（A）<br>Ａ.花生、大豆、向日葵和芝麻都属于油料作物<br>Ｂ.农药在夏天中午气温较高时喷洒灭虫效果最好<br>Ｃ.有机农作物通常种在便于运输的交通主干线附近<br>Ｄ.追肥是农闲时期为调节土地所含养分而施用的肥料</p><h1 id="第四种方法"><a href="#第四种方法" class="headerlink" title="第四种方法"></a>第四种方法</h1><p>第四种方法内容与其它内容有一定重合，这里只记录不一样的地方</p><h2 id="关键词中庸"><a href="#关键词中庸" class="headerlink" title="关键词中庸"></a>关键词中庸</h2><p>答案出现在选项中最多相同或相反的关键词中。若多个选项含有相同关健词，答案越容易被遮蔽，不易被发现，符合中庸之道。 某一个选项含有最多的关健词语，那么这个选项最容易隐藏自己，最符合中庸之道， 就是正确选项。</p><p>例：</p><p>下列表述不正确的是（B）。 </p><p>A.自然界中的金属在常温下一般呈固态 </p><p>B.惰性气体不与其他物质发生化学反应 </p><p>C.天然气是一种无色无味无毒的气体燃料 </p><p>D.钢是铁和碳按照一定比例加工而成的合金<br>由于B C 选项中都有关键词气体。所以答案在 B C 选项中，进一步分析，选B</p><h2 id="判断选项长短"><a href="#判断选项长短" class="headerlink" title="判断选项长短"></a>判断选项长短</h2><p>原则一 如果题干要选正确的 那么答案在长度最中庸的选项中即长度不长不短的选项是答案<br>原则二 如果题干要选错误的 那么答案在长度最不中庸的选项中即长度最长或者最短的选项便是答案</p><p>例1：</p><p>下列关于国家主权及国防地理的表述，不正确的是：（A）<br>A. 主权是联合国赋予国家的最基本的权利<br>B. 一国的领海和领空都是其领土的组成部分<br>C. 我国南海四大群岛是东沙、西沙、中沙和南沙群岛<br>D. 我国与越南、缅甸、吉尔吉斯斯坦等十几个国家接壤<br>首先，要选错误的。根据原则二 A 选项最短 D 选项最长，所以排除 B C，进一步分析则选A</p><p>例2：</p><p>关于欧洲主权债务危机的原因，下列说法不正确的是？（A）<br>A.欧元升值<br>B.欧元区经济低迷<br>C.巨额财政赤字<br>D.财政政策与货币政策的不协调<br>首先，要选不正确的。根据原则二 A 选项最短 D 选项最长，所以排除 B C。又根 据<a href="#%E5%85%B3%E9%94%AE%E8%AF%8D%E4%B8%AD%E5%BA%B8">关键词中庸</a>原则，直接选 A。</p><h2 id="答案体现民族自豪感"><a href="#答案体现民族自豪感" class="headerlink" title="答案体现民族自豪感"></a>答案体现民族自豪感</h2><p>体现中国好的是正确的，反之是错误的。命题者必须积极弘扬中国的强大。</p><p>注意：民族自豪感会表现的比较隐蔽</p><p>例：</p><p>下列关于我国经济发展现状的表达，不正确的是：（C）<br>A、人均国民生产总值已超过 3000 美元<br>B、黄金储备量已超过 1000 吨<br>C、对石油进口的依存度已接近 30%<br>D、第三产业增加值已接近第二产业<br>我们看到每个选项都有数字，不能用规律一了。这时，我们仔细观察人均生产总值突破了，黄金储量超过了，第三产业增加值接近了，全部是说的我国强大的一面。只有 C 选项说的是我国的依存度问题，不能积极反应我国的强大。所以答案是C。 </p><h2 id="年份最近的常是答案"><a href="#年份最近的常是答案" class="headerlink" title="年份最近的常是答案"></a>年份最近的常是答案</h2><p>出题者喜欢考最近年份的知识</p><p>下列关于我国人大代表选举的表述，不正确的是：（D）<br>A、1953 年通过的选举法规定，全国人大代表的选举，各省按每 80 万人选代表 1人， 直辖市和人口在 50 万以上的直辖市按每 10 万人选代表 1 人<br>B、1979 年修订的选举法规定。自治州、县、自治县人大代表中，农村每一代表的人 口数 4 倍于镇每一代表所代表的人口数、省、自治区人大为 5：1，全国人大为8：1<br>C、1995 年修改的选举法规定，省、自治区和全国人大代表中，农村每一代表与城市每一代表所代表的人口数为 4：1，自治州、县、自治县仍是 4：1<br>D、2010 年修改的选举法规定，全国人民代表大会代表名额，按照每一代表所代表的城乡人口数 2： 1 的原则，以及保证各地区、各民族、各方面都有适当数量代表的 要求进行分配</p><p>由于2010年距离最近，则选择D</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;国考之常识推理&quot;&gt;&lt;a href=&quot;#国考之常识推理&quot; class=&quot;headerlink&quot; title=&quot;国考之常识推理&quot;&gt;&lt;/a&gt;国考之常识推理&lt;/h1&gt;&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;记录整理网络中如何快速判断常识答案的蒙题技巧&lt;/p&gt;</summary>
    
    
    
    
    <category term="国考" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E5%9B%BD%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>国考之资料分析</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/12/30/%E5%9B%BD%E8%80%83%E4%B9%8B%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/12/30/%E5%9B%BD%E8%80%83%E4%B9%8B%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/</id>
    <published>2022-12-30T10:27:55.000Z</published>
    <updated>2023-01-03T09:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="国考之资料分析"><a href="#国考之资料分析" class="headerlink" title="国考之资料分析"></a>国考之资料分析</h1><p><a href="https://doi.org/10.5281/zenodo.7500772"><img src="https://zenodo.org/badge/DOI/10.5281/zenodo.7500772.svg" alt="DOI"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在此处记录一下资料分析的相关知识点，内容来自于花生十三</p><span id="more"></span><p>在花生十三这里，有几个数据需要记录：</p><ul><li>B：现期值</li><li>A：基期值</li><li>R：增长率</li><li>X：增长量</li></ul><h1 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h1><h2 id="高位叠加"><a href="#高位叠加" class="headerlink" title="高位叠加"></a>高位叠加</h2><p>与记忆中的列竖式作加法顺序相反，高位叠加是从高位加起，抓住问题的主要矛盾。非精确求和和没有选项可以参考时可以使用高位叠加</p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20230102153019795.png" alt="image-20230102153019795" style="zoom:50%;" /><p>适合：非精确题目</p><p>适用范围：求比重、合计多少、</p><h2 id="“21”-“12”分段法"><a href="#“21”-“12”分段法" class="headerlink" title="“21” “12”分段法"></a>“21” “12”分段法</h2><p>将三位数的减法分为“21”或者“12”两段，并尽可能保证不需要借位</p><p>如 <code>519-127</code>：</p><p>个位：9&gt;7，百位+十位：51&gt;12；我们可以将减法进行分段计算，百位+十位为一段“2”，个位为一段“1”</p><p>则个位  = 9-7=2；百位+十位 = 51-12=39；将数据回归原位，答案=392</p><h2 id="整数基准值法"><a href="#整数基准值法" class="headerlink" title="整数基准值法"></a>整数基准值法</h2><p>被减数-减数=（被减数-基准值）+（基准值-减数）</p><p>如 <code>632-588</code> ：</p><p>十位+个位中的3 2均小于 8  8；因此可以加入基准值，将减数588向上取整为600，则<br>$$<br>632-588 = （632-600）+（600-588） = 44<br>$$</p><h2 id="小分互换"><a href="#小分互换" class="headerlink" title="小分互换"></a>小分互换</h2><p>若乘法中有某个乘数可以近似转化为某个常见分数，我们可以将多位数乘法转华为简单的除法计算</p><p>常见百化分分数：</p><table><thead><tr><th>1/2 = 50%</th><th>1/7=14.3%</th><th>1/12=8.3%</th><th>1/17=5.9%</th></tr></thead><tbody><tr><td>1/3=33.3%</td><td>1/8=12.5%</td><td>1/13=7.7%</td><td>1/18=5.6%</td></tr><tr><td>1/4=25%</td><td>1/9=11.1%</td><td>1/14=7.1%</td><td>1/19=5.3%</td></tr><tr><td>1/5=20%</td><td>1/10=10%</td><td>1/15=6.7%</td><td>2/7=28.6%</td></tr><tr><td>1/6=16.7%</td><td>1/11=9.9%</td><td>1/16=6.3%</td><td>3/7=42.9%</td></tr></tbody></table><p>如 <code>464*25%</code> ：<br>$$<br>25%=1/4，则464<em>25%=464/4=116<br>$$<br>如果遇到不是那么整的数值，如$464</em>12.1%$，则可以考虑将$12.1%化为11.1%+1%$之后转成$\frac{464}{9}+4.64\approx56.2$</p><h2 id="凑整拆分"><a href="#凑整拆分" class="headerlink" title="凑整拆分"></a>凑整拆分</h2><p>将乘数拆分为“2或5”等容易计算的数字组成</p><p>如 <code>464*48%</code>：<br>$$<br>464<em>48% = 464</em>（50%-2%） = 464/2-464*2% =232-9.28=222.72<br>$$</p><h2 id="预估拆分法"><a href="#预估拆分法" class="headerlink" title="预估拆分法"></a>预估拆分法</h2><p>将被除数由大到小拆成几部分分别计算，通过逐步分解，从而得到结果。</p><p>例1：</p><p>$\frac{715}{729} = \frac{729-14}{729}=1-\frac{14}{729}\ \ \ \ 由于，\frac{14}{729} =2^-%，\ \ \ \ 因此\frac{715}{729} = 98^+%$</p><p>例2：</p><p>$\frac{247}{532}=\frac{266-19}{532}=50%-4^-%=46^+%$</p><p>例3：</p><p>$\frac{335}{831}\ \ 大体可以看出，约40%，因此40%*831=332,\frac{335}{831}=\frac{332+3}{831}=40%+0.4^-%=40.4^-%$</p><p>使用规则：</p><ul><li>如果分数大小接近1（分子分母相差不大）可以先用100%减去、加上</li><li>如果分子在分母的50%附近，先拆出50%</li><li>如果分子在分母的50%-100%之间且不好预估，先拆出50%，之后继续计算</li><li>如果分母接近500或1000，可以直接根据分子判断分数大约的百分比</li><li>在不满足上述情况下，可以根据首位比值或分子前两位与分母首位比值，拆出其它特殊分数（如：1/3、1/4、1/6、1/7、30%、40%、70%等）</li></ul><h2 id="“415”份数法"><a href="#“415”份数法" class="headerlink" title="“415”份数法"></a>“415”份数法</h2><p>将数量关系转化为份数比例关系，从而简化计算。一般来讲，将现期B和增长率R为已知量的前提下，可以使用415份数法快速获得基期A与变化量X的数值</p><p>例如：增长率为25%（$\frac14$），为了方便计算，可以将基期设为4份，变化量X=AR=1份，现期为基期和变化量之和，为5份。则基期、变化量、现期的份数分别为4、1、5</p><p>使用时机：增长率R在一个分数附近</p><p>例：</p><p><em>今年工资456，比去年降低了12.5%，则去年工资是多少？</em></p><p>$-12.5%=-\frac18$，则对于“415”份数来讲，现期为7份，增长量为-1份，基期为8份，$\frac{456}{7} \approx65$,则基期为“7+1”则为$65+456=521$</p><h2 id="假设分配法"><a href="#假设分配法" class="headerlink" title="假设分配法"></a>假设分配法</h2><p>现期、基期、增长量成一定比例，且现期=基期+增长量，通常通过假设基期、增长量来分配现期，多退少补，逐步趋于正确的基期和增长量。</p><p>核心公式：</p><ul><li>B=A+X——剩余分配=B-A-X</li><li>A=B/(1+R)——A：X：B=x：100：100+x</li><li>X=AR<ul><li>R&gt;0——ABX同号，且A&lt;B</li><li>R&lt;0——AB与X异号，且A&gt;B</li></ul></li></ul><p>其结构图大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A((现期值))</span><br><span class="line">B((基期值))</span><br><span class="line">C((剩余分配值))</span><br><span class="line">D((增长量))</span><br><span class="line">E((基期值))</span><br><span class="line">F((增长量))</span><br><span class="line">G((剩余分配值))</span><br><span class="line">A--&gt;B</span><br><span class="line">A--&gt;C</span><br><span class="line">A--&gt;D</span><br><span class="line">C--&gt;E</span><br><span class="line">C--&gt;G</span><br><span class="line">C--&gt;F</span><br></pre></td></tr></table></figure><p>左边分支为基期值，右边分支为增长量，中间剩余分配值为基期值与增长量和现期的差（基期和增长量的数值为假定）</p><p>由于大部分情况下知道现期、增长量的值，求基期的情况较多，因此，以下为两个例子</p><h5 id="例1（0-lt-x-lt-10-）"><a href="#例1（0-lt-x-lt-10-）" class="headerlink" title="例1（0&lt;x&lt;10%）:"></a>例1（0&lt;x&lt;10%）:</h5><p>假设现期量为<code>5362</code>，增长了<code>8%</code>，求基期or增长量：</p><p>假设基期量为<code>5000</code>，其<code>8%</code>为<code>400</code>，<code>5000+400=5400</code>，与<code>5362</code>相差<code>38</code>，因此中间位置写<code>-38</code>，两侧分别写<code>5000</code>和<code>400</code>，之后将<code>-38</code>看作<code>-40</code>，以<code>40*8%=3%</code>，填入右侧，则左侧值为<code>38-3=35</code>。因此基期值为<code>4965</code>，增长量为<code>397</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A((5362))</span><br><span class="line">B((5000))</span><br><span class="line">C([-38])</span><br><span class="line">D((400))</span><br><span class="line">E([-35])</span><br><span class="line">F([-3])</span><br><span class="line"></span><br><span class="line">A--&gt;B</span><br><span class="line">A--&gt;C</span><br><span class="line">A--&gt;D</span><br><span class="line">C--&gt;E</span><br><span class="line">C--&gt;F</span><br></pre></td></tr></table></figure><h5 id="例2（x-gt-10-）"><a href="#例2（x-gt-10-）" class="headerlink" title="例2（x&gt;10%）:"></a>例2（x&gt;10%）:</h5><p>假设现期量为<code>402</code>，增长了<code>16%</code>，求基期or增长量:</p><p>假设基期量为<code>300</code>，其增长量为<code>300*16%=48</code>，因此可以得到剩余量为<code>402-300-48=54</code>，由于增长量为<code>16%</code>，近似约等于可以看成<code>16.7%</code>，为$\frac16$，则增长一份的量为$\frac{54}{7}\approx8$，则增长量为<code>8</code>，基期量为<code>46</code>。因此基期为<code>346</code>，增长量为<code>56</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A((402))</span><br><span class="line">B((300))</span><br><span class="line">C((54))</span><br><span class="line">D((48))</span><br><span class="line">E((46))</span><br><span class="line">F((8))</span><br><span class="line"></span><br><span class="line">A--&gt;B</span><br><span class="line">A--&gt;C</span><br><span class="line">A--&gt;D</span><br><span class="line">C--&gt;E</span><br><span class="line">C--&gt;F</span><br></pre></td></tr></table></figure><p>在第二步的时候使用“415”方法，第一步使用误差较大，可能会导致无法选择合适数据</p><h5 id="例3（x-lt-0）"><a href="#例3（x-lt-0）" class="headerlink" title="例3（x&lt;0）:"></a>例3（x&lt;0）:</h5><p>假设现期量为456，减少了7%，求基期or增长量：</p><p>假设基期量为500，则增长量为-35，剩余量为456-500-35=-9，之后使用-9*-7%可以得到约等于1，则前面为-10</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A((456))</span><br><span class="line">B((500))</span><br><span class="line">C([-9])</span><br><span class="line">D([-35])</span><br><span class="line">E([-10])</span><br><span class="line">F((1))</span><br><span class="line"></span><br><span class="line">A--&gt;B</span><br><span class="line">A--&gt;C</span><br><span class="line">A--&gt;D</span><br><span class="line">C--&gt;E</span><br><span class="line">C--&gt;F</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;国考之资料分析&quot;&gt;&lt;a href=&quot;#国考之资料分析&quot; class=&quot;headerlink&quot; title=&quot;国考之资料分析&quot;&gt;&lt;/a&gt;国考之资料分析&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://doi.org/10.5281/zenodo.7500772&quot;&gt;&lt;img src=&quot;https://zenodo.org/badge/DOI/10.5281/zenodo.7500772.svg&quot; alt=&quot;DOI&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在此处记录一下资料分析的相关知识点，内容来自于花生十三&lt;/p&gt;</summary>
    
    
    
    
    <category term="国考" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E5%9B%BD%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>数据挖掘自救指南</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/12/10/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/12/10/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/</id>
    <published>2022-12-10T07:23:41.000Z</published>
    <updated>2022-12-20T08:26:08.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="好像密码不正确呢？再试试吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="25225cfb0dc4cee2ff3ad6cb81243de6bb8db1482603e27c8d1b1b876375ca69"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">输入正确密码查看正确文章</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/OLD_BLOG/lib/hbe.js"></script><link href="/OLD_BLOG/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">考试已经结束了，如果需要查看这篇文章，请与博主联系</summary>
    
    
    
    
    <category term="学校课程" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何在PyPI上发布自己开发的包</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/11/28/%E5%A6%82%E4%BD%95%E5%9C%A8PyPI%E4%B8%8A%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%8C%85/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/11/28/%E5%A6%82%E4%BD%95%E5%9C%A8PyPI%E4%B8%8A%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%8C%85/</id>
    <published>2022-11-28T09:23:00.000Z</published>
    <updated>2022-11-28T11:35:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于发现python的第三方包中没有自己想要用的一款，所以打算自己手写一个，顺便放在上面（为开源做贡献</p><span id="more"></span><h2 id="Need"><a href="#Need" class="headerlink" title="Need"></a>Need</h2><ul><li>python 3.7</li><li>一个能写python的IDE</li><li>一个PyPI账户</li><li>没了</li></ul><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p>一下内容以 <code>sister_xie</code>这个包名为例：</p><p>由于此项目是一个简单的示例项目，因此它的文件路径为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Z:.                             </span><br><span class="line">│  setup.py                     </span><br><span class="line">│                               </span><br><span class="line">└─sister_xie</span><br><span class="line">        __init__.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，文件夹下的 <code>sister_xie</code>名字要与后面安装文件中 <code>name</code>保持一致</p><h2 id="配置安装文件"><a href="#配置安装文件" class="headerlink" title="配置安装文件"></a>配置安装文件</h2><p>其中，<code>setup.py</code>为python的安装文件，在使用pip安装的时候，会使用到这个文件。文件配置以及详细说明如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;README.rst&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  long_description = f.read()</span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;sister_xie&#x27;</span>, <span class="comment"># 软件名称</span></span><br><span class="line">    version=<span class="string">&#x27;0.0.1&#x27;</span>, <span class="comment"># 软件版本号</span></span><br><span class="line">    author=<span class="string">&#x27;ZHYCarge&#x27;</span>, <span class="comment"># 软件作者</span></span><br><span class="line">    long_description = long_description, <span class="comment"># 长描述，显示在pypi上的介绍</span></span><br><span class="line">    author_email=<span class="string">&#x27;ZHYCarge@126.com&#x27;</span>, <span class="comment"># 作者的联系方式</span></span><br><span class="line">    url=<span class="string">&#x27;https://github.com/ZHYCarge/sister_xie&#x27;</span>, <span class="comment"># 软件的源地址</span></span><br><span class="line">    description=<span class="string">u&#x27;写给妹妹的一个小软件（确信）&#x27;</span>, <span class="comment"># 软件说明</span></span><br><span class="line">    packages=[<span class="string">&#x27;sister_xie&#x27;</span>], <span class="comment"># 指定最终发布的包中要包含的packages</span></span><br><span class="line">    install_requires=[], <span class="comment"># 需要使用到的前置库</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="编写主要代码"><a href="#编写主要代码" class="headerlink" title="编写主要代码"></a>编写主要代码</h2><p>在 <code>sister_xie</code>文件夹中的 <code>__init__.py</code>文件进行编写即可</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>为防止代码编写过程中出现相关问题，因此可以使用 <code>python setup.py check</code>命令进行检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) PS Z:\test_python&gt; python .\setup.py check</span><br><span class="line">running check</span><br><span class="line">(base) PS Z:\test_python&gt; </span><br></pre></td></tr></table></figure><p>当出现如上内容代表检查无误</p><h2 id="打包与发布"><a href="#打包与发布" class="headerlink" title="打包与发布"></a>打包与发布</h2><p>之后使用<code>python setup.py sdist build</code>命令进行打包，成功打包之后会在当前目录的dist文件夹下,创建你的包名</p><p>然后输入 <code>pip install twine</code>下载 <code>twine</code>来将你文件上传到PyPI中。</p><p>安装完成 <code>twine</code>后，输入<code>twine upload dist/*</code>来将你的打包文件进行上传，其中会要求你输入用户名和密码</p><p>最后会显示上传成功，并返回一个地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Uploading sister_xie-0.0.1.tar.gz</span><br><span class="line">100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.9/3.9 kB • 00:00 • ?</span><br><span class="line"></span><br><span class="line">View at:</span><br><span class="line">https://pypi.org/project/sister-xie/0.0.1/</span><br><span class="line">(base) PS Z:\test_python&gt; </span><br></pre></td></tr></table></figure><p>至此，项目便成功发布到PyPI上面</p><h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>由于操作问题，在PyPI上面包名更改为 <code>xyqsister</code>，如需了解此项目可以直接点击<a href="https://pypi.org/project/xyqsister/0.0.1/">此处</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/26159930">如何将自己的程序发布到 PyPI</a></li><li><a href="https://cloud.tencent.com/developer/article/1757852">实战教程：如何将自己的Python包发布到PyPI上</a></li><li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">PyPI官方教程</a></li></ul><blockquote><p> 排名不分先后</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于发现python的第三方包中没有自己想要用的一款，所以打算自己手写一个，顺便放在上面（为开源做贡献&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://zhycarge.github.io/OLD_BLOG/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib中文字体的显示问题</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/10/19/matplotlib%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E7%9A%84%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/10/19/matplotlib%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E7%9A%84%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</id>
    <published>2022-10-19T12:11:03.000Z</published>
    <updated>2022-10-19T13:00:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在实际使用 <code>matplotlib</code>这个库的时候，发现如果使用中文字体，会造成方块字的显示，因此尝试修复此类问题</p><span id="more"></span><h2 id="出现方式"><a href="#出现方式" class="headerlink" title="出现方式"></a>出现方式</h2><p>使用阿里云天池的<code>DSW</code>用上述库会出现此类问题</p><h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><h2 id="使用原生字体"><a href="#使用原生字体" class="headerlink" title="使用原生字体"></a>使用原生字体</h2><p>使用以下命令去查看在<code>matplotlib</code>中已经默认识别好的相关字体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> font <span class="keyword">in</span> font_manager.fontManager.ttflist:</span><br><span class="line">    <span class="comment"># 查看字体名以及对应的字体文件名</span></span><br><span class="line">    <span class="built_in">print</span>(font.name, <span class="string">&#x27;-&#x27;</span>, font.fname)</span><br></pre></td></tr></table></figure><p>然后找到你认识的能使用中文的字体名称，如下图的：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20221019205305064.png" alt="image-20221019205305064"></p><p>之后使用<code>plt.rcParams[&#39;font.sans-serif&#39;] = &#39;AR PL UKai CN&#39;</code>即可将全局文字进行替换(<code>Ubuntu20.04</code>好像自带此款字体，但是 <code>matplotlib</code>并不会初始使用此款字体 )</p><h2 id="使用第三方字体"><a href="#使用第三方字体" class="headerlink" title="使用第三方字体"></a>使用第三方字体</h2><p>如果在上述命令中你并未发现能够有识别中文的字体文件，则可以临时注册将一个第三方字体来传入到 <code>matplotlib</code>中进行使用</p><p>以 <code>SimSun.ttf</code>字体为例</p><ol><li><p>首先获取该字体文件，可以使用我的文件<a href="https://github.com/ZHYCarge/SundryBox/blob/main/font/SimSun.ttf">点我获取</a></p></li><li><p>使用 <code>matplotlib</code>自带的 <code>font_manager.fontManager.addfont()</code>方法进行注册字体：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line">font_manager.fontManager.addfont(<span class="string">&#x27;../数据挖掘/SimSun.ttf&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>确认字体文件已经被加载到字体库中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> font <span class="keyword">in</span> font_manager.fontManager.ttflist:</span><br><span class="line">    <span class="comment"># 查看字体名以及对应的字体文件名</span></span><br><span class="line">    <span class="keyword">if</span> font.fname.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] == <span class="string">&#x27;SimSun.ttf&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(font.name, <span class="string">&#x27;-&#x27;</span>, font.fname)</span><br></pre></td></tr></table></figure><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20221019204156443.png" alt="image-20221019204156443"></p></li><li><p>输入显示最前面的字体名称进行导入并输出测试文字进行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimSun&#x27;</span></span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;数据挖掘&#x27;</span>,fontsize=<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20221019204524564.png" alt="image-20221019204524564"></p></li></ol><p>为了解决保存图像是负号’-‘显示为方块的问题，最好添加下方的代码：</p><p><code>plt.rcParams[&#39;axes.unicode_minus&#39;] = False  # 解决保存图像是负号&#39;-&#39;显示为方块的问题</code></p><p>整体实现代码如下（字体文件为：<code>SimSun.ttf</code>，路径为：<code>../数据挖掘/SimSun.ttf</code>）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">font_manager.fontManager.addfont(<span class="string">&#x27;../数据挖掘/SimSun.ttf&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimSun&#x27;</span></span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;数据挖掘&#x27;</span>,fontsize=<span class="number">60</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br></pre></td></tr></table></figure><p>​    </p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1761532">matplotlib字体设置看这一篇就够了</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在实际使用 &lt;code&gt;matplotlib&lt;/code&gt;这个库的时候，发现如果使用中文字体，会造成方块字的显示，因此尝试修复此类问题&lt;/p&gt;</summary>
    
    
    
    
    <category term="matplotlib" scheme="https://zhycarge.github.io/OLD_BLOG/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>由于CI引起的博文更新异常</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/10/16/%E7%94%B1%E4%BA%8ECI%E5%BC%95%E8%B5%B7%E7%9A%84%E5%8D%9A%E6%96%87%E6%9B%B4%E6%96%B0%E5%BC%82%E5%B8%B8/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/10/16/%E7%94%B1%E4%BA%8ECI%E5%BC%95%E8%B5%B7%E7%9A%84%E5%8D%9A%E6%96%87%E6%9B%B4%E6%96%B0%E5%BC%82%E5%B8%B8/</id>
    <published>2022-10-16T13:27:32.000Z</published>
    <updated>2022-10-17T01:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于在进行 <code>CI</code>的时候，会将仓库下所有的博文全部拉去到存储区 ，导致<code>HEXO</code>默认所有博文全部进行了修改，从而个人博客的博文的更新日期失常</p><span id="more"></span><h1 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h1><p>在了解到<a href="https://mrseawave.github.io/blogs/articles/2021/01/07/ci-hexo-update-time/">这篇博文</a>之后，参考我自身的 <code>GitHub Actions</code>的相关设置，发现了这个错误，并且得知可以根据以下内容对 <code>GitHub Actions</code>进行修改来防止错误产生</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在<code>yml</code>文件中将<code>checkout</code>命令更新成：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"><span class="attr">with:</span></span><br><span class="line">  <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">file</span> <span class="string">modification</span> <span class="string">time</span> <span class="comment"># 更新所有文件为最后修改时间</span></span><br><span class="line"><span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">cd</span> <span class="string">source/_post/</span></span><br><span class="line">    <span class="string">git</span> <span class="string">ls-files</span> <span class="string">-z</span> <span class="string">|</span> <span class="string">while</span> <span class="string">read</span> <span class="string">-d</span> <span class="string">&#x27;&#x27;</span> <span class="string">path;</span> <span class="string">do</span> <span class="string">touch</span> <span class="string">-d</span> <span class="string">&quot;$(git log -1 --format=&quot;</span><span class="string">@%ct&quot;</span> <span class="string">&quot;$path&quot;</span><span class="string">)&quot;</span> <span class="string">&quot;$path&quot;</span><span class="string">;</span> <span class="string">done</span></span><br><span class="line">    <span class="string">cd</span> <span class="string">../..</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即可</p><p>由于在实际过程中，如果仅仅使用了<code>git</code>的相关命令会导致它会获取全部的内容。由于<code>Hexo</code>以及<code>Next</code>的相关代码更新久远，会极大的延长<code>Actions</code>的运行处理时间，因此这里仅进入到文章界面进行更改</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于在进行 &lt;code&gt;CI&lt;/code&gt;的时候，会将仓库下所有的博文全部拉去到存储区 ，导致&lt;code&gt;HEXO&lt;/code&gt;默认所有博文全部进行了修改，从而个人博客的博文的更新日期失常&lt;/p&gt;</summary>
    
    
    
    
    <category term="about" scheme="https://zhycarge.github.io/OLD_BLOG/tags/about/"/>
    
  </entry>
  
  <entry>
    <title>Python RSA文件加密系列——生成公私钥、文件签名</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/09/25/Python%20RSA%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%94%9F%E6%88%90%E5%85%AC%E7%A7%81%E9%92%A5%E3%80%81%E6%96%87%E4%BB%B6%E7%AD%BE%E5%90%8D/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/09/25/Python%20RSA%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%94%9F%E6%88%90%E5%85%AC%E7%A7%81%E9%92%A5%E3%80%81%E6%96%87%E4%BB%B6%E7%AD%BE%E5%90%8D/</id>
    <published>2022-09-25T13:00:00.000Z</published>
    <updated>2022-09-25T12:53:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>个人认为后续工作中可能需要涉及到相关信息的唯一性以及相关信息传输的保密性，因此尝试现阶段学习一下相关加密技术（呜呜呜应该复习考公的）</p><span id="more"></span><h2 id="需要"><a href="#需要" class="headerlink" title="需要"></a>需要</h2><ul><li>python环境（感觉什么都可以）</li><li>第三方库：<code>rsa</code></li></ul><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="生成公私钥"><a href="#生成公私钥" class="headerlink" title="生成公私钥"></a>生成公私钥</h2><p>使用函数： <code>rsa.newkeys(num)</code>，其中：</p><ul><li><p><code>num</code>：必要参数，存储<code>n=q*p</code>所需要的位数</p></li><li><p><code>accurate</code>：可选参数，默认是<code>True</code></p><p>当它为真时，上述参数中的 <code>n</code>必定为你所需要的位数（创建速度会慢）</p><p>当它为假时，上述参数中的 <code>n</code>的数值可能会小（处理速度快）</p></li><li><p><code>poolsize</code>：可选参数，默认是 <code>1</code></p><p>用于生成素数的进程数 数字。如果设置为大于 <code>1</code> 的数字，将使用并行算法。 这需要 <code>Python 2.6</code> 或更高版本。</p></li><li><p><code>exponent</code>：可选参数，默认<code>65537</code></p><p>  他是密钥的指数；更改它的时候你要对此有极大的了解，因为指数会影响破解私钥的难度。</p></li></ul><p>它会返回一个公钥和私钥，因此需要创建一个元组去接值</p><p>整体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">(pubkey, privkey) = rsa.newkeys(<span class="number">2048</span>)</span><br><span class="line">pub = pubkey.save_pkcs1()</span><br><span class="line">pubfile = <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pubfile.write(pub)</span><br><span class="line">pubfile.close()</span><br><span class="line"></span><br><span class="line">pri = privkey.save_pkcs1()</span><br><span class="line">prifile = <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">prifile.write(pri)</span><br><span class="line">prifile.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个公钥和私钥到你本地目录下</span></span><br></pre></td></tr></table></figure><h2 id="读取公私钥"><a href="#读取公私钥" class="headerlink" title="读取公私钥"></a>读取公私钥</h2><p>这里仅贴代码仅供参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载公私钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pubkey = rsa.PublicKey.load_pkcs1(f.read().encode())</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    privkey = rsa.PrivateKey.load_pkcs1(f.read().encode())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h2><p>当你要给别人发消息时候，需要确保消息的真实性，不会被别人所截获，因此会需要使用到私钥对你的数据进行签名，到对方手上的时候，对方可以使用你所给的公钥进行验签，这里讲解如何实现签名的生成</p><p>此处使用函数：<code>rsa.sign()</code>，其中：</p><ul><li><p><code>message</code>：必要参数，要签名的消息。</p><p>可以是 8 位字符串或类似文件 目的。如果 <code>message</code> 有 <code>read()</code> 方法，它被假定为 类文件对象。</p></li><li><p> <code>priv_key</code>：必要参数，使用的私钥信息。</p></li></ul><p>  需要先加载私钥信息才可使用</p><ul><li><p><code>hash_method</code>：必要参数，所使用的哈希算法。</p><p>通常参数为：<code>MD5</code>、<code>SHA-1</code>、<code>SHA-224</code>、<code>SHA-256</code>、<code>SHA-384</code>、<code>SHA-512</code></p><blockquote><p>具体参数优劣请自行查询其他文档</p></blockquote></li></ul><p>可能会出现的异常信息：  <code>OverflowError</code>：如果私钥信息过小，可能无法包含相关信息</p><p>可选函数：<code>base64.b64encode(你需要编码的信息)</code>，使用其将上述信息进行二次编码，方便后续传输</p><p>部分代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sign_by</span>(<span class="params">data: <span class="built_in">str</span>, privkey: rsa.PrivateKey</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    私钥加密，使用此函数对相应信息进行加密</span></span><br><span class="line"><span class="string">    :param data: 所需要加密的信息，字符串格式</span></span><br><span class="line"><span class="string">    :param privkey: 私钥信息，已经读取好的</span></span><br><span class="line"><span class="string">    :return: 返回私钥签名好的信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sign = rsa.sign(data.encode(), privkey, <span class="string">&#x27;SHA-256&#x27;</span>)</span><br><span class="line">    sign = base64.b64encode(sign)</span><br><span class="line">    <span class="keyword">return</span> sign</span><br></pre></td></tr></table></figure><h2 id="验证签名"><a href="#验证签名" class="headerlink" title="验证签名"></a>验证签名</h2><p>当对方拿到你发的信息以及所生成的签名之后，他需要使用公钥对其进行判断，确保在传输过程中没有信息有所损失。</p><p>使用函数：<code>rsa.verify()</code>，其中：</p><ul><li><code>message</code>：必要参数。需要验证的信息内容（需要字节流信息）</li><li><code>signature</code>：必要参数。拿到的签名信息</li><li><code>pub_key</code>：必要参数。你手上的公钥信息</li></ul><p>可能会出现的异常信息：<code>rsa.VerificationError</code>：当验证签名信息失败的时候进行抛出，否则返回的是所使用的签名算法名称</p><p>部分代码片段（为方便，用try函数判定是否出现，并返回布尔型数据）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkout_sign</span>(<span class="params">data: <span class="built_in">str</span>, sign: <span class="built_in">bytes</span>, pubkey</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用公钥验证签名信息</span></span><br><span class="line"><span class="string">    :param data: 需要检验的信息</span></span><br><span class="line"><span class="string">    :param sign: 签名信息，base64编码格式文件</span></span><br><span class="line"><span class="string">    :param pubkey: 公钥信息，已经读取好的</span></span><br><span class="line"><span class="string">    :return: 根据是否验签成功，如果检验成功则返回True，如果不成功则返回False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sign = base64.b64decode(sign)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rsa.verify(data.encode(), sign, pubkey)</span><br><span class="line">    <span class="keyword">except</span> rsa.VerificationError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><p>增加了一丢丢代码之后的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/25 19:23</span></span><br><span class="line"><span class="comment"># @Author  : ZHYCarge</span></span><br><span class="line"><span class="comment"># @Email   : ZHYCarge@126.com</span></span><br><span class="line"><span class="comment"># @File    : 生成签名.py</span></span><br><span class="line"><span class="comment"># @Brief   :使用私钥生成签名以获得一个概览信息</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">&#x27;Tmq2JoRvPCfvVKUhC2pjaiEu5c9EZxu5NlC7wGw6jl766r1Aqv/7I/Cmi2vIT15Icye/TiwArV0NNG4XqGP40oTebkfaCLfU5R91QnJFgUFnXAHLWO62ehWXcigmt5mSo4DojwfvmlMbzbuEZ0Qdj0XoVdqn96qEPvFGLAixzG/9+4KzBjgIKr3N4iQwBz3TIWM6iQU4TIxTZqJv9CvRQBZye1exj5PPB1ppWtNqsa5zx39FFwZdRXKfiUNGcSoNVAjXP3TU76cuWsCPIe7HLqDdtV4hTmjTvJ2trQ2SWne4p+SzvzsOUHGRLCIob1l2w4+EB6FvEvFhOjagwd0ieQ==&#x27;</span></span><br><span class="line"><span class="comment"># 加载公私钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pubkey = rsa.PublicKey.load_pkcs1(f.read().encode())</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    privkey = rsa.PrivateKey.load_pkcs1(f.read().encode())</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign_by</span>(<span class="params">data: <span class="built_in">str</span>, privkey: rsa.PrivateKey</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    私钥加密，使用此函数对相应信息进行加密</span></span><br><span class="line"><span class="string">    :param data: 所需要加密的信息，字符串格式</span></span><br><span class="line"><span class="string">    :param privkey: 私钥信息，已经读取好的</span></span><br><span class="line"><span class="string">    :return: 返回私钥签名好的信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sign = rsa.sign(data.encode(), privkey, <span class="string">&#x27;SHA-256&#x27;</span>)</span><br><span class="line">    sign = base64.b64encode(sign)</span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkout_sign</span>(<span class="params">data: <span class="built_in">str</span>, sign: <span class="built_in">bytes</span>, pubkey</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用公钥验证签名信息</span></span><br><span class="line"><span class="string">    :param data: 需要检验的信息</span></span><br><span class="line"><span class="string">    :param sign: 签名信息，base64编码格式文件</span></span><br><span class="line"><span class="string">    :param pubkey: 公钥信息，已经读取好的</span></span><br><span class="line"><span class="string">    :return: 根据是否验签成功，如果检验成功则返回True，如果不成功则返回False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sign = base64.b64decode(sign)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rsa.verify(data.encode(), sign, pubkey)</span><br><span class="line">    <span class="keyword">except</span> rsa.VerificationError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename = sys.argv[<span class="number">1</span>]</span><br><span class="line">        method = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;操作2：进行验签，返回True或者False\n&quot;</span></span><br><span class="line">              <span class="string">&quot;操作1：进行签名，将数据进行签名&quot;</span>)</span><br><span class="line">        methods = <span class="built_in">input</span>(<span class="string">&quot;请输入你所需要操作的文件以及需要的操作（用空格进行分开）&quot;</span>)</span><br><span class="line">        methods = methods.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            filename = methods[<span class="number">0</span>]</span><br><span class="line">            method = methods[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入的信息格式错误，请重新输入！&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        sign = <span class="built_in">input</span>(<span class="string">&quot;请输入签名信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(checkout_sign(message, sign.encode(), pubkey))</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        sign = sign_by(message, privkey)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;签名信息如下，请保存：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(sign)[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你所输入的信息不满足，进程已停止&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;个人认为后续工作中可能需要涉及到相关信息的唯一性以及相关信息传输的保密性，因此尝试现阶段学习一下相关加密技术（呜呜呜应该复习考公的）&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://zhycarge.github.io/OLD_BLOG/categories/Study/"/>
    
    
    <category term="笔记" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Python" scheme="https://zhycarge.github.io/OLD_BLOG/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何高效友好的提出一个技术性问题</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/</id>
    <published>2022-09-11T02:00:00.000Z</published>
    <updated>2022-09-14T11:10:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么要规范问题格式？"><a href="#为什么要规范问题格式？" class="headerlink" title="为什么要规范问题格式？"></a>为什么要规范问题格式？</h2><p>因为在实际的学习中，总会遇到许许多多的问题提问方式，有些提问方式会显得更加高效率，而有些提问会极大的延长回复问题的时间，因此制作一个 <code>关于技术性问题的提问模板</code>，就会显得比较重要</p><span id="more"></span><p>如果不想看那么多，只想获得一个模板格式，<a href="##%E6%A1%86%E6%9E%B6%E5%86%85%E5%AE%B9">点我</a></p><h2 id="这样做对我有什么好处？"><a href="#这样做对我有什么好处？" class="headerlink" title="这样做对我有什么好处？"></a>这样做对我有什么好处？</h2><p>对于每个人来讲，更加规范更加优秀的提问会极大的促进问答两个人之间的沟通效率，因此如何高效而又有效的问答，则是每个人需要学会的一件事。规范了问答格式，会让大家更倾向于去解决你的问题</p><h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p>这个标题最早来自于GitHub的一个开源仓库，由于其中内容介绍的十分中肯，因此也是受到了许多同行们的fork以及star，因此如果有时间可以去阅读一下他的文章，<a href="https://github.com/GUET-EETB/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">文章链接</a></p><p>对于其中的一些问题，我做了一部分的节选（该章节其余内容来源于其文章内容）：</p><h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。 第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加； 第二，简化问题使你更有可能得到<strong>有用</strong>的答案； 第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的 RGB 值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot）， 但却无法从某绘图程序的颜色选择器取得十六进制的 RGB 值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p><h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好地理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p><h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户群组，论坛或（最后一招）在项目的<strong>用户</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的用户也许仍会给你一些提示。</p><h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h1 id="那我应该使用什么方式进行提问？"><a href="#那我应该使用什么方式进行提问？" class="headerlink" title="那我应该使用什么方式进行提问？"></a>那我应该使用什么方式进行提问？</h1><p>由于每个问题都会对应不同的提问框架，但是对于一般的技术性问题来讲，你大抵可以使用以下此类框架：</p><h2 id="使用框架前你需要明确："><a href="#使用框架前你需要明确：" class="headerlink" title="使用框架前你需要明确："></a>使用框架前你需要明确：</h2><ul><li>我已经阅读完毕 <a href="https://zhycarge.github.io/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/">如何高效友好的提出一个技术性问题</a>，并保证自己会遵守里面的<a href="https://zhycarge.github.io/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/##%E4%BD%BF%E7%94%A8%E6%A1%86%E6%9E%B6%E5%89%8D%E4%BD%A0%E9%9C%80%E8%A6%81%E6%98%8E%E7%A1%AE">相关要求</a></li><li>在你提出这个问题之前，你已经去查证在论坛或者其他你可以搜索到的地方没有人提出了相关问题</li><li>如果本文并未有效的帮助你更好的精简你的语言，我应该去看看 <a href="https://github.com/GUET-EETB/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">提问的智慧</a></li><li>我接下来要上传的内容不包含个人敏感信息（在上传日志、代码截图之前，我已经有效的处理好我的个人敏感信息）</li><li>如果我的问题并没有遵循相关要求，但是我还是提出了这个问题，那么我的问题会被无条件关闭或者被管理者拒绝回答</li></ul><h2 id="框架内容"><a href="#框架内容" class="headerlink" title="框架内容"></a>框架内容</h2><p>如有需要，请将下方内容复制粘贴到你需要的地方即可</p><p>此处内容采用协议 <a href="https://creativecommons.org/publicdomain/mark/1.0/">Public Domain</a></p><h3 id="框架1"><a href="#框架1" class="headerlink" title="框架1"></a>框架1</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 在开始之前</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [<span class="string"> </span>] 我已经阅读完毕并遵守[<span class="string">如何高效友好的提出一个技术性问题</span>](<span class="link">https://zhycarge.github.io/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/</span>)里面的内容</span><br><span class="line"></span><br><span class="line"><span class="section"># 我当前使用的系统环境是</span></span><br><span class="line"></span><br><span class="line">写上你的个人系统环境信息，如Windows10，python3.7 使用了什么第三方库 etc.</span><br><span class="line"></span><br><span class="line"><span class="section"># 重现步骤</span></span><br><span class="line"></span><br><span class="line">你是通过什么操作出现了这个问题，是否这个问题在你再次尝试之后再次出现</span><br><span class="line">在此处可以使用markdown代码框贴出你的代码部分（已脱敏），方便我们进行复现或者重试</span><br><span class="line"></span><br><span class="line"><span class="section"># 我的预期成果是什么？</span></span><br><span class="line"></span><br><span class="line">比如我需要1+1=2</span><br><span class="line"></span><br><span class="line"><span class="section"># 但是实际输出时什么</span></span><br><span class="line"></span><br><span class="line">但是输出了1+1=3</span><br><span class="line"></span><br><span class="line"><span class="section"># 如果有日志（报错），那么日志（报错）记录了什么？</span></span><br><span class="line"></span><br><span class="line">如果有信息，请截全</span><br><span class="line"></span><br><span class="line"><span class="section"># 有什么需要向我们进行补充的？</span></span><br><span class="line"></span><br><span class="line">可选信息</span><br></pre></td></tr></table></figure><h3 id="框架2"><a href="#框架2" class="headerlink" title="框架2"></a>框架2</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 在开始之前</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [<span class="string"> </span>] 我已经阅读完毕并遵守[<span class="string">如何高效友好的提出一个技术性问题</span>](<span class="link">https://zhycarge.github.io/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/</span>)里面的内容</span><br><span class="line"></span><br><span class="line"><span class="section"># 我的预期成果是什么？</span></span><br><span class="line"></span><br><span class="line">比如我需要1+1=2</span><br><span class="line"></span><br><span class="line"><span class="section"># 但是实际输出时什么</span></span><br><span class="line"></span><br><span class="line">但是输出了1+1=3</span><br><span class="line"></span><br><span class="line"><span class="section"># 为解决这个问题我尝试做了什么？</span></span><br><span class="line"></span><br><span class="line">比如我去百度查询了一下小学数学知识，但是并没有帮助</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># 你还有什么需要补充的吗？</span></span><br></pre></td></tr></table></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/GUET-EETB/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">提问的智慧</a></li><li><a href="https://github.com/GUET-EETB/How-To-Create-A-Issue">How-To-Create-A-Issue</a></li></ul><h2 id="本文协议"><a href="#本文协议" class="headerlink" title="本文协议"></a>本文协议</h2><p><a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;为什么要规范问题格式？&quot;&gt;&lt;a href=&quot;#为什么要规范问题格式？&quot; class=&quot;headerlink&quot; title=&quot;为什么要规范问题格式？&quot;&gt;&lt;/a&gt;为什么要规范问题格式？&lt;/h2&gt;&lt;p&gt;因为在实际的学习中，总会遇到许许多多的问题提问方式，有些提问方式会显得更加高效率，而有些提问会极大的延长回复问题的时间，因此制作一个 &lt;code&gt;关于技术性问题的提问模板&lt;/code&gt;，就会显得比较重要&lt;/p&gt;</summary>
    
    
    
    <category term="Education" scheme="https://zhycarge.github.io/OLD_BLOG/categories/Education/"/>
    
    
    <category term="Education" scheme="https://zhycarge.github.io/OLD_BLOG/tags/Education/"/>
    
  </entry>
  
  <entry>
    <title>如何使用公开图床优化文档撰写</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/09/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%85%AC%E5%BC%80%E5%9B%BE%E5%BA%8A%E4%BC%98%E5%8C%96%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/09/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%85%AC%E5%BC%80%E5%9B%BE%E5%BA%8A%E4%BC%98%E5%8C%96%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/</id>
    <published>2022-09-08T02:00:00.000Z</published>
    <updated>2022-09-08T02:31:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在网上，只要你用 <code>免费图床</code>字眼进行搜索，一定会搜索出来许多的资源，例如这篇博客：<a href="https://zhuanlan.zhihu.com/p/81713842">超好用：免费的图床</a>其中不乏有一些很适合新手小白在一开始什么也不知道的情况下帮助你更好的完成博文撰写工作的相关免费图床网站，本篇文章以 <a href="https://imgse.com/">路过图床</a>为基础，浅浅介绍一下如何使用免费图床来帮助你更好的进行文章撰写。</p><span id="more"></span><p>在使用之前，推荐阅读每一个免费图床的使用公告，例如 <a href="https://imgse.com/page/tos">服务条款-路过图床</a></p><p>作为一个计算机学子，在使用每一款产品之前，希望可以有时间阅读好每一款的使用说明，虽然可能很枯燥，但是往往会避免出现很多不必要的错误。</p><h1 id="如何使用免费图床"><a href="#如何使用免费图床" class="headerlink" title="如何使用免费图床"></a>如何使用免费图床</h1><h2 id="NO-1-注册一个账户"><a href="#NO-1-注册一个账户" class="headerlink" title="NO.1 注册一个账户"></a>NO.1 注册一个账户</h2><p>为了更好的记录你的身份，因此在使用前你需要注册一个图床账户：</p><p><img src="https://s1.ax1x.com/2022/09/08/vb6IQe.png" alt="vb6IQe.png"></p><p>这很简单，直接注册就好</p><h2 id="NO-2-将你的照片放置到图床上"><a href="#NO-2-将你的照片放置到图床上" class="headerlink" title="NO.2 将你的照片放置到图床上"></a>NO.2 将你的照片放置到图床上</h2><p>经测试，在使用的时候只要在网站内使用<kbd>Ctrl</kbd>+<kbd>V</kbd>即可激活它的上传功能，显示出如下内容：</p><p><img src="https://s1.ax1x.com/2022/09/08/vb6HeA.md.png" alt="vb6HeA.md.png"></p><p>其中，图片格式要求为 <code>JPG</code>or <code>PNG</code>，并且照片大小不能大于<code>10MB</code></p><p>之后会让你选择你存放的图库名称，以及是否进行上传，图库的话可以选择对访客开放，这样无论是谁通过什么渠道都可以看到你上传的照片：</p><p><a href="https://imgse.com/i/vbcQT1"><img src="https://s1.ax1x.com/2022/09/08/vbcQT1.md.png" alt="vbcQT1.md.png"></a></p><h2 id="使用你在图床上的照片"><a href="#使用你在图床上的照片" class="headerlink" title="使用你在图床上的照片"></a>使用你在图床上的照片</h2><p>如果进行顺利的话，它会上传完毕并且会跳转到你图片网页，并在下方附有如下内容：</p><p><a href="https://imgse.com/i/vbcCes"><img src="https://s1.ax1x.com/2022/09/08/vbcCes.md.png" alt="vbcCes.md.png"></a></p><p>你可以直接在这选择 <code>Markdown代码</code>的链接信息来复制到你的编辑器中，你的编辑器会自动识别它的格式并且进行加载图片（应该吧看你编辑器了2333）</p><p>之后这样操作就完成了</p><h2 id="如何查看我上传的照片"><a href="#如何查看我上传的照片" class="headerlink" title="如何查看我上传的照片"></a>如何查看我上传的照片</h2><p>这很简单，右上角点击个人ID找到我的图片即可，你上传过的所有照片均在此处，点进去一张照片后，你可以选择删除或者下载图片等操作。</p><p><a href="https://imgse.com/i/vbcW0s"><img src="https://s1.ax1x.com/2022/09/08/vbcW0s.png" alt="vbcW0s.png"></a></p><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><p>请注意，虽然是免费图床，并且都宣传其很安全，但是请<strong>不要将自己的个人信息以及个人隐私上传到图床中</strong>，容易造成隐私泄露等风险</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://imgse.com/">路过图床</a></li><li><a href="https://zhuanlan.zhihu.com/p/81713842">超好用：免费的图床</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在网上，只要你用 &lt;code&gt;免费图床&lt;/code&gt;字眼进行搜索，一定会搜索出来许多的资源，例如这篇博客：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/81713842&quot;&gt;超好用：免费的图床&lt;/a&gt;其中不乏有一些很适合新手小白在一开始什么也不知道的情况下帮助你更好的完成博文撰写工作的相关免费图床网站，本篇文章以 &lt;a href=&quot;https://imgse.com/&quot;&gt;路过图床&lt;/a&gt;为基础，浅浅介绍一下如何使用免费图床来帮助你更好的进行文章撰写。&lt;/p&gt;</summary>
    
    
    
    <category term="Education" scheme="https://zhycarge.github.io/OLD_BLOG/categories/Education/"/>
    
    
    <category term="Education" scheme="https://zhycarge.github.io/OLD_BLOG/tags/Education/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux删除多余软件缓存包</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/07/10/Arch%20Linux%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E8%BD%AF%E4%BB%B6%E7%BC%93%E5%AD%98%E5%8C%85/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/07/10/Arch%20Linux%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E8%BD%AF%E4%BB%B6%E7%BC%93%E5%AD%98%E5%8C%85/</id>
    <published>2022-07-10T16:20:00.000Z</published>
    <updated>2022-07-10T16:36:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了进一步给我电脑<code>Linux</code>增加内存，经过查询之后，发现如下方法可以清除多余的安装包缓存 ，从而给我电脑腾出空间</p><span id="more"></span><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="我为什么需要清除？"><a href="#我为什么需要清除？" class="headerlink" title="我为什么需要清除？"></a>我为什么需要清除？</h2><p>由于在日常的实际使用过程中，我们会经常更新相关的软件安装包，但是在<code>Arch Linux</code>中，其 <code>pacman</code>与<code>yay</code>软件安装工具对软件进行安装的过程中通常会将安装的软件缓存包一同保存到电脑中，与其他<code>Linux</code>发行版不同，其不会自行删除软件缓存包，因此在使用一段时间之后，电脑存储空间可能会被相关软件缓存占据大概 <code>40G</code>的使用空间(我自己)，因此，清除缓存空间刻不容缓2333</p><h2 id="我需要怎么做"><a href="#我需要怎么做" class="headerlink" title="我需要怎么做"></a>我需要怎么做</h2><h3 id="使用pacman进行清除"><a href="#使用pacman进行清除" class="headerlink" title="使用pacman进行清除"></a>使用<code>pacman</code>进行清除</h3><p>在其<a href="https://man.archlinux.org/man/pacman.8">官网</a>中其实也有所提醒过，对于软件缓存包的清除，可以使用<code>sudo pacman -Sc</code>对其进行清除</p><blockquote><p>请注意：清除安装包之后，所有的软件再次安装需要重新去下载，因此在删除前推荐对其进行安装</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="使用paccache进行清除"><a href="#使用paccache进行清除" class="headerlink" title="使用paccache进行清除"></a>使用<code>paccache</code>进行清除</h3><p>在使用上文所提到的方法时，会删除所有的缓存包，但是由于<code>arch</code>的特性，在大多数情况下不应该删除那么多的缓存包，往往想要留下一部分，因此可以安装<code>paccache</code>进行辅助卸载，其官网和安装方式如下：</p><p><a href="https://man.archlinux.org/man/paccache.8">官网</a></p><p><code>sudo pacman -Syu pacman-contrib</code></p><p>安装之后使用<code>sudo paccache -ruk0</code>删除缓存包，其中 <code>0</code>代表的是为每个缓存包留出多少个前置版本，如果参数为0则全部删除</p><h3 id="使用yay进行清除"><a href="#使用yay进行清除" class="headerlink" title="使用yay进行清除"></a>使用<code>yay</code>进行清除</h3><p>在大多数情况，我们也会使用<code>yay</code>命令去安装软件，但是yay使用的大多都是第三方<code>AUR</code>库中的内容，其与<code>pacman</code>的安装缓存位置不同，因此需要使用不同的方法进行清除，在<a href="https://github.com/Jguer/yay">其<code>Github</code></a>中给出的方式为：<code>yay -c</code>即可清除。或者使用<code>yay -Yc</code>清除不需要用到的依赖包。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://bynss.com/linux/471439.html">使用Pacman和Paccache回收Arch Linux上的存储空间 | 月灯依旧</a></li><li><a href="https://bynss.com/linux/696422.html">怎样在 Arch Linux 中清除包缓存 | 月灯依旧</a></li><li><a href="https://man.archlinux.org/man/pacman.8">pacman(8) — Arch manual pages</a></li><li><a href="https://man.archlinux.org/man/paccache.8">paccache(8) — Arch manual pages</a></li><li><a href="https://github.com/Jguer/yay">GitHub - Jguer/yay: Yet another Yogurt - An AUR Helper written in Go</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;为了进一步给我电脑&lt;code&gt;Linux&lt;/code&gt;增加内存，经过查询之后，发现如下方法可以清除多余的安装包缓存 ，从而给我电脑腾出空间&lt;/p&gt;</summary>
    
    
    
    <category term="学校课程" scheme="https://zhycarge.github.io/OLD_BLOG/categories/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="笔记" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="water" scheme="https://zhycarge.github.io/OLD_BLOG/tags/water/"/>
    
    <category term="Arch Linux" scheme="https://zhycarge.github.io/OLD_BLOG/tags/Arch-Linux/"/>
    
  </entry>
  
  <entry>
    <title>安装pyspark</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/06/23/%E5%AE%89%E8%A3%85pyspark/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/06/23/%E5%AE%89%E8%A3%85pyspark/</id>
    <published>2022-06-23T12:00:00.000Z</published>
    <updated>2022-07-05T08:55:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>听说spark为了支持python全面研发出一款专门调用api的工具叫做<code>pyspark</code>，因此，本着学习的目的，尝试安装一下<code>pyspark</code></p><span id="more"></span><h2 id="已有基础"><a href="#已有基础" class="headerlink" title="已有基础"></a>已有基础</h2><ul><li>ubuntu 18.04</li><li>anaconda 4.20</li><li>python 3.8</li></ul><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p><a href="https://spark.apache.org/docs/latest/api/python/getting_started/install.html?highlight=installed#:~:text=Python%203.7%20and%20above.">官网中强调</a>了，要想安装<code>pyspark</code>则最先确保自身的<code>python</code>版本要大于等于<code>3.7</code>，因此，在开始本次教程之前，需要确保自身的<code>python&gt;=3.7</code></p><p>在官网中提出了多种方式去安装 <code>pyspark</code>，其中本文将使用<code>conda</code>的方式去进行安装</p><h2 id="创建并进入conda虚拟环境"><a href="#创建并进入conda虚拟环境" class="headerlink" title="创建并进入conda虚拟环境"></a>创建并进入conda虚拟环境</h2><p>使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create --name pyspark python=3.8</span><br><span class="line">conda activate pyspark</span><br></pre></td></tr></table></figure><p>创建一个名为<code>pyspark</code> ，<code>python</code>版本为<code>3.8</code>的环境，并进入到环境当中</p><h2 id="安装-JAVA"><a href="#安装-JAVA" class="headerlink" title="安装 JAVA"></a>安装 <code>JAVA</code></h2><p>由于在运行过程中，<code>spark</code>使用的是<code>java</code>语言，因此需要安装<code>java</code>环境</p><p>安装教程在另一篇博文中有写，请参考：<a href="https://zhycarge.github.io/2021/09/23/Hadoop%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/#:~:text=%E4%B9%8B%E5%90%8E%E5%A6%82%E4%B8%8B%E6%98%BE%E7%A4%BA%EF%BC%9A-,%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEJava,-%E5%AE%89%E8%A3%85openjdk%2D8">安装及配置java模块进行安装</a></p><h2 id="安装pyspark"><a href="#安装pyspark" class="headerlink" title="安装pyspark"></a>安装<code>pyspark</code></h2><p>输入命令：</p><p><code>conda install  pyspark </code></p><p>进行安装</p><h2 id="使用-pyspark"><a href="#使用-pyspark" class="headerlink" title="使用 pyspark"></a>使用 <code>pyspark</code></h2><p>直接终端输入 <code>pyspark</code>即可看到如下界面：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220623202503071.png" alt="image-20220623202503071"></p><p>使用 <code>exit()</code>便可退出</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="测试demo"><a href="#测试demo" class="headerlink" title="测试demo"></a>测试demo</h2><p>有待更新</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://spark.apache.org/docs/latest/api/python/user_guide/python_packaging.html#using-conda">官网【使用conda安装pyspark】</a></li><li><a href="https://spark.apache.org/docs/latest/api/python/getting_started/install.html">官网【安装pyspark】</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;听说spark为了支持python全面研发出一款专门调用api的工具叫做&lt;code&gt;pyspark&lt;/code&gt;，因此，本着学习的目的，尝试安装一下&lt;code&gt;pyspark&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="study" scheme="https://zhycarge.github.io/OLD_BLOG/categories/study/"/>
    
    
    <category term="Linux" scheme="https://zhycarge.github.io/OLD_BLOG/tags/Linux/"/>
    
    <category term="pyspark" scheme="https://zhycarge.github.io/OLD_BLOG/tags/pyspark/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装anaconda</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/06/23/Ubuntu%E5%AE%89%E8%A3%85anaconda/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/06/23/Ubuntu%E5%AE%89%E8%A3%85anaconda/</id>
    <published>2022-06-23T09:00:00.000Z</published>
    <updated>2022-06-23T10:38:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想拿自己的云服务器跑Python脚本，为了防止环境导致后续出现问题，因此尝试安装Linux的Anaconda</p><span id="more"></span><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><ul><li>Ubuntu 18.04</li><li>2核2G</li><li>python3.69</li></ul><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="更新自身包"><a href="#更新自身包" class="headerlink" title="更新自身包"></a>更新自身包</h2><p><code>sudo apt update &amp;&amp; sudo apt upgrade</code></p><h2 id="下载curl软件"><a href="#下载curl软件" class="headerlink" title="下载curl软件"></a>下载<code>curl</code>软件</h2><p><code>sudo apt install curl</code></p><h2 id="进入到-tmp目录下"><a href="#进入到-tmp目录下" class="headerlink" title="进入到 /tmp目录下"></a>进入到 <code>/tmp</code>目录下</h2><p>这步可选，（存到<code>/tmp</code>目录下方便关机的时候自动给你删掉，安装包没啥用2333）</p><p><code>cd /tmp</code></p><h2 id="下载anaconda安装包"><a href="#下载anaconda安装包" class="headerlink" title="下载anaconda安装包"></a>下载<code>anaconda</code>安装包</h2><p>从<a href="https://www.anaconda.com/products/distribution#Downloads">官网</a>上找到属于你自己的anaconda安装包，如图：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220623175613105.png" alt="image-20220623175613105"></p><p><code>https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh</code></p><p>右键链接复制链接之后，在终端中输入：</p><p><code>curl -O 你复制的链接</code></p><p>例子: <code>curl -O https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh</code></p><p>等待下载完毕</p><h2 id="【可选】验证安装包的有效及完整性"><a href="#【可选】验证安装包的有效及完整性" class="headerlink" title="【可选】验证安装包的有效及完整性"></a>【可选】验证安装包的有效及完整性</h2><p>以自身为例:</p><p>输入命令</p><p><code>sha256sum Anaconda3-2022.05-Linux-x86_64.sh  </code>来生成一段sha256验证密钥,通过<a href="https://docs.anaconda.com/anaconda/install/hashes/lin-3-64/">官网链接</a>找到属于自己的版本sha256密钥</p><p>如<a href="https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-2022.05-Linux-x86_64.sh-hash/">此链接</a>对应的便是上文的密钥链接,将两段sha256密钥进行比对,一致即可</p><h2 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h2><p>输入命令</p><p><code>bash Anaconda3-2022.05-Linux-x86_64.sh</code>即可安装,</p><p>期间会让你确定安装目录\阅读许可等相关操作 </p><p>直到后面会出现安装成功提醒</p><p>之后在命令行中输入 <code>source ~/.bashrc</code></p><blockquote><p>注意:此处如果在fish中输入,会报错,因此需要先退出fish,或者直接先bash,再输入此命令</p></blockquote><h2 id="是否在每个会话中启用conda"><a href="#是否在每个会话中启用conda" class="headerlink" title="是否在每个会话中启用conda"></a>是否在每个会话中启用conda</h2><p>默认此选项是开启的,如果需要更改,输入如下命令:</p><p><code>conda config --set auto_activate_base False</code>    取消每个<code>shell</code>中使用</p><p><strong>请注意:此命令使用前提为需要在shell中提前使用 <code>conda init</code></strong></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="conda环境配置到fish中"><a href="#conda环境配置到fish中" class="headerlink" title="conda环境配置到fish中"></a>conda环境配置到fish中</h2><p>在<code>bash</code>中输入:</p><p><code>conda init fish</code></p><p>即可</p><h2 id="出现错误-Variables-may-not-be-used-as-commands-In-fish-please-define-a-function-or-use-39-eval-CONDA-EXE-39"><a href="#出现错误-Variables-may-not-be-used-as-commands-In-fish-please-define-a-function-or-use-39-eval-CONDA-EXE-39" class="headerlink" title="出现错误:Variables may not be used as commands. In fish, please define a function or use&#39;eval $CONDA_EXE&#39;. "></a>出现错误:<code>Variables may not be used as commands. In fish, please define a function or use&#39;eval $CONDA_EXE&#39;. </code></h2><p>经过面向Google编程之后发现,在<code>fish</code>版本小于 <code>3.0.0</code>时会出现这个问题:<a href="https://github.com/conda/conda/issues/11079">问题链接</a>,因此,需要通过执行<a href="https://github.com/conda/conda/issues/11079#:~:text=on%2013%20Jan-,I%20also%20came%20across%20this%20error.,-I%20solved%20it">下面命令</a>,将fish更新到最新版本来解决此类问题</p><p><code>sudo apt-add-repository ppa:fish-shell/release-3</code></p><p><code>apt update</code></p><p><code>sudo apt install fish</code></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.anaconda.com/anaconda/install/linux/">官网教程</a></li><li><a href="https://phoenixnap.com/kb/how-to-install-anaconda-ubuntu-18-04-or-20-04">国外博客[<strong>How to Install Anaconda on Ubuntu 18.04 and 20.04</strong>]</a></li><li><a href="https://github.com/conda/conda/issues/11079">Github[fish使用conda报错]</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;想拿自己的云服务器跑Python脚本，为了防止环境导致后续出现问题，因此尝试安装Linux的Anaconda&lt;/p&gt;</summary>
    
    
    
    <category term="study" scheme="https://zhycarge.github.io/OLD_BLOG/categories/study/"/>
    
    
    <category term="Linux" scheme="https://zhycarge.github.io/OLD_BLOG/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>配置Tensorflow环境</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/05/24/%E9%85%8D%E7%BD%AETensorflow%E7%8E%AF%E5%A2%83/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/05/24/%E9%85%8D%E7%BD%AETensorflow%E7%8E%AF%E5%A2%83/</id>
    <published>2022-05-24T03:00:00.000Z</published>
    <updated>2022-07-05T08:55:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于机器学习课程需要制作一款基于机器学习的程序代码，因此需要安装 <code>Tensorflow-gpu</code>来进行跑代码，众所周知， <code>Tensorflow</code>环境以难配而出名，因此本文作为记录，浅踩坑</p><span id="more"></span><ul><li><a href="#Linux">Linux配置</a></li><li><a href="#Windows">Windows配置</a></li></ul><h2 id="所需"><a href="#所需" class="headerlink" title="所需"></a>所需</h2><ul><li>一台支持GPU算力的机器</li><li><code>anconda</code>环境</li></ul><p>请注意：在执行下面代码的前提为：你要确定你电脑的<code>CUDA</code>版本信息，由于 <code>tensorflow</code>版本管理相当苛责，因此版本不对可能会<strong>导致无法运行</strong>.因此在开始整个教程前,你需要找好自己的配置文件</p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="查找自己的CUDA版本"><a href="#查找自己的CUDA版本" class="headerlink" title="查找自己的CUDA版本"></a>查找自己的CUDA版本</h2><p>使用命令:<code>nvidia-smi</code></p><p>部分截图如下:</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524135128485.png" alt="image-20220524135128485"></p><p>如上对应的便是你的<code>CUDA</code>版本</p><h2 id="创建一个虚拟环境"><a href="#创建一个虚拟环境" class="headerlink" title="创建一个虚拟环境"></a>创建一个虚拟环境</h2><p><code>conda create --name 你的环境名称 python=3.7</code></p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524104957676.png" alt="image-20220524104957676"></p><p>输入<code>y</code>进行安装，出现如下提示代表安装完成，虚拟环境配置成功</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524105024850.png" alt="image-20220524105024850"></p><h2 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h2><p><code>conda activate 你的环境名称</code></p><p>当前面括号内显示的是你的环境名称，则代表进入成功</p><h2 id="安装-cudatoolkit"><a href="#安装-cudatoolkit" class="headerlink" title="安装 cudatoolkit"></a>安装 <code>cudatoolkit</code></h2><p>根据自己的GPU对应的<code>CUDA</code>进行配置，具体对应关系详见： <a href="https://tensorflow.google.cn/install/source_windows#gpu">对应关系</a></p><p>这里以我电脑为例，安装 <code>cudatoolkit=10.1</code>(这里图文版本对应不匹配,原因看<a href="#cudnn%E5%8C%85%E9%97%AE%E9%A2%98">其他-&gt;cudnn包问题</a>):</p><p><code>conda install cudatoolkit=10.1</code></p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524105959190.png" alt="image-20220524105959190"></p><p>出现以下信息表示安装完成</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524112427875.png" alt="image-20220524112427875"></p><h2 id="安装-cudnn"><a href="#安装-cudnn" class="headerlink" title="安装 cudnn"></a>安装 <code>cudnn</code></h2><p>也是要从官网上查询相关安装指南，具体对应关系详见： <a href="https://tensorflow.google.cn/install/source_windows#gpu">对应关系</a></p><p>这里以我电脑为例，安装 <code>cudnn=7.6</code></p><p><code>conda install cudnn=7.6</code></p><p>安装结果如下:</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524121940510.png" alt="image-20220524121940510"></p><h2 id="安装-Tensorflow-gpu-2-3"><a href="#安装-Tensorflow-gpu-2-3" class="headerlink" title="安装 Tensorflow-gpu=2.3"></a>安装 <code>Tensorflow-gpu=2.3</code></h2><p>输入命令:</p><p><code>pip install tensorflow-gpu==2.3.0</code></p><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>与Linux安装方式基本相同,这里不在进行多余赘述,仅加入在windows下如何判断自己的<code>CUDA</code>版本</p><h2 id="判断自己的CUDA版本"><a href="#判断自己的CUDA版本" class="headerlink" title="判断自己的CUDA版本"></a>判断自己的<code>CUDA</code>版本</h2><p>在桌面右键,打开 <code>NVIDIA控制面板</code>,点击左下角的 <code>系统信息</code></p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524111959441.png" alt="image-20220524111959441"></p><p>点击 <code>组件</code>然后看 <code>3D设置</code>中的 <code>NVCUDA64.DLL</code> 后面的 <code>产品名称</code>中<code>CUDA</code>版本便为你的版本信息,如下图所示,我的<code>CUDA</code>版本便是<code>11.1.70</code></p><p>寻找的时候对应的便是 <code>11.1</code>(其实个人实践可以向下兼容2333)</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524112056943.png" alt="image-20220524112056943"></p><p>剩余的配置过程与Linux一致,直接参考Linux便可</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Conda更换镜像-转载"><a href="#Conda更换镜像-转载" class="headerlink" title="Conda更换镜像|转载|"></a>Conda更换镜像|<a href="https://blog.csdn.net/qq_45688354/article/details/108014189">转载</a>|</h2><p>在国内访问相关国外网站使用原本的资源会显得很慢（尤其在学校实验室中），因此可以通过换源或者使用”科学”的方式进行访问，<strong>这里不对第二种方式进行讨论</strong>，仅讨论如何更换镜像源</p><blockquote><p>由于我使用的是科学方式,因此对于换源方式成功性不做评价</p></blockquote><ul><li><p>显示之前的镜像源</p><p><code>conda config --show</code></p></li><li><p>添加镜像源</p><p><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</code><br><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</code><br><code>conda config --set show_channel_urls yes</code></p></li><li><p>清除之前的缓存</p><p><code>conda clean -i</code></p></li><li><p>删除指定的镜像源</p><p><code>conda config --remove channels 你想移除的指定镜像路径</code></p></li><li><p>恢复默认镜像源</p><p><code>conda config --remove-key channels</code></p></li></ul><h2 id="cudnn包问题"><a href="#cudnn包问题" class="headerlink" title="cudnn包问题"></a>cudnn包问题</h2><p>由于在安装的过程中,发现报错</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524120302807.png" alt="image-20220524120302807"></p><p>后面查询相关知识了解到一个<a href="https://github.com/conda/conda/issues/8293">issue</a> ,因此推断可能是镜像源问题,所以更换成默认镜像源,然后发现更换了报错信息:</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524120404556.png" alt="image-20220524120404556"></p><p>根据相关指引,去官方库中进行搜索,发现:</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524120519754.png" alt="image-20220524120519754"></p><p>特喵的! <code>cudnn</code>包并没有 <code>8.0</code>版本,如果想自行配置<code>8.0</code>版本,时间开销可能过大,因此选择已有的<code>7.6</code>版本,与其匹配的是 <code>Tensorflow-2.3.0</code>版本,因此上面部分信息可能图文不符,<strong>以文字描述为主</strong>(主要是懒不想删照片重新截图2333)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p>排名不分先后</p></blockquote><ul><li><a href="https://tensorflow.google.cn/install?hl=zh-cn">Tensorflow官网安装教程</a></li><li><a href="https://blog.csdn.net/qq_45688354/article/details/108014189">Conda换源教程</a></li><li><a href="https://tensorflow.google.cn/install/source_windows?hl=zh-cn#gpu">Tensorflow版本对应关系</a></li><li><a href="https://www.anaconda.com/">Anconda官网</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于机器学习课程需要制作一款基于机器学习的程序代码，因此需要安装 &lt;code&gt;Tensorflow-gpu&lt;/code&gt;来进行跑代码，众所周知， &lt;code&gt;Tensorflow&lt;/code&gt;环境以难配而出名，因此本文作为记录，浅踩坑&lt;/p&gt;</summary>
    
    
    
    <category term="Study" scheme="https://zhycarge.github.io/OLD_BLOG/categories/Study/"/>
    
    
    <category term="Tensorflow" scheme="https://zhycarge.github.io/OLD_BLOG/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理笔记——第五章</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/05/20/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0(%E7%AC%AC%E4%BA%94%E7%AB%A0)/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/05/20/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0(%E7%AC%AC%E4%BA%94%E7%AB%A0)/</id>
    <published>2022-05-20T07:00:00.000Z</published>
    <updated>2022-05-20T08:52:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图像复原与重建"><a href="#图像复原与重建" class="headerlink" title="图像复原与重建"></a>图像复原与重建</h1><span id="more"></span><blockquote><p>请注意：文章中的[^123]标码，代表数字图像处理——冈萨雷斯版图书的指定页码部分</p></blockquote><h2 id="复原与重建相关关系"><a href="#复原与重建相关关系" class="headerlink" title="复原与重建相关关系"></a>复原与重建相关关系</h2><p>图像增强主要为主观处理，图像复原很大程度为客观处理</p><p>图像复原是利用退化现象的先验知识来复原已经退化的图像，因此主要是对退化建模并且应用逆过程来复原图像</p><h2 id="图像退化-复原的一个模型"><a href="#图像退化-复原的一个模型" class="headerlink" title="图像退化/复原的一个模型"></a>图像退化/复原的一个模型</h2><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220520160201551.png" alt="image-20220520160201551"></p><h2 id="常见的复原算法"><a href="#常见的复原算法" class="headerlink" title="常见的复原算法"></a>常见的复原算法</h2><h3 id="只存在噪声的复原——空间滤波"><a href="#只存在噪声的复原——空间滤波" class="headerlink" title="只存在噪声的复原——空间滤波"></a>只存在噪声的复原——空间滤波</h3><h4 id="均值滤波器"><a href="#均值滤波器" class="headerlink" title="均值滤波器"></a>均值滤波器</h4><h5 id="算术平均滤波器-227"><a href="#算术平均滤波器-227" class="headerlink" title="算术平均滤波器[^227]"></a>算术平均滤波器[^227]</h5><p>使用大小$m*n$的一个空间核来实现，核的所有系数都是 $1/mn$均值滤波平滑图像中的局部变化，会降低图像中的噪声，但会模糊图像</p><h5 id="几何均值滤波器-227"><a href="#几何均值滤波器-227" class="headerlink" title="几何均值滤波器[^227]"></a>几何均值滤波器[^227]</h5><p>几何均值滤波器实现的平滑可与算数平均滤波器相比，但损失的图像细节会更少</p><h5 id="谐波平均滤波器"><a href="#谐波平均滤波器" class="headerlink" title="谐波平均滤波器"></a>谐波平均滤波器</h5><p>其滤波器既能处理盐粒噪声，又能处理类似于高斯噪声的其他噪声，但是不能处理胡椒噪声</p><h5 id="反谐波平均滤波器-227"><a href="#反谐波平均滤波器-227" class="headerlink" title="反谐波平均滤波器[^227]"></a>反谐波平均滤波器[^227]</h5><p>适用于降低或消除椒盐噪声，$Q$为正值时可以消除胡椒噪声，$Q$为负值时，可以消除椒盐噪声，但是</p><p><strong>不可以同时消除以上两种噪声</strong></p><p>$Q=0$时，反谐波平均滤波器简化为算术平均滤波器</p><p>$Q=-1$时，简化为谐波平均滤波器</p><h3 id="统计排序滤波器"><a href="#统计排序滤波器" class="headerlink" title="统计排序滤波器"></a>统计排序滤波器</h3><p>统计排序滤波器为空间滤波器，基于滤波器所围邻域中的像素值的顺序，结果决定了滤波器的响应。</p><h4 id="中值滤波器-229"><a href="#中值滤波器-229" class="headerlink" title="中值滤波器[^229]"></a>中值滤波器[^229]</h4><p>使用预定义的像素邻域的灰度中值来代替像素的值</p><p>可以有效的降低某些随机噪声，并且模糊度要小得多，对于单极或双极冲激噪声，中值滤波器效果更好</p><h4 id="最大值滤波器和最小值滤波器-230"><a href="#最大值滤波器和最小值滤波器-230" class="headerlink" title="最大值滤波器和最小值滤波器[^230]"></a>最大值滤波器和最小值滤波器[^230]</h4><p>最常使用的统计排序滤波器，但不是唯一使用的滤波器。</p><p>最大值滤波器可以找到图像中的最亮点或者用于削弱与明亮区域相邻的暗色区域</p><p>最大值滤波器可以降低胡椒噪声；</p><p>最小值滤波器可以找到图像中最暗点，或者用于削弱与暗色区域相邻的明亮区域</p><p>可以降低椒盐噪声</p><h4 id="中点滤波器-230"><a href="#中点滤波器-230" class="headerlink" title="中点滤波器[^230]"></a>中点滤波器[^230]</h4><p>统计排序滤波器和平均滤波器的结合，最适合用于处理随机分布的噪声，如：高斯噪声、均匀噪声</p><h4 id="修正阿尔法均值滤波器-230"><a href="#修正阿尔法均值滤波器-230" class="headerlink" title="修正阿尔法均值滤波器[^230]"></a>修正阿尔法均值滤波器[^230]</h4><p>适合处理多种混合噪声，如高斯噪声和椒盐噪声</p><h3 id="自适应滤波器"><a href="#自适应滤波器" class="headerlink" title="自适应滤波器"></a>自适应滤波器</h3><p>自适应滤波器的性能要优于前面讨论的所有滤波器，但增大了其复杂度</p><h4 id="自适应局部降噪滤波器-233"><a href="#自适应局部降噪滤波器-233" class="headerlink" title="自适应局部降噪滤波器[^233]"></a>自适应局部降噪滤波器[^233]</h4><p>均值为计算平均值区域上的平均灰度</p><p>方差是该区域上的图像对比度</p><h4 id="自适应中值滤波器-234"><a href="#自适应中值滤波器-234" class="headerlink" title="自适应中值滤波器[^234]"></a>自适应中值滤波器[^234]</h4><p>若椒盐噪声的空间密度较低，则使用中值滤波器滤波效果性能更好。</p><p>自适应中值滤波器可以处理更大概率的噪声</p><p>优点：可以在保留图像细节的同时平滑非冲激噪声</p><h2 id="使用频率域滤波器降低周期噪声"><a href="#使用频率域滤波器降低周期噪声" class="headerlink" title="使用频率域滤波器降低周期噪声"></a>使用频率域滤波器降低周期噪声</h2><p>频率域技术可以有效分析并滤除周期噪声</p><h3 id="陷波滤波深入介绍-236"><a href="#陷波滤波深入介绍-236" class="headerlink" title="陷波滤波深入介绍[^236]"></a>陷波滤波深入介绍[^236]</h3><h3 id="最优陷波滤波-239"><a href="#最优陷波滤波-239" class="headerlink" title="最优陷波滤波[^239]"></a>最优陷波滤波[^239]</h3><h3 id="线性位置不变退化-243"><a href="#线性位置不变退化-243" class="headerlink" title="线性位置不变退化[^243]"></a>线性位置不变退化[^243]</h3><h2 id="估计退化函数"><a href="#估计退化函数" class="headerlink" title="估计退化函数"></a>估计退化函数</h2><p>估计图像复原中退化函数主要有三种：</p><ul><li>观察法</li><li>试验法</li><li>数学建模法</li></ul><h3 id="采取观察法估计退化函数-245"><a href="#采取观察法估计退化函数-245" class="headerlink" title="采取观察法估计退化函数[^245]"></a>采取观察法估计退化函数[^245]</h3><p>应用：复原一幅具有历史价值的老照片</p><h3 id="采取试验法估计退化函数-245"><a href="#采取试验法估计退化函数-245" class="headerlink" title="采取试验法估计退化函数[^245]"></a>采取试验法估计退化函数[^245]</h3><h3 id="采用建模法估计退化函数-245"><a href="#采用建模法估计退化函数-245" class="headerlink" title="采用建模法估计退化函数[^245]"></a>采用建模法估计退化函数[^245]</h3><h2 id="逆滤波"><a href="#逆滤波" class="headerlink" title="逆滤波"></a>逆滤波</h2><p>直接逆滤波的性能一般较差，一般改进之后进行运算</p><h2 id="最小均方误差（维纳）滤波"><a href="#最小均方误差（维纳）滤波" class="headerlink" title="最小均方误差（维纳）滤波"></a>最小均方误差（维纳）滤波</h2><p>此算法基础：将图像和噪声视为随机变量</p><h2 id="约束最小二乘方滤波-252"><a href="#约束最小二乘方滤波-252" class="headerlink" title="约束最小二乘方滤波[^252]"></a>约束最小二乘方滤波[^252]</h2><h2 id="几何均值滤波-255"><a href="#几何均值滤波-255" class="headerlink" title="几何均值滤波[^255]"></a>几何均值滤波[^255]</h2><h2 id="由投影重建图像"><a href="#由投影重建图像" class="headerlink" title="由投影重建图像"></a>由投影重建图像</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;图像复原与重建&quot;&gt;&lt;a href=&quot;#图像复原与重建&quot; class=&quot;headerlink&quot; title=&quot;图像复原与重建&quot;&gt;&lt;/a&gt;图像复原与重建&lt;/h1&gt;</summary>
    
    
    
    <category term="学校课程" scheme="https://zhycarge.github.io/OLD_BLOG/categories/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="笔记" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数字图像处理" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理笔记——第六章</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/05/19/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%89/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/05/19/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%89/</id>
    <published>2022-05-19T07:00:00.000Z</published>
    <updated>2022-05-19T08:00:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="彩色图像处理"><a href="#彩色图像处理" class="headerlink" title="彩色图像处理"></a>彩色图像处理</h1><span id="more"></span><h2 id="彩色模型"><a href="#彩色模型" class="headerlink" title="彩色模型"></a>彩色模型</h2><ul><li><p>目的、作用</p><p>使用某种标准来方便的规定颜色</p></li><li><p>本质规定</p><ul><li>坐标系</li><li>坐标系内子空间</li></ul></li><li><p>面向</p><ul><li><p>面向应用的</p><ul><li><p>HSI（色调、饱和度、亮度）</p><p>针对人们描述和解释颜色的方式</p></li></ul></li><li><p>面向硬件的</p><ul><li>RGB（红、绿、蓝）模型</li><li>CMY（青色、深红色、黄色）</li><li>CMYK（青色、深红色、黄色、黑色）</li></ul></li></ul></li></ul><h3 id="GRB色彩模型"><a href="#GRB色彩模型" class="headerlink" title="GRB色彩模型"></a>GRB色彩模型</h3><p>以红、绿、蓝三种光谱成分表示，根据笛卡尔坐标系建立</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519150532414.png" alt="image-20220519150532414"></p><p>其中，每个像素所用的比特数称为像素深度</p><p>术语全彩图像通常用于表达一幅24比特的RGB彩色图像</p><p>对于数字图像，立方体值域已被标定为图像中比特数表示的数字</p><p>若原色为8比特，则值域为[0,255]</p><h3 id="CMY与CMYK彩色模型"><a href="#CMY与CMYK彩色模型" class="headerlink" title="CMY与CMYK彩色模型"></a>CMY与CMYK彩色模型</h3><p>青色、深红色、黄色是二次元色，为颜料颜色。大多数在纸上淀积色彩的设备，都会要求进行RGB-&gt;CMY的转换，或直接输入CMY数据，转换方式如下：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519151131011.png" alt="image-20220519151131011"></p><p>式子中将所有的彩色值统一归化到区间[0,1]之间，并且RGB值可以用$1-CMY$值来获得</p><p>在实际过程中，CMY所对应的颜色并不是纯色的，组合颜色会产生模糊的棕色，因此引用黑色（用K来表示）</p><p>提出 CMYK彩色模型。其转换模型如下（CMK转换为CMYK）：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519151443907.png" alt="image-20220519151443907"></p><h3 id="HSI色彩模型"><a href="#HSI色彩模型" class="headerlink" title="HSI色彩模型"></a>HSI色彩模型</h3><p>上述彩色系统适合硬件实现，但并不能很好的描述人类实际解释的颜色，并且并不会认为彩色图像是由3副原色图像合成的单幅图像。</p><p>通常观察物体时，会用色调、饱和度、亮度来表述这个物体，因此HSI模型会分离彩色图像中亮度成分和所携带的色彩的信息，会更自然和直观的彩色描述来开放图像处理算法的有用工具。RGB对图像彩色生成是理想的，但对于颜色描述有许多局限性。下图为基于彩色三角形和圆形的HSI模型：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519151902509.png" alt="image-20220519151902509"></p><h4 id="RGB到HSI的彩色变换"><a href="#RGB到HSI的彩色变换" class="headerlink" title="RGB到HSI的彩色变换"></a>RGB到HSI的彩色变换</h4><p>公式内容，详见书P288</p><h2 id="假彩色图像处理"><a href="#假彩色图像处理" class="headerlink" title="假彩色图像处理"></a>假彩色图像处理</h2><p>假彩色图像处理指按照规定的准则对灰度值赋予颜色的处理.</p><ul><li><p>假彩色</p><ul><li><p>介绍</p><p>用于区分对单色图像赋予彩色的处理或对真彩色图像赋予彩色的处理</p></li><li><p>主要应用</p><p>可视化和解释单幅图像或一序列图像中的灰度事件</p></li></ul></li></ul><h3 id="灰度分层和彩色编码"><a href="#灰度分层和彩色编码" class="headerlink" title="灰度分层和彩色编码"></a>灰度分层和彩色编码</h3><p>灰度分层和彩色编码技术是假彩色图像处理最简单、最早期的例子。</p><p>分层方法是先平行于图像坐标平面放置一个平面，然后让每个平面”切割“相交的区域</p><p>下图显示用 $f(x,y)=I_i$处的一个平面将图像灰度函数切割为两部分的例子：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519152728656.png" alt="image-20220519152728656"></p><p>灰度级在该平面上的像素编码为一种颜色，灰度级在平面下的一种像素编码为另一种颜色。平面上的灰度级本身可以赋予两种颜色的任意一种，也可以赋予第三种颜色来突出这一级别的像素。</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519153049962.png" alt="image-20220519153049962"></p><h3 id="灰度到彩色的变换"><a href="#灰度到彩色的变换" class="headerlink" title="灰度到彩色的变换"></a>灰度到彩色的变换</h3><p>通过对输入像素的灰度执行三个独立的变换，然后将三个结果分别输入彩色显示器中的红色、绿色和蓝色通道，通过这种方法来生成一幅合成图像，图像颜色由变换函数的性质调控</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519153259571.png" alt="image-20220519153259571"></p><p>此处使用灰度级分段线性函数来产生颜色</p><h2 id="全彩色图像处理基础"><a href="#全彩色图像处理基础" class="headerlink" title="全彩色图像处理基础"></a>全彩色图像处理基础</h2><p>分类如下：</p><ul><li><p>分别处理每幅图像的灰度分量图像，然后将处理后端各幅分量图像合成一幅彩色图像</p></li><li><p>直接处理彩色像素</p><p>因为全彩色图像至少有三个分量，因此彩色像素是向量</p><p>在RGB系统中，每个彩色点都可以使用RGB坐标系从原点延伸到该点的一个向量来解释：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519153742654.png" alt="image-20220519153742654"></p></li></ul><p>一对空间坐标$(x,y)$确定了所有三幅分量图像中的同一个像素位置：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519153900803.png" alt="image-20220519153900803"></p><p>在式（6.37）描述了一个向量，其分量为空间变量x与y，由于可能会混淆，因此可以引入一个因子来让我们处理彩色图像，使用标准的灰度图像处理方法但单独处理彩色图像中的每幅分量图像，在处理完成之后需要使用直接处理彩色点元素的方法，当这些点有两个及以上的成分时，称其为<strong>体素</strong>；在指一幅以上的二维图像时，会交替使用术语向量、点和体素。</p><p>每幅分量图像处理等价于基于向量的处理，需满足：</p><ul><li>处理必须同时适用于向量和标量</li><li>对向量（体素）的每个分量的运算，必须独立于其他分量</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;彩色图像处理&quot;&gt;&lt;a href=&quot;#彩色图像处理&quot; class=&quot;headerlink&quot; title=&quot;彩色图像处理&quot;&gt;&lt;/a&gt;彩色图像处理&lt;/h1&gt;</summary>
    
    
    
    <category term="学校课程" scheme="https://zhycarge.github.io/OLD_BLOG/categories/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="笔记" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数字图像处理" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>近日小记（2022-5-19）</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/05/19/2022-5-19%E8%BF%91%E6%9C%9F%E5%B0%8F%E4%BA%8B/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/05/19/2022-5-19%E8%BF%91%E6%9C%9F%E5%B0%8F%E4%BA%8B/</id>
    <published>2022-05-19T02:00:00.000Z</published>
    <updated>2022-10-16T16:32:28.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="好像密码不正确呢？再试试吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="27414a7b98ceb497efc6255d099b4f1e3c2a369cc740bad63eea01846a5f0c77"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">输入正确密码查看正确文章</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/OLD_BLOG/lib/hbe.js"></script><link href="/OLD_BLOG/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">由于gitee部分技术原因，此文章进行加密处理，如需访问请留言给我</summary>
    
    
    
    <category term="日常" scheme="https://zhycarge.github.io/OLD_BLOG/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="近期" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E8%BF%91%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理笔记——第四章</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/05/18/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%89/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/05/18/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%89/</id>
    <published>2022-05-18T07:00:00.000Z</published>
    <updated>2022-05-19T08:17:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="频率域滤波"><a href="#频率域滤波" class="headerlink" title="频率域滤波"></a>频率域滤波</h1><span id="more"></span><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>复数的定义为：<br>$$<br>C = R+jI<br>$$<br>其共轭复数为：<br>$$<br>C^* = R-jI<br>$$</p><h3 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h3><p>具有周期T的连续变量t的函数f(t)可被描述为乘以适当系数的正弦和/或余弦和</p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517175553626.png" alt="image-20220517175553626"  /><p>其中，系数 $C_n$为：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517175855013.png" alt="image-20220517175855013"></p><h3 id="冲激函数及其取样（筛选）性质"><a href="#冲激函数及其取样（筛选）性质" class="headerlink" title="冲激函数及其取样（筛选）性质"></a>冲激函数及其取样（筛选）性质</h3><p>连续变量$t$在$t=0$处的单位冲激为$\delta (t)$，定义如下，且满足第二个式子。物理上把t看成时间，则一个冲激可理解为幅度无限、持续时间为0，拥有单位面积的尖峰信号</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517180131123.png" alt="image-20220517180131123"></p><p>其中，若将t解释为时间时，冲激就可以被是为幅度无限、持续时间为0，并且具有单位面积的尖峰信号。其具有关于积分的取样性质：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517202341057.png" alt="image-20220517202341057"></p><p>若假设， $f(t)$在 $t=0$处是连续的，位于任意一点的 $t_0$的冲激表示为 $ \delta(t-t_0)$,取样特性在冲激位置 $t_0$处得到函数值</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517202658701.png" alt="image-20220517202658701"></p><p>离散形式：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517204112997.png" alt="image-20220517204112997"></p><p>冲击串：无穷多个冲激 $\Delta T$的单位之和</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517204304188.png" alt="image-20220517204304188"></p><h3 id="连续单变量函数的傅里叶变换"><a href="#连续单变量函数的傅里叶变换" class="headerlink" title="连续单变量函数的傅里叶变换"></a>连续单变量函数的傅里叶变换</h3><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519144754319.png" alt="image-20220519144754319" style="zoom:130%;" /><p>其中，式（4.20）与式（4.21）共同构成傅里叶变换对，通常表示为：$f(t)\Leftrightarrow F(\mu)$</p><p>根据相关公式，我们可以将式（4.20）改写成为</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519145244866.png" alt="image-20220519145244866"></p><h1 id="有待补充"><a href="#有待补充" class="headerlink" title="有待补充"></a>有待补充</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;频率域滤波&quot;&gt;&lt;a href=&quot;#频率域滤波&quot; class=&quot;headerlink&quot; title=&quot;频率域滤波&quot;&gt;&lt;/a&gt;频率域滤波&lt;/h1&gt;</summary>
    
    
    
    <category term="学校课程" scheme="https://zhycarge.github.io/OLD_BLOG/categories/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="笔记" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数字图像处理" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理笔记——第三章</title>
    <link href="https://zhycarge.github.io/OLD_BLOG/2022/05/12/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%89/"/>
    <id>https://zhycarge.github.io/OLD_BLOG/2022/05/12/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%89/</id>
    <published>2022-05-12T12:00:00.000Z</published>
    <updated>2022-05-20T08:54:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-灰度变换与空间滤波"><a href="#第三章-灰度变换与空间滤波" class="headerlink" title="第三章 灰度变换与空间滤波"></a>第三章 灰度变换与空间滤波</h1><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="灰度变换和空间滤波基础"><a href="#灰度变换和空间滤波基础" class="headerlink" title="灰度变换和空间滤波基础"></a>灰度变换和空间滤波基础</h3><p>空间域处理基于表达式<br>$$<br>g(x,y)=T[f(x,y)]<br>$$<br>其中， $f(x,y)$是输入图像， $g(x,y)$是输出图像， $T$是在点 $(x,y)$的一个领域上定义针对 $f$的算子</p><p>灰度变换函数：<br>$$<br>s=T(r)<br>$$<br>简单起见，使用 $s$或者 $r$ 分别表示$g$和 $f$在任意点 $(x,y)$的灰度</p><h2 id="一些基本的灰度变换函数"><a href="#一些基本的灰度变换函数" class="headerlink" title="一些基本的灰度变换函数"></a>一些基本的灰度变换函数</h2><h3 id="图像反转"><a href="#图像反转" class="headerlink" title="图像反转"></a>图像反转</h3><p>灰度级在区间 $[0,L-1]$的反转图像形式为<br>$$<br>s = L-1-r<br>$$<br>使用这种方式反转图像的灰度级，会有一种类似于照片底片的结果。</p><p>可用于增强图像暗色区域的白色或者灰色细节，若暗色区域的尺寸很大这种增强效果会更好</p><h3 id="对数变换"><a href="#对数变换" class="headerlink" title="对数变换"></a>对数变换</h3><p>对数变换的通式为<br>$$<br>s = clog(1+r)<br>$$<br>c是一个常数，并且 $r\geq0 $</p><p>此变换会将输入中范围较窄的低灰度值映射为输出中范围较宽的灰度级，输入中的高灰度值则会被映射为输出中范围较窄的灰度级，使用此方法来扩展图像中的暗像素值。反对数变换的作用与此相反</p><h3 id="幂律-伽马-变换"><a href="#幂律-伽马-变换" class="headerlink" title="幂律(伽马)变换"></a>幂律(伽马)变换</h3><p>通过压缩或者扩展图像的灰度级来增强图像对比度</p><p>表达式为：<br>$$<br>s=cr^\gamma<br>$$<br>其中$c$ 和 $\gamma$ 均为正常数，若考虑到偏移情况，即输入为0的时候的一个可度量输出，有时公式也会为：$s=c(r+\epsilon)^\gamma$但偏移往往会是校准问题，因此可忽略不计</p><h3 id="分段线性变换函数"><a href="#分段线性变换函数" class="headerlink" title="分段线性变换函数"></a>分段线性变换函数</h3><p>与前面函数相比的优点为：其形式可以任意复杂；缺点是会要求用户输入很多参数。</p><ul><li><p>对比度拉伸</p><p>通过扩展图像的灰度级范围，使其覆盖记录介质或者显示设备的整个理想灰度范围</p></li><li><p>灰度级分层：突出图像中特定灰度范围的亮度</p><p>突出图像的特定灰度区间，有如下两种基本方法的变体：</p><ul><li>将感兴趣范围内所有的灰度值显示为一个值（如白色），其他灰度值显示另外一个值（如黑色），产生一幅二值图像</li><li>使期望的灰度范围变亮（或变暗），但保持图像的其他灰度级不变</li></ul></li><li><p>比特平面分层</p><p>像素值是由比特组成的整数。如在256级灰度图像中，图像值是由8比特组成的，其中平面1包含图像中所有像素的最低有效比特，平面8则包含所有像素最高有效比特。</p><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220503153448475.png" alt="image-20220503153448475"></p><p>将图像分解成各个比特平面对分析图像每个比特的相对重要性使有用的，可以确定量化图像所用比特的充分性。</p><p>突出特定比特。四个高阶比特平面包含视觉上重要的大多数数据，低阶比特平面贡献了更精细的灰度细节。原图像中任意一个像素的值可以由比特平面中对应的二进制像素值来重建，可以用于减少存储量</p></li></ul><h2 id="直方图处理"><a href="#直方图处理" class="headerlink" title="直方图处理"></a>直方图处理</h2><p>令 $r_k , k=0,1,2，……,L-1$表示一副 $L$级回复数字图像 $f(x,y)$的灰度。 $f$的非归一化直方图定义为<br>$$<br>h(r_k)=n_k \ \ \ \  k=0,1,2,……,L-1<br>$$<br>其中， $n_k$是 $f$中灰度为 $r_k$的像素的数量。类似的， $f$的归一化直方图定义为<br>$$<br>p(r_k) = \frac{h(r_k)}{MN} = \frac{n_k}{MN}<br>$$<br>其中， MN分别是图像的行和列。多数情况下处理的是归一化直方图，简称为直方图或者图像直方图</p><p>若像素占据整个灰度级范围并且均匀分布的图像，将具有高对比度的外观和多种灰色调。</p><h3 id="直方图基本灰度特征"><a href="#直方图基本灰度特征" class="headerlink" title="直方图基本灰度特征"></a>直方图基本灰度特征</h3><p>Q：直方图相同的图像，是否为同一个图像？</p><p>A：是同一个图像</p><h4 id="四个直方图灰度级特征"><a href="#四个直方图灰度级特征" class="headerlink" title="四个直方图灰度级特征"></a>四个直方图灰度级特征</h4><ul><li><p>暗图像</p><p>大多数直方图容器集中在灰度级比较低的区域</p></li><li><p>亮图像</p><p>大多数直方图容器集中在灰度级的高端</p></li><li><p>低对比度图像</p><p>直方图容器基本位于灰度级的中间，对于单色图像来讲，意味着暗淡的灰色外观</p></li><li><p>高对比度的图像</p><p>直方图容器覆盖了较宽的灰度级，并且像素分布较为均匀，容器高度基本相同</p></li></ul><p>图片如下：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519174659940.png" alt="image-20220519174659940"></p><p>直觉上，我们可以得到如下内容：</p><p><strong>像素占据整个灰度级范围并且均匀分布的图像，将具有高对比度的外观和多种灰色调</strong></p><h3 id="累计直方图CDF"><a href="#累计直方图CDF" class="headerlink" title="累计直方图CDF"></a>累计直方图CDF</h3><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519174414505.png" alt="image-20220519174414505"></p><h3 id="直方图均衡化【相关知识点：书P87】"><a href="#直方图均衡化【相关知识点：书P87】" class="headerlink" title="直方图均衡化【相关知识点：书P87】"></a>直方图均衡化【相关知识点：书P87】</h3><p><del>假设灰度值最初是连续的，令变量 $r$表示待处理的图像灰度。 $r \in [0,L-1]$ ， $r=0$表示黑色， $r=L-1$表示白色。对于这些满足条件的 r，重点关注如下形式的灰度映射：</del><br>$$<br>s = T(r), \ \ \ 0\leq r \leq L-1<br>$$</p><h4 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h4><p> 一幅大小为(64*64)的灰度图像，共有8个灰度级，其灰度级分布见下表，现要求对其进行均衡化处理</p><table><thead><tr><th><strong>序号</strong></th><th><strong>运算</strong></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>列出原始灰度级f</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>2</td><td>列出原始直方图</td><td>0.12</td><td>0.01</td><td>0.14</td><td>0.09</td><td>0.44</td><td>0.09</td><td>0.08</td><td>0.03</td></tr><tr><td>3</td><td>累计直方图</td><td>0.12</td><td>0.13</td><td>0.27</td><td>0.36</td><td>0.8</td><td>0.89</td><td>0.97</td><td>1</td></tr><tr><td>4</td><td>累计直方图*7</td><td>0.84</td><td>0.91</td><td>1.89</td><td>2.52</td><td>5.6</td><td>6.23</td><td>6.79</td><td>7</td></tr><tr><td>4</td><td>四舍五入取整g</td><td>1</td><td>1</td><td>2</td><td>3</td><td>6</td><td>6</td><td>7</td><td>7</td></tr><tr><td>5</td><td>确定映射关系f-&gt;g</td><td>0-&gt;1</td><td>1-&gt;1</td><td>2-&gt;2</td><td>3-&gt;3</td><td>4-&gt;6</td><td>5-&gt;6</td><td>6-&gt;7</td><td>7-&gt;7</td></tr><tr><td>6</td><td>新直方图$n_k/n$</td><td>0</td><td>0.13</td><td>0.14</td><td>0.09</td><td>0</td><td>0</td><td>0.53</td><td>0.11</td></tr></tbody></table><p><strong>解题思路：</strong></p><ul><li><p><code>累计直方图</code>：其为原始直方图相加得到：</p><table><thead><tr><th>列出原始直方图</th><th>0.12</th><th>0.01</th><th>0.14</th><th>0.09</th><th>0.44</th><th>0.09</th><th>0.08</th><th>0.03</th></tr></thead><tbody><tr><td>累计直方图</td><td>0.12</td><td>0.12+0.01</td><td>0.12+0.01+0.14</td><td>0.12+0.0.1+0.14+0.09</td><td>……</td><td>……</td><td>……</td><td>1</td></tr></tbody></table></li><li><p><code>累计直方图*7</code>：其为累计直方图值*7所得：</p><table><thead><tr><th>累计直方图</th><th>0.12</th><th>0.13</th><th>0.27</th><th>0.36</th><th>0.8</th><th>0.89</th><th>0.97</th><th>1</th></tr></thead><tbody><tr><td>累计直方图*7</td><td>0.12*7</td><td>0.13*7</td><td>……</td><td>……</td><td>……</td><td>……</td><td>……</td><td>7</td></tr></tbody></table></li><li><p><code>四舍五入取整g </code>：其为对<code>累计直方图*7</code>进行取整可得：</p><table><thead><tr><th>累计直方图*7</th><th>0.84</th><th>0.91</th><th>1.89</th><th>2.52</th><th>5.6</th><th>6.23</th><th>6.79</th><th>7</th></tr></thead><tbody><tr><td>四舍五入取整g</td><td>1</td><td>1</td><td>2</td><td>3</td><td>6</td><td>6</td><td>7</td><td>7</td></tr></tbody></table></li><li><p><code>确定映射关系f-&gt;g  </code>：则是对获得的g与最开始的 <code>列出原始灰度级f  </code>进行比较，看其与哪一个值进行对应：</p><table><thead><tr><th>列出原始灰度级f</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>四舍五入取整g</td><td>1</td><td>1</td><td>2</td><td>3</td><td>6</td><td>6</td><td>7</td><td>7</td></tr><tr><td>确定映射关系f-&gt;g</td><td>0-&gt;1</td><td>1-&gt;1</td><td>2-&gt;2</td><td>3-&gt;3</td><td>4-&gt;6</td><td>5-&gt;6</td><td>6-&gt;7</td><td>7-&gt;7</td></tr></tbody></table></li><li><p>新直方图$n_k/n$：便是将所对应的映射关系进行对应的原始直方图数据进行重合累加：</p><table><thead><tr><th>列出原始灰度级f</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>列出原始直方图</td><td>0.12</td><td>0.01</td><td>0.14</td><td>0.09</td><td>0.44</td><td>0.09</td><td>0.08</td><td>0.03</td></tr><tr><td>确定映射关系f-&gt;g</td><td>0-&gt;1</td><td>1-&gt;1</td><td>2-&gt;2</td><td>3-&gt;3</td><td>4-&gt;6</td><td>5-&gt;6</td><td>6-&gt;7</td><td>7-&gt;7</td></tr><tr><td>新直方图$n_k/n$</td><td>0</td><td>0.12+0.01</td><td>0.14</td><td>0.09</td><td>0</td><td>0</td><td>0.44+0.09</td><td>0.08+0.03</td></tr></tbody></table></li></ul><p>至此题目做完。</p><h3 id="直方图匹配化-规定化-【相关知识点书P92】"><a href="#直方图匹配化-规定化-【相关知识点书P92】" class="headerlink" title="直方图匹配化(规定化)【相关知识点书P92】"></a>直方图匹配化(规定化)【相关知识点书P92】</h3><h4 id="题目1-1"><a href="#题目1-1" class="headerlink" title="题目1"></a>题目1</h4><p>一幅大小为(64*64)的灰度图像，共有8个灰度级，其灰度级分布见下表，现要求对其按照给定的图像r的直方图进行匹配化处理</p><table><thead><tr><th><strong>序号</strong></th><th><strong>运算</strong></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>列出原始灰度级f</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>2</td><td>列出原始直方图PDF(f)</td><td>0.12</td><td>0.01</td><td>0.14</td><td>0.09</td><td>0.44</td><td>0.09</td><td>0.08</td><td>0.03</td></tr><tr><td>3</td><td>原始图像的累计直方图CDF(f)</td><td>0.12</td><td>0.13</td><td>0.27</td><td>0.36</td><td>0.8</td><td>0.89</td><td>0.97</td><td>1</td></tr><tr><td>4</td><td>原始图像的累计直方图*7</td><td>0.84</td><td>0.91</td><td>1.89</td><td>2.52</td><td>5.6</td><td>6.23</td><td>6.79</td><td>7</td></tr><tr><td>5</td><td>原始图像的累计直方图四舍五入取整g</td><td>1</td><td>1</td><td>2</td><td>3</td><td>6</td><td>6</td><td>7</td><td>7</td></tr><tr><td>6</td><td>参考直方图PDF(r)</td><td>0</td><td>0</td><td>0</td><td>0.15</td><td>0.2</td><td>0.45</td><td>0.2</td><td>0</td></tr><tr><td>7</td><td>参考直方图CDF(r)</td><td>0</td><td>0</td><td>0</td><td>0.15</td><td>0.35</td><td>0.8</td><td>1</td><td>1</td></tr><tr><td>8</td><td>参考直方图CDF(r)*7</td><td>0</td><td>0</td><td>0</td><td>1.05</td><td>2.45</td><td>5.6</td><td>7</td><td>7</td></tr><tr><td>9</td><td>参考直方图CDF(r)*7，四舍五入取整</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>6</td><td>7</td><td>7</td></tr><tr><td>10</td><td>完成规定化需要的映射</td><td>0-3</td><td>1-3</td><td>2-4</td><td>3-4</td><td>4-5</td><td>5-5</td><td>6-6</td><td>7-6</td></tr><tr><td>11</td><td>新直方图</td><td>0</td><td>0</td><td>0</td><td>0.13</td><td>0.23</td><td>0.53</td><td>0.11</td><td>0</td></tr></tbody></table><p><strong>解题思路：</strong></p><p>序号1-9与上文基本一样，因此不在赘述；</p><ul><li><p><code>完成规定化需要的映射</code>  ：将 <code>原始图像的累计直方图四舍五入取整g  </code>与 <code>参考直方图CDF(r)*7，四舍五入取整 </code>进行对比，如果不存在一一对应关系则就近划分，将后续比对的值与 <code>列出原始灰度级f</code>进行对应，即：</p><table><thead><tr><th>列出原始灰度级f</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>原始图像的累计直方图四舍五入取整g</td><td>1</td><td>1</td><td>2</td><td>3</td><td>6</td><td>6</td><td>7</td><td>7</td></tr><tr><td>参考直方图CDF(r)*7，四舍五入取整</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td>6</td><td>7</td><td>7</td></tr><tr><td>完成规定化需要的映射</td><td>0-3</td><td>1-3</td><td>2-4</td><td>3-4</td><td>4-5</td><td>5-5</td><td>6-6</td><td>7-6</td></tr></tbody></table></li></ul><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220503162748957.png" alt="image-20220503162748957"></p><p>后续操作与上文一致，不在进行过多赘述。</p><h2 id="空间滤波基础"><a href="#空间滤波基础" class="headerlink" title="空间滤波基础"></a>空间滤波基础</h2><p>滤波：通过、修改或者抑制图像的规定频率分量。例如通过低频的滤波器为低通滤波器（模糊图像来平滑图像），可以直接对图像本身进行类似平滑处理。使用空间滤波器可以直接对图像本身进行类似的平滑处理。</p><p>空间滤波将每个像素值替换该像素何其邻域的函数值来修改图像。若是线性的，则为线性空间滤波器，否则为非线性滤波器</p><h3 id="线性空间滤波原理"><a href="#线性空间滤波原理" class="headerlink" title="线性空间滤波原理"></a>线性空间滤波原理</h3><p>线性空间滤波器在图像 $f$和滤波器核 $w$之间执行乘积之和运算，其中核是一个阵列，其大小代表了需要运算的邻域大小，其系数决定着该滤波器的性质。</p><p>下图是以 $3*3$核进行线性空间滤波的原理：</p><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/20191023162000652.png" alt="图片"></p><p>一般来讲，大小为 $m<em>n$的核对应大小为 $M</em>N$的图像的线性空间滤波器可以表示为：<br>$$<br>g(x,y) = \sum_{s=-a}^a \sum_{t=-b}^b w(s,t)f(x+s,y+t)<br>$$</p><h3 id="空间相关与卷积"><a href="#空间相关与卷积" class="headerlink" title="空间相关与卷积"></a>空间相关与卷积</h3><ul><li><p>相关</p><p>滤波器模板移过图像并计算每个位置的乘积之和</p></li><li><p>单位离散冲激</p><p>包含一个 <code>1</code>而其余项都是 <code>0</code>的函数</p><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517092647615.png" alt="image-20220517092647615"></p></li><li><p>卷积</p><p>预先将滤波器旋转180°，执行与相关相同的滑动乘积求和操作</p><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517092746134.png" alt="image-20220517092746134"></p></li></ul><blockquote><p>下面的内容直接给出公式，详情解释在第四版教材的P104-P105</p></blockquote><ul><li><p>冲激</p><p>坐标 $(x_0,y_0)$处的离散冲激强度（振幅）A 定义为：<br>$$<br>\delta(x-x_0,y-y_0)=\begin{cases}A,x_0=x 和 y_0 =y\0,其他\end{cases}<br>$$</p></li><li><p>卷积相关</p></li><li><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517094437043.png" alt="image-20220517094437043"></p></li><li><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517094606855.png" alt="image-20220517094606855"></p></li></ul><h3 id="空间域滤波和频率域滤波的一些重要比较"><a href="#空间域滤波和频率域滤波的一些重要比较" class="headerlink" title="空间域滤波和频率域滤波的一些重要比较"></a>空间域滤波和频率域滤波的一些重要比较</h3><ul><li>卷积是空间域滤波的基础，它等效于频率域中的乘法，反之亦然</li><li>空间域中振幅为A的冲激，是频率域中值为A的一个常数，反之亦然</li></ul><h3 id="如何构建空间滤波器核"><a href="#如何构建空间滤波器核" class="headerlink" title="如何构建空间滤波器核"></a>如何构建空间滤波器核</h3><p>有三种方法可以对其进行构建</p><ul><li><p>根据数学性质</p><p>计算邻域平均值滤波器会模糊图像，计算平均值会类似于积分；计算图像局部导数的滤波器会锐化图像</p></li><li><p>对形状具有所需性质的二维空间函数进行取样</p><p>使用高斯函数样本可以构建加权平均滤波器</p></li><li><p>设计具有规定频率响应的空间滤波器</p><p>数字滤波器设计范畴</p></li></ul><h2 id="平滑（低通空间滤波器）"><a href="#平滑（低通空间滤波器）" class="headerlink" title="平滑（低通空间滤波器）"></a>平滑（低通空间滤波器）</h2><p>用于降低灰度的极具过渡，由于随机噪声通常由灰度的极具过渡组成，因此其最明显的一个应用便是降噪。</p><ul><li>应用<ul><li>减少图像之间的无关细节</li><li>平滑因灰度级数量级不足导致的伪轮廓</li></ul></li></ul><h3 id="盒式滤波器"><a href="#盒式滤波器" class="headerlink" title="盒式滤波器"></a>盒式滤波器</h3><p>最简单的可分离低通滤波器核是盒式核，其系数通常相同（通常为1）下图为一个大小为<code>3*3</code>的盒式滤波器</p><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517102327225.png" alt="image-20220517102327225"></p><p>一般来讲，其前面有一个归1化的系数，其值为1除以系数值之和（当所有系数为1时，值为 $1/mn$），有两个目的：</p><ul><li>一个恒定灰度区域的灰度平均值将等于滤波后的图像灰度值</li><li>采用这种方式归一化之后，可防止在滤波过程中引入偏差</li></ul><h3 id="低通高斯滤波器核"><a href="#低通高斯滤波器核" class="headerlink" title="低通高斯滤波器核"></a>低通高斯滤波器核</h3><p>有待添加</p><h3 id="统计排序（非线性）滤波器"><a href="#统计排序（非线性）滤波器" class="headerlink" title="统计排序（非线性）滤波器"></a>统计排序（非线性）滤波器</h3><p>以滤波器包围的图像区域中所包含的像素的排序为基础，使用统计排序结果决定的值代替中心像素的值</p><p>中值滤波器，将像素邻域内灰度的中值代替该像素的值，比相同尺寸的线性平滑滤波器的模糊程度低，对处理脉冲噪声（椒盐噪声）非常有效。主要功能是使拥有不同灰度的点看起来更接近其相邻点，用于去除相对于其邻域像素更亮或更暗且其区域小于 $m^2/2$（滤波器区域的一半）的孤立像素族</p><p>其为目前数字图像处理最有用的统计排序滤波器</p><h3 id="锐化（高通）空间滤波器"><a href="#锐化（高通）空间滤波器" class="headerlink" title="锐化（高通）空间滤波器"></a>锐化（高通）空间滤波器</h3><p>锐化作用时突出灰度中的过渡，</p><p>平滑通常为低通滤波，锐化通常为高通滤波</p><p>作用：</p><ul><li>突出灰度的过渡部分，可由空间微分实现</li><li>微分算子的响应程度与图像在用算子操作这一点的突变成正比</li><li>图像微分增强边缘和其他突变（如噪声），削弱灰度变换缓慢的区域</li></ul><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/2019102416022050.png" alt="2019102416022050"></p><h3 id="使用二阶微分进行图像锐化——拉普拉斯"><a href="#使用二阶微分进行图像锐化——拉普拉斯" class="headerlink" title="使用二阶微分进行图像锐化——拉普拉斯"></a>使用二阶微分进行图像锐化——拉普拉斯</h3><p>定义一个二阶微分的离散公式，并基于此构造一个基于该公式的滤波器模板</p><ul><li><p>最简单的各项同性微分算子是线性的</p></li><li><p>二维图像函数 $f(x,y)$的拉普拉斯算子定义：</p><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517110732982.png" alt="image-20220517110732982"></p></li></ul><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517110748694.png" alt="image-20220517110748694"></p><p>因此，其对应的滤波模板为：</p><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517110757873.png" alt="image-20220517110757873"></p><ul><li><p>使用拉普拉斯算子对图像增强的基本方法</p><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517114147549.png" alt="image-20220517114147549"></p></li></ul><p>强调图像中灰度的突变，不强调灰度级缓慢变换的区域</p><p>由于在拉普拉斯图像中既有正值，又有负值，并且所有负值在显示时都修剪成0，所以图像大多都是黑色的</p><p>一个典型的标定拉普拉斯图像的方法是对其最小值加一个新的0代替最小值，然后将结果标定到整个灰度范围$[0-L-1]$中</p><h3 id="钝化掩蔽和高提升滤波"><a href="#钝化掩蔽和高提升滤波" class="headerlink" title="钝化掩蔽和高提升滤波"></a>钝化掩蔽和高提升滤波</h3><p>从原图像中减去一幅非锐化（平滑过的）版本</p><p>步骤如下：</p><ol><li>模糊原图像</li><li>从原图像中减去模糊图像（产生的差值图像称为模板）</li><li>将模板加到原图像上</li></ol><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517114643764.png" alt="image-20220517114643764"></p><p>如上图所示，式中包含一个权值$K，k\geq 0$</p><ul><li>当$k=1$时，为钝化掩蔽</li><li>当 $k&gt;1$时，这个过程为高提升滤波</li><li>若选择 $k&lt;1$时可以减少钝化模板的贡献</li></ul><p>钝化掩蔽原理如下图所示，其：</p><ul><li>强调了锐化后信号中出现灰度斜率变换的点</li><li>如果原图像有任何零值，或如果选择的k值大到足以使模板峰值大于原信号中的最小值时，最终的结果可能会存在负灰度。</li><li>负值将导致边缘周围有暗的晕轮。如果k足够大，将产生不好的结果。</li></ul><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/20191024152917362.png" alt="20191024152917362" style="zoom:67%;" /><h3 id="使用一阶导数锐化图像——梯度"><a href="#使用一阶导数锐化图像——梯度" class="headerlink" title="使用一阶导数锐化图像——梯度"></a>使用一阶导数锐化图像——梯度</h3><p>图像 $f$在 $(x,y)$中的梯度被定义为二维列向量，其重要几何性质为指向了 $f$最大变换率的方向</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517172237793.png" alt="image-20220517172237793"></p><p>其中，</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517172549059.png" alt="image-20220517172549059"></p><p>以下的两个3*3的算子为 <code>slobe算子</code>（如下图），其中心系数为2是通过突出中心点来进行平滑处理，其所有核系数均为0，表明其灰度恒定区域的响应为0，因此可用于边缘增强</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517173334056.png" alt="image-20220517173334056"></p><h2 id="低通、高通、带阻和带通滤波器"><a href="#低通、高通、带阻和带通滤波器" class="headerlink" title="低通、高通、带阻和带通滤波器"></a>低通、高通、带阻和带通滤波器</h2><p>其传递函数如下图所示：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517173824668.png" alt="image-20220517173824668"></p><p>其所对应的相关空间核如下图所示：</p><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517174039177.png" alt="image-20220517174039177"></p><h2 id="组合使用空间增强方法"><a href="#组合使用空间增强方法" class="headerlink" title="组合使用空间增强方法"></a>组合使用空间增强方法</h2><p>将多种图像增强方法结合起来，完成图像增强任务</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第三章-灰度变换与空间滤波&quot;&gt;&lt;a href=&quot;#第三章-灰度变换与空间滤波&quot; class=&quot;headerlink&quot; title=&quot;第三章 灰度变换与空间滤波&quot;&gt;&lt;/a&gt;第三章 灰度变换与空间滤波&lt;/h1&gt;</summary>
    
    
    
    <category term="学校课程" scheme="https://zhycarge.github.io/OLD_BLOG/categories/%E5%AD%A6%E6%A0%A1%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="笔记" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数字图像处理" scheme="https://zhycarge.github.io/OLD_BLOG/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
