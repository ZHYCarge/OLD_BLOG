<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 后台运行</title>
    <url>/OLD_BLOG/2021/07/14/Hexo-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于需要hexo-damin支持编写博客，所以需要将hexo服务进行一直开启，但是由于ssh有相关连接限制，又不想修改ssh配置文件，所以出此博客</p>
<span id="more"></span>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="安装pm2模块"><a href="#安装pm2模块" class="headerlink" title="安装pm2模块"></a>安装pm2模块</h2><h3 id="什么是pm2模块"><a href="#什么是pm2模块" class="headerlink" title="什么是pm2模块"></a>什么是pm2模块</h3><p>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。 下面就对PM2进行入门性的介绍，基本涵盖了PM2的常用的功能和配置。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>输入指令<br><code> npm  install -g pm2</code>来进行安装</p>
<h2 id="在博客根目录下创建run-js文件"><a href="#在博客根目录下创建run-js文件" class="headerlink" title="在博客根目录下创建run.js文件"></a>在博客根目录下创建<code>run.js</code>文件</h2><p>在博客根目录下创建一个<code>run.js</code>的文件，并在里面输入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//将hexo保持后台运行</span><br><span class="line">const &#123; <span class="built_in">exec</span> &#125; = require(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;hexo server&#x27;</span>,(error, stdout, stderr) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                console.log(<span class="string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)</span><br><span class="line">                <span class="built_in">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        console.log(<span class="string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);</span><br><span class="line">        console.log(<span class="string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="之后在根目录下运行"><a href="#之后在根目录下运行" class="headerlink" title="之后在根目录下运行"></a>之后在根目录下运行</h2><p>输入：<code>pm2 start run.js </code></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="如何关停pm2"><a href="#如何关停pm2" class="headerlink" title="如何关停pm2"></a>如何关停pm2</h2><p>输入<code>pm2 stop all</code>来关停所有的pm2运行项目</p>
<h2 id="pm2相关命令汇总"><a href="#pm2相关命令汇总" class="headerlink" title="pm2相关命令汇总"></a>pm2相关命令汇总</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">pm2 <span class="literal">start</span> app.js <span class="comment"># 启动app.js应用程序</span></span><br><span class="line"> pm2 <span class="literal">start</span> app.js -i <span class="number">4</span> <span class="comment"># cluster mode 模式启动4个app.js的应用实例</span></span><br><span class="line"><span class="comment"># 4个应用程序会自动进行负载均衡</span></span><br><span class="line"> pm2 <span class="literal">start</span> app.js --<span class="attr">name=</span><span class="string">&quot;api&quot;</span> <span class="comment"># 启动应用程序并命名为 &quot;api&quot;</span></span><br><span class="line"> pm2 <span class="literal">start</span> app.js --watch <span class="comment"># 当文件变化时自动重启应用</span></span><br><span class="line"> pm2 <span class="literal">start</span> script.sh <span class="comment"># 启动 bash 脚本</span></span><br><span class="line"></span><br><span class="line"> pm2 list <span class="comment"># 列表 PM2 启动的所有的应用程序</span></span><br><span class="line"> pm2 monit <span class="comment"># 显示每个应用程序的CPU和内存占用情况</span></span><br><span class="line"> pm2 show [app-name] <span class="comment"># 显示应用程序的所有信息</span></span><br><span class="line"></span><br><span class="line"> pm2 logs <span class="comment"># 显示所有应用程序的日志</span></span><br><span class="line"> pm2 logs [app-name] <span class="comment"># 显示指定应用程序的日志</span></span><br><span class="line">pm2 flush</span><br><span class="line"></span><br><span class="line"> pm2 <span class="literal">stop</span> all <span class="comment"># 停止所有的应用程序</span></span><br><span class="line"> pm2 <span class="literal">stop</span> <span class="number">0</span> <span class="comment"># 停止 id为 0的指定应用程序</span></span><br><span class="line"> pm2 restart all <span class="comment"># 重启所有应用</span></span><br><span class="line"> pm2 reload all <span class="comment"># 重启 cluster mode下的所有应用</span></span><br><span class="line"> pm2 gracefulReload all <span class="comment"># Graceful reload all apps in cluster mode</span></span><br><span class="line"> pm2 delete all <span class="comment"># 关闭并删除所有应用</span></span><br><span class="line">pm2 delete <span class="number">0</span> <span class="comment"># 删除指定应用 id 0</span></span><br><span class="line"> pm2 scale api <span class="number">10</span> <span class="comment"># 把名字叫api的应用扩展到10个实例</span></span><br><span class="line"> pm2 reset [app-name] <span class="comment"># 重置重启数量</span></span><br><span class="line"></span><br><span class="line"> pm2 startup <span class="comment"># 创建开机自启动命令</span></span><br><span class="line"> pm2 save <span class="comment"># 保存当前应用列表</span></span><br><span class="line"> pm2 resurrect <span class="comment"># 重新加载保存的应用列表</span></span><br><span class="line"> pm2 update <span class="comment"># Save processes, kill PM2 and restore processes</span></span><br><span class="line"> pm2 generate <span class="comment"># Generate a sample json configuration file</span></span><br><span class="line">pm2 <span class="literal">start</span> app.js --<span class="keyword">node</span><span class="title">-args</span>=<span class="string">&quot;--max-old-space-size=1024&quot;</span></span><br><span class="line"></span><br><span class="line">作者：冰冰大象</span><br><span class="line">链接：https://www.jianshu.com/p/<span class="number">6</span>b3b506f7d0a</span><br><span class="line">来源：简书</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下如何挂载磁盘[Arch系统]</title>
    <url>/OLD_BLOG/2021/07/12/Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98-Arch%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>嫌弃开机后要自己手动挂载，不是懒人的亚子，因此。。。<br><strong>请注意：此教程会对电脑系统配置文件进行修改，如果操作时出现问题，可能会导致电脑无法开启，请认真观看</strong></p>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h2><p>首先，我们应当查询一下自己的挂载点，或者是自己设置一个挂载信息，为了方便，我会在配置前，手动将磁盘进行挂载，方便后面获取信息</p>
<h2 id="查询自己的盘符信息"><a href="#查询自己的盘符信息" class="headerlink" title="查询自己的盘符信息"></a>查询自己的盘符信息</h2><p>需要挂载硬盘，那么我们应当首先知道，硬盘的一些信息<br>因此我们需要输入<code>lsblk -o +UUID,fstype</code>命令，来查询一下我们的硬盘信息<br><img src="https://img-blog.csdnimg.cn/20210702235004557.png" alt="122"><br>以上是显示的信息，当然不全，后面资料涉及电脑隐私，不方便展示<br>我们需要知道磁盘的UUID，然后磁盘的挂载位置（MOUNTPOINTS）然后还有磁盘的类别（FSTYPE）</p>
<h2 id="更改磁盘挂载信息"><a href="#更改磁盘挂载信息" class="headerlink" title="更改磁盘挂载信息"></a>更改磁盘挂载信息</h2><p>知道以上信息之后，我们需要修改相关配置文件，之后我们在终端中输入<code>sudo vim /etc/fstab</code>来进行修改电脑配置文件<br><img src="https://img-blog.csdnimg.cn/20210702235635108.png" alt="1221"><br>然后我们会获得下述信息<br>我们需要在下方输入如下内容：<br><img src="https://img-blog.csdnimg.cn/20210702235818325.png" alt="1212"><br>按照上面查找的内容，输入信息（空格随意，最好要有区分度）<br>UUID为上面查询的内容，挂载位置为上文查询的MOUNTPOINTS，磁盘类型是上文的FSTYPE，相关选项一般填写defaults（默认），后面那个一般填写0  2<br>最后检查一下你的填写信息，就可以保存退出，之后重启电脑试验了</p>
<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>当你不确定你填写信息是否正确的时候，可以将defaults修改成<code>nofail,x-systemd.device-timeout=1ms</code>这样的话，当系统在1ms内无法挂载你的磁盘的时候，就会放弃本次挂载，继续启动，但是要是重要的系统盘为进行挂载的话，也会出现问题</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>请注意：本次教程只针对对于系统可以成功进入，相关盘符可以直接挂载的人使用的，如果是系统盘，则需要根据官方文档来进行操作</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>Arduino安装教程</title>
    <url>/OLD_BLOG/2021/07/14/esp8266%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录一下自己安装Arduino的心路历程以及相关过程</p>
<span id="more"></span>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="什么是Arduino"><a href="#什么是Arduino" class="headerlink" title="什么是Arduino"></a>什么是Arduino</h2><blockquote>
<p>Arduino是一款便捷灵活、方便上手的开源电子原型平台。包含硬件（各种型号的Arduino板）和软件（IDE）。Arduino能通过各种各样的传感器来感知环境，通过控制灯光、马达和其他的装置来反馈、影响环境。它有着高度分装，方便调用的代码，可以和各类传感器轻松互动，实现我们的创客梦想！<br>知乎  </p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于此软件由国外开发者所开发，因此软件的安装包也在国外地区，不过国内团队已经提供了一个比较好的安装平台为大家进行选择<br><a href="http://www.taichi-maker.com/homepage/download/#software-download">点我</a><br>通过这个方式，能够很好的下载IDE</p>
<h2 id="配置esp8266的环境"><a href="#配置esp8266的环境" class="headerlink" title="配置esp8266的环境"></a>配置esp8266的环境</h2><p>由于编写是为了编写esp8266，因此我们需要配置它的环境<br>点击<kbd>文件</kbd>—&gt;<kbd>首选项</kbd>，在后面<kbd>附加开发板管理器网址</kbd>处输入以下内容：<br><code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code> 或<br><code>http://wechat.doit.am/package_esp8266com_index.json</code></p>
<p><img src="/images/pasted-8.png" alt="upload successful"></p>
<p><img src="/images/pasted-9.png" alt="upload successful"></p>
<p><img src="/images/pasted-10.png" alt="upload successful"></p>
<blockquote>
<p>博主小提醒：<br>由于配置时也是参考了别人的博客，因此测试了一下这两个，发现：<br>第一个需要翻墙进行访问（但是是官方的，会比国内的要很多,虽然会很慢，但是推荐）<br>第二个好像资源已经被删除或者被移动到了其他的地方，将文件地址输入到网站上会显示404界面<br>因此博主采用直接下载的方法进行安装</p>
</blockquote>
<p>之后对ide进行重启。之后我们点击<kbd>工具</kbd>—&gt;<kbd>开发板</kbd>—&gt;<kbd>开发板管理器</kbd><br>，在界面中输入esp8266进行搜索安装</p>
<p><img src="/images/pasted-12.png" alt="upload successful"></p>
<p><img src="/images/pasted-13.png" alt="upload successful"></p>
<p><img src="/images/pasted-14.png" alt="upload successful"></p>
<p>如果发生安装失败的方法，可以看上文，并<a href="#wrong1">点击我来进行跳转</a><br>之后便是重新启动ide软件，会发现esp8266的相关库已经安装成功了</p>
<p><img src="/images/pasted-15.png" alt="upload successful"></p>
<h1 id="错误汇总"><a href="#错误汇总" class="headerlink" title="错误汇总"></a>错误汇总</h1><h2 id="通过博客流程无法正常安装esp8266相关库"><a href="#通过博客流程无法正常安装esp8266相关库" class="headerlink" title="通过博客流程无法正常安装esp8266相关库"></a><div id="wrong1">通过博客流程无法正常安装esp8266相关库</div></h2><p>这里提供一个链接，通过<a href="https://www.arduino.cn/thread-76029-1-1.html">点我</a>来进行下载由大佬<code>奈何col</code>所提供的源码。[请注意，此版本为esp8266 2.7版本]<br>下载完成之后双击安装即可</p>
<h2 id="安装完包之后发现有更新，点击之后相关库消失了"><a href="#安装完包之后发现有更新，点击之后相关库消失了" class="headerlink" title="安装完包之后发现有更新，点击之后相关库消失了"></a>安装完包之后发现有更新，点击之后相关库消失了</h2><p>建议安装完第三方库不要进行更新，因为可能会出现库的匹配问题，有一定几率会删除之前安装的库</p>
<h2 id="安装过程报错"><a href="#安装过程报错" class="headerlink" title="安装过程报错"></a>安装过程报错</h2><p>这种情况在安装的时候我也出现过，解决方法就是多次点击安装，可能会出现的错误有<code>未通过验证</code>或者<code>在github上未找到相关包</code></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如有其他问题，欢迎留言</p>
]]></content>
      <categories>
        <category>study</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>git的相关代码</title>
    <url>/OLD_BLOG/2021/07/12/git%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从自己csdn上搬过来的，比较有用的</p>
<span id="more"></span>
<h3 id="本地相关操作"><a href="#本地相关操作" class="headerlink" title="本地相关操作"></a>本地相关操作</h3><h4 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h4><ul>
<li>添加工作区文件到暂存区</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git <span class="title function_">add</span> <span class="params">(文件名称/./--all/-a)</span></span><br><span class="line">其中第一个为添加指定文件到暂存区，后面三个是添加当前根目录下全部文件到暂存区</span><br></pre></td></tr></table></figure>

<ul>
<li>暂存区文件提交到版本库</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交信息内容&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前根目录下文件状态</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前仓库内版本记录</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --graph			有图形界面</span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=format:<span class="string">&quot;%h %s&quot;</span>		</span><br><span class="line">在图形界面的基础上简化显示，只显示版本号以及提交信息</span><br></pre></td></tr></table></figure>

<ul>
<li>回滚文件到之前版本</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br><span class="line">PS：版本号用git <span class="built_in">log</span>查看</span><br></pre></td></tr></table></figure>
<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><ul>
<li>查看分支</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<ul>
<li>创建分支</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git branch 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>切换分支</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git checkout 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>删除分支</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>合并分支（将别的分支合并到当前分支）</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git merge 需要合并过来的分支</span><br></pre></td></tr></table></figure>

<h3 id="云端操作"><a href="#云端操作" class="headerlink" title="云端操作"></a>云端操作</h3><h4 id="基操-1"><a href="#基操-1" class="headerlink" title="基操"></a>基操</h4><ul>
<li>云端克隆仓库到本地</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git clone 仓库SSH地址</span><br></pre></td></tr></table></figure>

<ul>
<li>更新本地仓库（从云端信息）</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git pull origin 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>将版本库的版本上传到云端</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<ul>
<li>从远程仓库获取文件到版本区</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git fetch origin 分支</span><br></pre></td></tr></table></figure>

<ul>
<li>将版本库的代码提取到工作区</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git merge origin/分支</span><br></pre></td></tr></table></figure>

<h4 id="创建一个新的本地仓库并且送到云端"><a href="#创建一个新的本地仓库并且送到云端" class="headerlink" title="创建一个新的本地仓库并且送到云端"></a>创建一个新的本地仓库并且送到云端</h4><ol>
<li>在本地创建一个新的仓库</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git init </span><br><span class="line">PS：进入目标文件夹之后进行</span><br></pre></td></tr></table></figure>

<p>2.添加文件到暂存区</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git <span class="title function_">add</span> <span class="params">(文件名称)</span></span><br></pre></td></tr></table></figure>

<p>3.链接本地仓库以及远程仓库</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git remote add origin 远程地址</span><br></pre></td></tr></table></figure>
<p>4.暂存区文件到版本区</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;相关描述&quot;</span></span><br></pre></td></tr></table></figure>
<p>5.上传文件到相关分支</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line">PS：-u可以不需要加（暂时没研究不加以及加的区别）</span><br><span class="line">PPS:master 上传到远程仓库的主分支，这个可以换成其他的</span><br></pre></td></tr></table></figure>
<h4 id="本地已经有仓库"><a href="#本地已经有仓库" class="headerlink" title="本地已经有仓库"></a>本地已经有仓库</h4><p>本地有仓库需要提交到云端的话只需要执行上面的3、5两个步骤即可</p>
<h4 id="git取消与远程仓库的的连接"><a href="#git取消与远程仓库的的连接" class="headerlink" title="git取消与远程仓库的的连接"></a>git取消与远程仓库的的连接</h4><p>连接远程仓库<br><code>git remote add origin 仓库地址</code></p>
<p>查看远程连接<br><code>git remote -v</code></p>
<p>git取消与远程仓库的连接<br><code>git remote remove origin</code></p>
<h4 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h4><ul>
<li>将之前一部分提交合并到一起</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git rebase -i 想要合并的版本号</span><br><span class="line">从当前到你所选的版本号进行合并</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~数字 </span><br><span class="line">从当前开始找最近的三条记录合并到一起</span><br></pre></td></tr></table></figure>
<p>输入完上述之后会出现<br><img src="https://img-blog.csdnimg.cn/20210113211935327.png" alt="出现内容"><br>将下面的pick换成s<br><img src="https://img-blog.csdnimg.cn/2021011321202839.png" alt="变换"><br>PS：参数s代表将此版本与上面的版本进行合并<br>之后会出现如下内容<br><img src="https://img-blog.csdnimg.cn/20210113212222460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIWUNhcmdl,size_16,color_FFFFFF,t_70" alt="整合提交信息"><br>此操作是将三次提交信息进行整合，修改为如下样子<br><img src="https://img-blog.csdnimg.cn/20210113212317876.png" alt="修改"><br>注意：如果版本已经上传到远程仓库，则尽可能避免合并此分支</p>
<h4 id="git修改分支名称"><a href="#git修改分支名称" class="headerlink" title="git修改分支名称"></a>git修改分支名称</h4><p>假设分支名称为master,然后我们需要将其改写成为dev<br><strong>当前操作在本地进行,并未进行云端同步</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git branch -m <span class="keyword">master</span> <span class="title">dev</span></span><br></pre></td></tr></table></figure>
<p>如果已经推送到远程分支,并且本地和远程分支的名称是对应的</p>
<ol>
<li>重命名远程分支所对应的本地分支<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git branch -m <span class="keyword">master</span> <span class="title">dev</span> </span><br></pre></td></tr></table></figure></li>
<li>删除远程分支<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> --<span class="built_in">delete</span> <span class="built_in">origin</span> master </span><br></pre></td></tr></table></figure></li>
<li>上传新命名完成之后的本地分支<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> dev</span><br></pre></td></tr></table></figure></li>
<li>将修改后的本地分支与远程分支相关联<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">git branch --<span class="keyword">set</span>-upstream-<span class="keyword">to</span> origin/dev</span><br></pre></td></tr></table></figure>
借鉴来源:<a href="https://www.jianshu.com/p/cc740394faf5">git修改分支名称——简书</a></li>
</ol>
<blockquote>
<p>注意:<br>1.最后远程修改并未经过实践,也许并不可以实用,本人只使用到本地分支更改名称</p>
</blockquote>
<blockquote>
<p>其他:<strong>git brach</strong>的相关使用方法<br/><br><strong>删除:</strong><br> git push origin :branchName  # 删除远程分支<br>git push origin –delete new # 删除远程分支new<br>git branch -d branchName     # 删除本地分支，强制删除用-D<br>git branch -d test      # 删除本地test分支<br>git branch -D test      # 强制删除本地test分支<br>git remote prune origin # 远程删除了，本地还能看到远程存在，这条命令删除远程不存在的分支<br/><br><strong>查看:</strong><br>git branch      # 列出本地分支<br>git branch -r   # 列出远端分支<br>git branch -a   # 列出所有分支<br>git branch -v   # 查看各个分支最后一个提交对象的信息<br>git branch –merge      # 查看已经合并到当前分支的分支<br>git branch –no-merge   # 查看为合并到当前分支的分支<br>git remote show origin  # 可以查看remote地址，远程分支<br/><br><strong>新建:</strong><br>git branch test # 新建test分支<br>git branch newBrach 3defc69 # 指定哈希3defc69，新建分支名字为newBrach<br>git checkout -b newBrach origin/master # 取回远程主机的更新以后，在它的基础上创建一个新的分支<br>git checkout -b newBrach 3defc69 # 以哈希值3defc69，新建 newBrach 分支，并切换到该分支<br/><br><strong>连接:</strong><br>git branch –set-upstream dev origin/dev     # 将本地dev分支与远程dev分支之间建立链接<br>git branch –set-upstream master origin/next # 手动建立追踪关系  <br/><br><strong>分支切换:</strong><br>git checkout test     # 切换到test分支<br>git checkout -b test  # 新建+切换到test分支<br>git checkout -b test dev # 基于dev新建test分支，并切换   <br/><br><strong>远端:</strong><br>git fetch &lt;远程主机名&gt; &lt;分支名&gt;   # fetch取回所有分支（branch）的更新<br>git fetch origin remotebranch[:localbranch]   #  从远端拉去分支[到本地指定分支]<br>git merge origin/branch   # 合并远端上指定分支<br>git pull origin remotebranch:localbranch  #  拉去远端分支到本地分支<br>git push origin branch    # 将当前分支，推送到远端上指定分支<br>git push origin localbranch:remotebranch  # 推送本地指定分支，到远端上指定分支<br>git push origin :remotebranch   # 删除远端指定分支<br>git checkout -b [–track] test origin/dev # 基于远端dev分支，新建本地test分支[同时设置跟踪]  <br/><br><strong>以上内容粘贴自linux文档,搬运工ing</strong></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>git配置以及与gitee联动</title>
    <url>/OLD_BLOG/2021/07/12/git%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E4%B8%8Egitee%E8%81%94%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新系统配置完成之后，怎能缺少git呢</p>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>首先配置git的全局信息，代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">填写你的全局用户名</span><br><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span></span><br><span class="line">填写你的邮箱号（其实可以不写邮箱，只是一个标识）</span><br></pre></td></tr></table></figure>
<p>之后在终端中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa –C <span class="string">&quot;你的邮箱号&quot;</span></span><br></pre></td></tr></table></figure>
<p>如图所示，之后就是多次输入回车，便可获得以下内容<br><img src="https://img-blog.csdnimg.cn/2021032921000723.png" alt="生成ssh文件"><br><img src="https://img-blog.csdnimg.cn/20210329210044299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIWUNhcmdl,size_16,color_FFFFFF,t_70" alt="成功"><br>之后你的SSH公钥就存放在<code>~/.ssh/id_rsa.pub</code>中，因此我们直接输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>进行查看，之后复制到gitee的相关公钥粘贴便可<br>之后我们需要在终端中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T 你的gitee账户@gitee.com</span><br></pre></td></tr></table></figure>
<p>之后会显示<br><img src="https://img-blog.csdnimg.cn/20210329210821217.png" alt="你好"><br>之后显示这个代表配置完成<br><img src="https://img-blog.csdnimg.cn/20210329210912932.png" alt="完成"></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo中创建博客文章</title>
    <url>/OLD_BLOG/2021/07/12/hexo%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>搭建完成博客之后，当然是要写东西的</p>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ol>
<li>在博客根目录下，输入<code>hexo n &quot;博客主题&quot;</code>便可以输出一篇文章</li>
<li>然后通过使用markdown等相关编写软件，来对md文件进行编写</li>
<li>输入<code>hexo g &amp; hexo d</code>来对博客进行上载(上载到github，或者<code>hexo g &amp; hexo s</code>在<code>localhost:4000</code>上进行查看<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1>这么写一篇博客，看着我都好累，因此有个比较好的插件进行推荐<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2>在博客根目录下输入<code> npm install --save hexo-admin</code>来进行安装插件<br>之后启动网站在浏览器中输入<code>localhost:4000/admin</code>进行编写，界面相对来讲简单很多</li>
</ol>
<p><img src="/images/pasted-2.png" alt="upload successful"><br>之后有许许多多的文件来进行讲解，具体贴个链接得了<br><a href="ttps://blog.csdn.net/smileyan9/article/details/86666824">链接点我</a></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx.conf的详细配置介绍(转载)</title>
    <url>/OLD_BLOG/2021/07/13/nginx-conf%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文为转载文章，由于博主文章很好，故转载保存<br>作者：程序员自由之路<br>出处：<a href="https://www.cnblogs.com/54chensongxia/p/12938929.html">https://www.cnblogs.com/54chensongxia/p/12938929.html</a><br>版权：本作品采用「署名-非商业性使用-相同方式共享 4.0 国际」许可协议进行许可</p>
<span id="more"></span>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>Nginx的主配置文件是nginx.conf，这个配置文件一共由三部分组成，分别为全局块、events块和http块。在http块中，又包含http全局块、多个server块。每个server块中，可以包含server全局块和多个location块。在同一配置块中嵌套的配置块，各个之间不存在次序关系。</p>
<p>配置文件支持大量可配置的指令，绝大多数指令不是特定属于某一个块的。同一个指令放在不同层级的块中，其作用域也不同，一般情况下，高一级块中的指令可以作用于自身所在的块和此块包含的所有低层级块。如果某个指令在两个不同层级的块中同时出现，则采用“就近原则”，即以较低层级块中的配置为准。比如，某指令同时出现在http全局块中和server块中，并且配置不同，则应该以server块中的配置为准。</p>
<p>整个配置文件的结构大致如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全局块</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#event块</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#http块</span></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment">#http全局块</span></span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    <span class="comment">#server块</span></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment">#server全局块</span></span><br><span class="line">        listen       8000;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        <span class="comment">#location块</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#这边可以有多个server块</span></span><br><span class="line">    server &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定可以运行nginx服务的用户和用户组，只能在全局块配置</span></span><br><span class="line"><span class="comment"># user [user] [group]</span></span><br><span class="line"><span class="comment"># 将user指令注释掉，或者配置成nobody的话所有用户都可以运行</span></span><br><span class="line"><span class="comment"># user nobody nobody;</span></span><br><span class="line"><span class="comment"># user指令在Windows上不生效，如果你制定具体用户和用户组会报小面警告</span></span><br><span class="line"><span class="comment"># nginx: [warn] &quot;user&quot; is not supported, ignored in D:\software\nginx-1.18.0/conf/nginx.conf:2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工作线程数，可以制定具体的进程数，也可使用自动模式，这个指令只能在全局块配置</span></span><br><span class="line"><span class="comment"># worker_processes number | auto；</span></span><br><span class="line"><span class="comment"># 列子：指定4个工作线程，这种情况下会生成一个master进程和4个worker进程</span></span><br><span class="line"><span class="comment"># worker_processes 4;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定pid文件存放的路径，这个指令只能在全局块配置</span></span><br><span class="line"><span class="comment"># pid logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定错误日志的路径和日志级别，此指令可以在全局块、http块、server块以及location块中配置。(在不同的块配置有啥区别？？)</span></span><br><span class="line"><span class="comment"># 其中debug级别的日志需要编译时使用--with-debug开启debug开关</span></span><br><span class="line"><span class="comment"># error_log [path] [debug | info | notice | warn | error | crit | alert | emerg] </span></span><br><span class="line"><span class="comment"># error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment"># error_log  logs/error.log  info;</span></span><br></pre></td></tr></table></figure>
<h3 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h3><p>events块涉及的指令主要影响Nginx服务器与用户的网络连接。常用到的设置包括是否开启对多worker process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型处理连接请求，每个worker process可以同时支持的最大连接数等。<br>这一部分的指令对Nginx服务器的性能影响较大，在实际配置中应该根据实际情况灵活调整。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当某一时刻只有一个网络连接到来时，多个睡眠进程会被同时叫醒，但只有一个进程可获得连接。如果每次唤醒的进程数目太多，会影响一部分系统性能。在Nginx服务器的多进程下，就有可能出现这样的问题。</span></span><br><span class="line"><span class="comment"># 开启的时候，将会对多个Nginx进程接收连接进行序列化，防止多个进程对连接的争抢</span></span><br><span class="line"><span class="comment"># 默认是开启状态，只能在events块中进行配置</span></span><br><span class="line"><span class="comment"># accept_mutex on | off;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果multi_accept被禁止了，nginx一个工作进程只能同时接受一个新的连接。否则，一个工作进程可以同时接受所有的新连接。 </span></span><br><span class="line"><span class="comment"># 如果nginx使用kqueue连接方法，那么这条指令会被忽略，因为这个方法会报告在等待被接受的新连接的数量。</span></span><br><span class="line"><span class="comment"># 默认是off状态，只能在event块配置</span></span><br><span class="line"><span class="comment"># multi_accept on | off;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定使用哪种网络IO模型，method可选择的内容有：select、poll、kqueue、epoll、rtsig、/dev/poll以及eventport，一般操作系统不是支持上面所有模型的。</span></span><br><span class="line"><span class="comment"># 只能在events块中进行配置</span></span><br><span class="line"><span class="comment"># use method</span></span><br><span class="line"><span class="comment"># use epoll</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置允许每一个worker process同时开启的最大连接数，当每个工作进程接受的连接数超过这个值时将不再接收连接</span></span><br><span class="line"><span class="comment"># 当所有的工作进程都接收满时，连接进入logback，logback满后连接被拒绝</span></span><br><span class="line"><span class="comment"># 只能在events块中进行配置</span></span><br><span class="line"><span class="comment"># 注意：这个值不能超过超过系统支持打开的最大文件数，也不能超过单个进程支持打开的最大文件数，具体可以参考这篇文章：https://cloud.tencent.com/developer/article/1114773</span></span><br><span class="line"><span class="comment"># worker_connections  1024;</span></span><br></pre></td></tr></table></figure>
<h3 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h3><p>http块是Nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。<br>前面已经提到，http块中可以包含自己的全局块，也可以包含server块，server块中又可以进一步包含location块，在本书中我们使用“http全局块”来表示http中自己的全局块，即http块中不包含在server块中的部分。<br>可以在http全局块中配置的指令包括文件引入、MIME-Type定义、日志自定义、是否使用sendfile传输文件、连接超时时间、单连接请求数上限等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用的浏览器中，可以显示的内容有HTML、XML、GIF及Flash等种类繁多的文本、媒体等资源，浏览器为区分这些资源，需要使用MIME Type。换言之，MIME Type是网络资源的媒体类型。Nginx服务器作为Web服务器，必须能够识别前端请求的资源类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># include指令，用于包含其他的配置文件，可以放在配置文件的任何地方，但是要注意你包含进来的配置文件一定符合配置规范，比如说你include进来的配置是worker_processes指令的配置，而你将这个指令包含到了http块中，着肯定是不行的，上面已经介绍过worker_processes指令只能在全局块中。</span></span><br><span class="line"><span class="comment"># 下面的指令将mime.types包含进来，mime.types和ngin.cfg同级目录，不同级的话需要指定具体路径</span></span><br><span class="line"><span class="comment"># include  mime.types;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置默认类型，如果不加此指令，默认值为text/plain。</span></span><br><span class="line"><span class="comment"># 此指令还可以在http块、server块或者location块中进行配置。</span></span><br><span class="line"><span class="comment"># default_type  application/octet-stream;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># access_log配置，此指令可以在http块、server块或者location块中进行设置</span></span><br><span class="line"><span class="comment"># 在全局块中，我们介绍过errer_log指令，其用于配置Nginx进程运行时的日志存放和级别，此处所指的日志与常规的不同，它是指记录Nginx服务器提供服务过程应答前端请求的日志</span></span><br><span class="line"><span class="comment"># access_log path [format [buffer=size]]</span></span><br><span class="line"><span class="comment"># 如果你要关闭access_log,你可以使用下面的命令</span></span><br><span class="line"><span class="comment"># access_log off;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log_format指令，用于定义日志格式，此指令只能在http块中进行配置</span></span><br><span class="line"><span class="comment"># log_format  main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line"><span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line"><span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"><span class="comment"># 定义了上面的日志格式后，可以以下面的形式使用日志</span></span><br><span class="line"><span class="comment"># access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启关闭sendfile方式传输文件，可以在http块、server块或者location块中进行配置</span></span><br><span class="line"><span class="comment"># sendfile  on | off;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置sendfile最大数据量,此指令可以在http块、server块或location块中配置</span></span><br><span class="line"><span class="comment"># sendfile_max_chunk size;</span></span><br><span class="line"><span class="comment"># 其中，size值如果大于0，Nginx进程的每个worker process每次调用sendfile()传输的数据量最大不能超过这个值(这里是128k，所以每次不能超过128k)；如果设置为0，则无限制。默认值为0。</span></span><br><span class="line"><span class="comment"># sendfile_max_chunk 128k;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置连接超时时间,此指令可以在http块、server块或location块中配置。</span></span><br><span class="line"><span class="comment"># 与用户建立会话连接后，Nginx服务器可以保持这些连接打开一段时间</span></span><br><span class="line"><span class="comment"># timeout，服务器端对连接的保持时间。默认值为75s;header_timeout，可选项，在应答报文头部的Keep-Alive域设置超时时间：“Keep-Alive:timeout= header_timeout”。报文中的这个指令可以被Mozilla或者Konqueror识别。</span></span><br><span class="line"><span class="comment"># keepalive_timeout timeout [header_timeout]</span></span><br><span class="line"><span class="comment"># 下面配置的含义是，在服务器端保持连接的时间设置为120 s，发给用户端的应答报文头部中Keep-Alive域的超时时间设置为100 s。</span></span><br><span class="line"><span class="comment"># keepalive_timeout 120s 100s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置单连接请求数上限，此指令可以在http块、server块或location块中配置。</span></span><br><span class="line"><span class="comment"># Nginx服务器端和用户端建立会话连接后，用户端通过此连接发送请求。指令keepalive_requests用于限制用户通过某一连接向Nginx服务器发送请求的次数。默认是100</span></span><br><span class="line"><span class="comment"># keepalive_requests number;</span></span><br></pre></td></tr></table></figure>
<h3 id="server块"><a href="#server块" class="headerlink" title="server块"></a>server块</h3><p>server块和“虚拟主机”的概念有密切联系。<br>虚拟主机，又称虚拟服务器、主机空间或是网页空间，它是一种技术。该技术是为了节省互联网服务器硬件成本而出现的。这里的“主机”或“空间”是由实体的服务器延伸而来，硬件系统可以基于服务器群，或者单个服务器等。虚拟主机技术主要应用于HTTP、FTP及EMAIL等多项服务，将一台服务器的某项或者全部服务内容逻辑划分为多个服务单位，对外表现为多个服务器，从而充分利用服务器硬件资源。从用户角度来看，一台虚拟主机和一台独立的硬件主机是完全一样的。<br>在使用Nginx服务器提供Web服务时，利用虚拟主机的技术就可以避免为每一个要运行的网站提供单独的Nginx服务器，也无需为每个网站对应运行一组Nginx进程。虚拟主机技术使得Nginx服务器可以在同一台服务器上只运行一组Nginx进程，就可以运行多个网站。<br>在前面提到过，每一个http块都可以包含多个server块，而每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务（或网站）。<br>和http块相同，server块也可以包含自己的全局块，同时可以包含多个location块。在server全局块中，最常见的两个配置项是本虚拟主机的监听配置和本虚拟主机的名称或IP配置。</p>
<h3 id="listen指令"><a href="#listen指令" class="headerlink" title="listen指令"></a>listen指令</h3><p>server块中最重要的指令就是listen指令，这个指令有三种配置语法。这个指令默认的配置值是：listen *:80 | *:8000；只能在server块种配置这个指令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//第一种</span><br><span class="line">listen address[:port] [default_server] [ssl] [http2 | spdy] [proxy_protocol] [setfib=number] [fastopen=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [<span class="built_in">bind</span>] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];</span><br><span class="line"></span><br><span class="line">//第二种</span><br><span class="line">listen port [default_server] [ssl] [http2 | spdy] [proxy_protocol] [setfib=number] [fastopen=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [<span class="built_in">bind</span>] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];</span><br><span class="line"></span><br><span class="line">//第三种（可以不用重点关注）</span><br><span class="line">listen unix:path [default_server] [ssl] [http2 | spdy] [proxy_protocol] [backlog=number] [rcvbuf=size] [sndbuf=size] [accept_filter=filter] [deferred] [<span class="built_in">bind</span>] [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];</span><br></pre></td></tr></table></figure>
<p>listen指令的配置非常灵活，可以单独制定ip，单独指定端口或者同时指定ip和端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">listen 127.0.0.1:8000;  <span class="comment">#只监听来自127.0.0.1这个IP，请求8000端口的请求</span></span><br><span class="line">listen 127.0.0.1; <span class="comment">#只监听来自127.0.0.1这个IP，请求80端口的请求（不指定端口，默认80）</span></span><br><span class="line">listen 8000; <span class="comment">#监听来自所有IP，请求8000端口的请求</span></span><br><span class="line">listen *:8000; <span class="comment">#和上面效果一样</span></span><br><span class="line">listen localhost:8000; <span class="comment">#和第一种效果一致</span></span><br></pre></td></tr></table></figure>
<p>关于上面的一些重要参数做如下说明：</p>
<ul>
<li>address：监听的IP地址（请求来源的IP地址），如果是IPv6的地址，需要使用中括号“[]”括起来，比如[fe80::1]等。</li>
<li>port：端口号，如果只定义了IP地址没有定义端口号，就使用80端口。这边需要做个说明：要是你压根没配置listen指令，那么那么如果nginx以超级用户权限运行，则使用*:80，否则使用*:8000。多个虚拟主机可以同时监听同一个端口,但是server_name需要设置成不一样；</li>
<li>default_server：假如通过Host没匹配到对应的虚拟主机，则通过这台虚拟主机处理。具体的可以参考<a href="https://segmentfault.com/a/1190000015681272">这篇文章</a>，写的不错。</li>
<li>backlog=number：设置监听函数listen()最多允许多少网络连接同时处于挂起状态，在FreeBSD中默认为-1，其他平台默认为511。</li>
<li>accept_filter=filter，设置监听端口对请求的过滤，被过滤的内容不能被接收和处理。本指令只在FreeBSD和NetBSD 5.0+平台下有效。filter可以设置为dataready或httpready，感兴趣的读者可以参阅Nginx的官方文档。</li>
<li>bind：标识符，使用独立的bind()处理此address:port；一般情况下，对于端口相同而IP地址不同的多个连接，Nginx服务器将只使用一个监听命令，并使用bind()处理端口相同的所有连接。</li>
<li>ssl：标识符，设置会话连接使用SSL模式进行，此标识符和Nginx服务器提供的HTTPS服务有关。<br>listen指令的使用看起来比较复杂，但其实在一般的使用过程中，相对来说比较简单，并不会进行太复杂的配置。<h3 id="server-name指令"><a href="#server-name指令" class="headerlink" title="server_name指令"></a>server_name指令</h3>用于配置虚拟主机的名称。语法是：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax:	server_name name ...;</span><br><span class="line">Default:	</span><br><span class="line">server_name <span class="string">&quot;&quot;</span>;</span><br><span class="line">Context:	server</span><br></pre></td></tr></table></figure>

<p>对于name 来说，可以只有一个名称，也可以由多个名称并列，之间用空格隔开。每个名字就是一个域名，由两段或者三段组成，之间由点号“.”隔开。比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server_name myserver.com www.myserver.com</span><br></pre></td></tr></table></figure>

<p>在该例中，此虚拟主机的名称设置为myserver.com或www. myserver.com。Nginx服务器规定，第一个名称作为此虚拟主机的主要名称。</p>
<p>在name 中可以使用通配符“*”，但通配符只能用在由三段字符串组成的名称的首段或尾段，或者由两段字符串组成的名称的尾段，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server_name myserver.* *.myserver.com</span><br></pre></td></tr></table></figure>

<p>另外name还支持正则表达式的形式。这边就不详细展开了。</p>
<p>由于server_name指令支持使用通配符和正则表达式两种配置名称的方式，因此在包含有多个虚拟主机的配置文件中，可能会出现一个名称被多个虚拟主机的server_name匹配成功。那么，来自这个名称的请求到底要交给哪个虚拟主机处理呢？Nginx服务器做出如下规定：</p>
<ol>
<li><p>对于匹配方式不同的，按照以下的优先级选择虚拟主机，排在前面的优先处理请求。<br>① 准确匹配server_name<br>② 通配符在开始时匹配server_name成功<br>③ 通配符在结尾时匹配server_name成功<br>④ 正则表达式匹配server_name成功  </p>
</li>
<li><p>在以上四种匹配方式中，如果server_name被处于同一优先级的匹配方式多次匹配成功，则首次匹配成功的虚拟主机处理请求。<br>有时候我们希望使用基于IP地址的虚拟主机配置，比如访问192.168.1.31有虚拟主机1处理，访问192.168.1.32由虚拟主机2处理。<br>这时我们要先网卡绑定别名，比如说网卡之前绑定的IP是192.168.1.30，现在将192.168.1.31和192.168.1.32这两个IP都绑定到这个网卡上，那么请求这个两个IP的请求才会到达这台机器。<br>绑定别名后进行以下配置即可：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">	&#123;</span><br><span class="line">	   listen:  80;</span><br><span class="line">	   server_name:  192.168.1.31;</span><br><span class="line">     ...</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">	   listen:  80;</span><br><span class="line">	   server_name:  192.168.1.32;</span><br><span class="line">     ...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="location块"><a href="#location块" class="headerlink" title="location块"></a>location块</h3><p>每个server块中可以包含多个location块。在整个Nginx配置文档中起着重要的作用，而且Nginx服务器在许多功能上的灵活性往往在location指令的配置中体现出来。<br>location块的主要作用是，基于Nginx服务器接收到的请求字符串（例如， server_name/uri-string），对除虚拟主机名称（也可以是IP别名，后文有详细阐述）之外的字符串（前例中“/uri-string”部分）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能都是在这部分实现。许多第三方模块的配置也是在location块中提供功能。<br>在Nginx的官方文档中定义的location的语法结构为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p>其中，uri变量是待匹配的请求字符串，可以是不含正则表达的字符串，如/myserver.php等；也可以是包含有正则表达的字符串，如 .php$（表示以.php结尾的URL）等。为了下文叙述方便，我们约定，不含正则表达的uri称为“标准uri”，使用正则表达式的uri称为“正则uri”。<br>其中方括号里的部分，是可选项，用来改变请求字符串与 uri 的匹配方式。在介绍四种标识的含义之前，我们需要先了解不添加此选项时，Nginx服务器是如何在server块中搜索并使用location块的uri和请求字符串匹配的。<br>在不添加此选项时，Nginx服务器首先在server块的多个location块中搜索是否有标准uri和请求字符串匹配，如果有多个可以匹配，就记录匹配度最高的一个。然后，服务器再用location块中的正则uri和请求字符串匹配，当第一个正则uri匹配成功，结束搜索，并使用这个location块处理此请求；如果正则匹配全部失败，就使用刚才记录的匹配度最高的location块处理此请求。<br>了解了上面的内容，就可以解释可选项中各个标识的含义了：</p>
<ul>
<li><p>“=”，用于标准uri前，要求请求字符串与uri严格匹配。如果已经匹配成功，就停止继续向下搜索并立即处理此请求。</p>
</li>
<li><p>“^～”，用于标准uri前，要求Nginx服务器找到标识uri和请求字符串匹配度最高的location后，立即使用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。</p>
</li>
<li><p>“～”，用于表示uri包含正则表达式，并且区分大小写。</p>
</li>
<li><p>“～<em>”，用于表示uri包含正则表达式，并且不区分大小写。注意如果uri包含正则表达式，就必须要使用“～”或者“～</em>”标识。</p>
<blockquote>
<p>我们知道，在浏览器传送URI时对一部分字符进行URL编码，比如空格被编码为“%20”，问号被编码为“%3f”等。“～”有一个特点是，它对uri中的这些符号将会进行编码处理。比如，如果location块收到的URI为“/html/%20/data”，则当Nginx服务器搜索到配置为“～ /html/ /data”的location时，可以匹配成功。</p>
</blockquote>
</li>
</ul>
<h3 id="root指令"><a href="#root指令" class="headerlink" title="root指令"></a>root指令</h3><p>这个指令用于设置请求寻找资源的跟目录，此指令可以在http块、server块或者location块中配置。由于使用Nginx服务器多数情况下要配置多个location块对不同的请求分别做出处理，因此该指令通常在location块中进行设置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root path</span><br></pre></td></tr></table></figure>
<p>path变量中可以包含Nginx服务器预设的大多数变量，只有documentroot和realpath_root不可以使用。</p>
<h3 id="一个配置文件的列子"><a href="#一个配置文件的列子" class="headerlink" title="一个配置文件的列子"></a>一个配置文件的列子</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">######Nginx配置文件nginx.conf中文详解#####</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx进程数，建议设置为等于CPU总核心数。</span></span><br><span class="line">worker_processes 8;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line"><span class="comment">#进程pid文件</span></span><br><span class="line">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="comment">#工作模式与连接数上限</span></span><br><span class="line"><span class="comment">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span></span><br><span class="line"><span class="comment">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span></span><br><span class="line"><span class="comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span></span><br><span class="line">    <span class="comment">#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class="line">    <span class="comment">#补充说明：</span></span><br><span class="line">    <span class="comment">#与apache相类，nginx针对不同的操作系统，有不同的事件模型</span></span><br><span class="line">    <span class="comment">#A）标准事件模型</span></span><br><span class="line">    <span class="comment">#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span></span><br><span class="line">    <span class="comment">#B）高效事件模型</span></span><br><span class="line">    <span class="comment">#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span></span><br><span class="line">    <span class="comment">#Epoll：使用于Linux内核2.6版本及以后的系统。</span></span><br><span class="line">    <span class="comment">#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span></span><br><span class="line">    <span class="comment">#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span></span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#单个进程最大连接数（最大连接数=连接数*进程数）</span></span><br><span class="line">    <span class="comment">#根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span></span><br><span class="line">    worker_connections 65535;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive超时时间。</span></span><br><span class="line">    keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line">    <span class="comment">#分页大小可以用命令getconf PAGESIZE 取得。</span></span><br><span class="line">    <span class="comment">#[root@web001 ~]# getconf PAGESIZE</span></span><br><span class="line">    <span class="comment">#4096</span></span><br><span class="line">    <span class="comment">#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span></span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line">    open_file_cache max=65535 inactive=60s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span></span><br><span class="line">    open_file_cache_valid 80s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span></span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.</span></span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    include mime.types;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默认文件类型</span></span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默认编码</span></span><br><span class="line">    <span class="comment">#charset utf-8;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#服务器名字的hash表大小</span></span><br><span class="line">    <span class="comment">#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span></span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设定通过nginx上传文件的大小</span></span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line">    <span class="comment">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span></span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span></span><br><span class="line">    tcp_nopush on;</span><br><span class="line">     </span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    keepalive_timeout 120;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip模块设置</span></span><br><span class="line">    gzip on; <span class="comment">#开启gzip压缩输出</span></span><br><span class="line">    gzip_min_length 1k;    <span class="comment">#最小压缩文件大小</span></span><br><span class="line">    gzip_buffers 4 16k;    <span class="comment">#压缩缓冲区</span></span><br><span class="line">    gzip_http_version 1.0;    <span class="comment">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line">    gzip_comp_level 2;    <span class="comment">#压缩等级</span></span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;    <span class="comment">#压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启限制IP连接数的时候需要使用</span></span><br><span class="line">    <span class="comment">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#负载均衡配置</span></span><br><span class="line">    upstream jh.w3cschool.cn &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">        server 192.168.80.121:80 weight=3;</span><br><span class="line">        server 192.168.80.122:80 weight=2;</span><br><span class="line">        server 192.168.80.123:80 weight=3;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx的upstream目前支持4种方式的分配</span></span><br><span class="line">        <span class="comment">#1、轮询（默认）</span></span><br><span class="line">        <span class="comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span></span><br><span class="line">        <span class="comment">#2、weight</span></span><br><span class="line">        <span class="comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14 weight=10;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15 weight=10;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#2、ip_hash</span></span><br><span class="line">        <span class="comment">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14:88;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15:80;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#3、fair（第三方）</span></span><br><span class="line">        <span class="comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server server1;</span></span><br><span class="line">        <span class="comment">#    server server2;</span></span><br><span class="line">        <span class="comment">#    fair;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#4、url_hash（第三方）</span></span><br><span class="line">        <span class="comment">#按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span></span><br><span class="line">        <span class="comment">#例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server squid1:3128;</span></span><br><span class="line">        <span class="comment">#    server squid2:3128;</span></span><br><span class="line">        <span class="comment">#    hash $request_uri;</span></span><br><span class="line">        <span class="comment">#    hash_method crc32;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#tips:</span></span><br><span class="line">        <span class="comment">#upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:9090 down;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:8080 weight=2;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:6060;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:7070 backup;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#每个设备的状态设置为:</span></span><br><span class="line">        <span class="comment">#1.down表示单前的server暂时不参与负载</span></span><br><span class="line">        <span class="comment">#2.weight为weight越大，负载的权重就越大。</span></span><br><span class="line">        <span class="comment">#3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span></span><br><span class="line">        <span class="comment">#4.fail_timeout:max_fails次失败后，暂停的时间。</span></span><br><span class="line">        <span class="comment">#5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span></span><br><span class="line">        <span class="comment">#client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span></span><br><span class="line">        <span class="comment">#client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span></span><br><span class="line">        <span class="comment">#location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">#虚拟主机的配置</span></span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">#监听端口</span></span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">        server_name www.w3cschool.cn w3cschool.cn;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root /data/www/w3cschool;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#对******进行负载均衡</span></span><br><span class="line">        location ~ .*.(php|php5)?$</span><br><span class="line">        &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#图片缓存时间设置</span></span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 10d;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#JS和CSS缓存时间设置</span></span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#日志格式设定</span></span><br><span class="line">        <span class="comment">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span></span><br><span class="line">        <span class="comment">#$remote_user：用来记录客户端用户名称；</span></span><br><span class="line">        <span class="comment">#$time_local： 用来记录访问时间与时区；</span></span><br><span class="line">        <span class="comment">#$request： 用来记录请求的url与http协议；</span></span><br><span class="line">        <span class="comment">#$status： 用来记录请求状态；成功是200，</span></span><br><span class="line">        <span class="comment">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line">        <span class="comment">#$http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line">        <span class="comment">#$http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line">        <span class="comment">#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span></span><br><span class="line">        log_format access <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">        <span class="string">&#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#定义本虚拟主机的访问日志</span></span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.404.<span class="built_in">log</span>  log404;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#对 &quot;/&quot; 启用反向代理</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:88;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">            client_max_body_size 10m;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line">            <span class="comment">#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span></span><br><span class="line">            <span class="comment">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span></span><br><span class="line">            client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#表示使nginx阻止HTTP应答代码为400或者更高的应答。</span></span><br><span class="line">            proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class="line">            <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">            proxy_connect_timeout 90;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span></span><br><span class="line">            proxy_send_timeout 90;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">            <span class="comment">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span></span><br><span class="line">            proxy_read_timeout 90;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">            <span class="comment">#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span></span><br><span class="line">            proxy_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">            <span class="comment">#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span></span><br><span class="line">            proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">            proxy_busy_buffers_size 64k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span></span><br><span class="line">            <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">            proxy_temp_file_write_size 64k;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        <span class="comment">#设定查看Nginx状态的地址</span></span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log on;</span><br><span class="line">            auth_basic <span class="string">&quot;NginxStatus&quot;</span>;</span><br><span class="line">            auth_basic_user_file confpasswd;</span><br><span class="line">            <span class="comment">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span></span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#本地动静分离反向代理配置</span></span><br><span class="line">        <span class="comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line">        location ~ .(jsp|jspx|<span class="keyword">do</span>)?$ &#123;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#所有静态文件由nginx直接读取不经过tomcat或resin</span></span><br><span class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">        pdf|xls|mp3|wma)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 15d; </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">######Nginx配置文件nginx.conf中文详解#####</span></span><br></pre></td></tr></table></figure>
<p>作者：程序员自由之路</p>
<p>出处：<a href="https://www.cnblogs.com/54chensongxia/p/12938929.html">https://www.cnblogs.com/54chensongxia/p/12938929.html</a></p>
<p>版权：本作品采用「署名-非商业性使用-相同方式共享 4.0 国际」许可协议进行许可。</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置界面</title>
    <url>/OLD_BLOG/2021/07/13/nginx%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于本博客使用的是hexo的配置环境，每次需要进行”三连“才可以部署，因此调试了一个服务器并且使用hexo-admin进行编写博客，本文仅介绍nginx的相关配置【注意：<strong>本文章只记录了相关调试方式，并没有搭建</strong>】</p>
<span id="more"></span>

<p>由于服务器采用的是CentOS的系统，因此仅代表该系统下进行调试成功</p>
<p>本篇博客在编写初期已经实现</p>
<ol>
<li>正常的网站访问（默认界面）</li>
<li>系统中安装拥有<code>locate</code> 、<code>vim</code>等相关基本命令</li>
</ol>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="nginx-conf文件介绍"><a href="#nginx-conf文件介绍" class="headerlink" title="nginx.conf文件介绍"></a>nginx.conf文件介绍</h2><p>由于在编写的时候发现了一篇比较好的，能够比较高级的讲解相关的配置方法，因此引用此文章</p>
<p><a href="https://www.cnblogs.com/54chensongxia/p/12938929.html">点我</a></p>
<p>此文章另会转载到本网站进行保存收录</p>
<h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><ol>
<li>首先我们需要查找配置文件的位置所在，使用<code>locate nginx.conf</code>进行查找相关位置，使用vim打开conf文件进行设置</li>
<li>之后我们需要更改网站的根目录，让其满足我们的需求。找到</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">listen 127.0.0.1:80; </span><br><span class="line">server_name  你的域名信息;</span><br><span class="line">root /你的网站根目录; </span><br><span class="line">index index.php index.html index.htm;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>修改 root的值，将你的网站根目录输入到此处</p>
<blockquote>
<p>网站根目录查询可以在有index.html的界面处，输入<code>pwd</code>来进行查询</p>
</blockquote>
<ol start="3">
<li>之后保存退出，重启nginx服务器即可</li>
</ol>
<blockquote>
<p>重启服务器指令：<code>cd /usr/sbin</code>–&gt;<code>./nginx</code>进行重启</p>
</blockquote>
<h1 id="相关错误"><a href="#相关错误" class="headerlink" title="相关错误"></a>相关错误</h1><h2 id="发现寻找不到nginx-pid"><a href="#发现寻找不到nginx-pid" class="headerlink" title="发现寻找不到nginx.pid"></a>发现寻找不到<code>nginx.pid</code></h2><p>这个就离谱，之前明明好好的，但是不知道为什么不可以了，这里有两个方法，网上大多类似（第二种好像我没有实现出来，因此采用第一种比较好）</p>
<h3 id="它没有，就给它创"><a href="#它没有，就给它创" class="headerlink" title="它没有，就给它创"></a>它没有，就给它创</h3><p>创建目录 <code>/var/run/nginx/ </code></p>
<p>就直接<code>cd /var/run</code>然后<code>ls</code>当前目录，发现莫得nginx这个文件夹,因此<code>mkdir nginx</code>，之后执行<code>nginx -s reload</code>，发现还不得，采用</p>
<p><code>cd /usr/sbin</code>–&gt;<code>./nginx</code>进行重启，之后就好了，神奇的事情2333</p>
<h3 id="修改-nginx-conf-文件，指定-pid文件-所在目录"><a href="#修改-nginx-conf-文件，指定-pid文件-所在目录" class="headerlink" title="修改 nginx.conf 文件，指定 pid文件 所在目录"></a>修改 <strong>nginx.conf</strong> 文件，指定 <strong>pid文件</strong> 所在目录</h3><ol>
<li>进入到配置文件中，解开pid前面的相关参数</li>
<li>并修改成为<code>pid   /usr/local/nginx/logs/nginx.pid;</code></li>
<li>在 <code>/usr/local/nginx</code> 目录下创建 <strong>logs 目录</strong>：<code>mkdir /usr/local/nginx/logs</code></li>
<li>之后执行上步骤的重启便可以进行解决</li>
</ol>
<h2 id="发现访问的时候是403错误"><a href="#发现访问的时候是403错误" class="headerlink" title="发现访问的时候是403错误"></a>发现访问的时候是403错误</h2><p>403代表着访问错误，说明可能没有相关权限去进行访问，因此我们首先需要启动nginx，之后在命令行中输入<code>ps -ef | grep nginx</code>来查询相关nginx的服务项</p>
<p>发现我的用户名全是root，因此在nginx的配置文件的第一项将user的内容输入为root，否则即使配置了下面的相关权限，也会未必有用</p>
<p>之后输入<code>chmod 755 文件夹路径</code>来修改文件的配置权限</p>
<p>之后重启服务器，应该就得了</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>此文章用于测试网站密码部分</title>
    <url>/OLD_BLOG/2021/07/12/text/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="好像密码不正确呢？再试试吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2fdb0f6b858b9c02e36ec39ed1c586ae6037946b389b11b7b5c527a3d2370f2a">165d50f05814027fb7fe5e4ae8a088d8cabf1ea2d88ccf0f53dc7b0b289f3333fa6e7cbafdf3745db874905024d44b1cbbb59a175a69e9ef948cd6a0229125caa533180b66b24acfeed260595d55ec5d5492d9fbae1e361055ddd3984639752431cf8bc2ac4b012e3b5b7fb91e9ae439163f04a1bf7b63ac6242a70760a5aa9af48d3a9d65d6168caddd0159be43886f09237530382699b7cffbb4cbc8173253d25f81896da272ae0533169b3a64492793c12015118037458bd6d690214fc111e529c2da2b1095b16696a48d188d18d8b69b97fc3696b8ebc8ee75b888a2132a91f35c2f753c4479a7e16599822d42472c78015407d845d94fae7fe694bf01bd7b7ded2651aa3d010097b1ac19e8fa70</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">输入正确密码查看正确文章</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/OLD_BLOG/lib/hbe.js"></script><link href="/OLD_BLOG/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>有密码</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu换源</title>
    <url>/OLD_BLOG/2021/07/12/ubuntu%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇博客简单介绍一下如何对ubuntu进行换源操作</p>
<span id="more"></span>

<p>由于国内访问国外原因，因此有些时候官方源文件会出现获取不到现象，因此需要我们进行更换，将国外源文件更换为国内源文件</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/weixin_43852091/article/details/105983547">ubuntu进行换源</a></p>
<h1 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h1><p>系统为Ubuntu20.04系统，如果系统不对，请自行去寻找系统所对应的源，否则会出现依赖问题</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>由于每个版本对应着不同的源，因此需要在换源之前查询自己的系统版本（盲目换源会出现依赖问题）<br>命令：<code> lsb_release -a</code><br>截图如下：<br><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210926132624046.png" alt="image-20210926132624046"></p>
<p>之后根据自己查询到的版本以及codename进行查找所需要的源</p>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>为了防止操作出错，因此我们需要先备份一下之前的源<br><code>sudo cp /etc/apt/sources.list  /etc/apt/sources.list.back</code></p>
<h2 id="更换"><a href="#更换" class="headerlink" title="更换"></a>更换</h2><ol>
<li><p>使用vim进行修改下载源</p>
<p><code>sudo vi /etc/apt/sources.list</code></p>
</li>
<li><p>将里面的内容全部删除(输入<code>dd</code>来删除当前行)或者进行注释</p>
</li>
<li><p>将以下内容输入到文件中（使用<code>i</code>进行编辑，按<kbd>Esc</kbd>并且输入<code>:wq</code>进行保存并退出）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#清华源</span></span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># 预发布软件源，不建议启用，也可取消注释</span></span><br><span class="line"><span class="comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>使用以下命令进行更新apt库文件</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apt update</span></span><br><span class="line"><span class="attribute">apt upgrade</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>一点感想</title>
    <url>/OLD_BLOG/2021/07/12/%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p>本博客搭建于2021-7-12日，耗时一天完成，作为一个小型博客，主要作用于个人的博客撰写以及记录一些事情吧，弃用csdn ing</p>
]]></content>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>使用excel的函数来对数据进行匹配</title>
    <url>/OLD_BLOG/2021/07/12/%E4%BD%BF%E7%94%A8excel%E7%9A%84%E5%87%BD%E6%95%B0%E6%9D%A5%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用excel中我们会遇到许许多多的问题，下面介绍如何通过公式来匹配相关数据，简化工作流程</p>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p><img src="https://img-blog.csdnimg.cn/20210630211352686.png" alt="123"><br>左侧为元数据，右侧为待匹配数据<br>1.<br>在待匹配数据中输入<code>=vl</code>，选择vloop函数<br><img src="https://img-blog.csdnimg.cn/20210630211456979.png" alt="122"></p>
<p>2.在函数中首先选中需要匹配的数据，及后面的姓名行（一个就可）<br><img src="https://img-blog.csdnimg.cn/20210630211533976.png" alt="12"><br>3.之后选择要进行匹配的序列，记得要绝对引用，使用$来进行固定引用单元格<br><img src="https://img-blog.csdnimg.cn/20210630211647883.png" alt="122"><br>4.之后输入2，因为要获取的内容是成绩类，在所需筛选的区域的第二列<br><img src="https://img-blog.csdnimg.cn/20210630211733441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIWUNhcmdl,size_16,color_FFFFFF,t_70" alt="23"><br>5.之后输入<code>)</code>就好，最后一项可以不用管<br><img src="https://img-blog.csdnimg.cn/20210630211906559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIWUNhcmdl,size_16,color_FFFFFF,t_70" alt="2223"></p>
<p>PS：如果需要管，会提示输入TRUE或者FALSE，根据情况选择就好<br><img src="https://img-blog.csdnimg.cn/20210630211834382.png" alt="234"><br>6.之后下拉单元格便可以完成匹配，如果没有匹配到就证明是未成功</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用esp8266</title>
    <url>/OLD_BLOG/2021/07/14/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8esp8266/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安装完成之后，就开始编写程序了，如51点亮第一个流水灯为例，本次尝试使用esp8266的相关模块，让其创建一个局域网</p>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>以太极创客的实例代码为例:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NodeMCU接入点模式</span></span><br><span class="line"><span class="comment">By 太极创客（http://www.taichi-maker.com）</span></span><br><span class="line"><span class="comment">2019-03-11</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用</span></span><br><span class="line"><span class="comment">电脑或者手机连接NodeMCU所建立WiFi网络。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">网络名: taichi-maker</span></span><br><span class="line"><span class="comment">密码：12345678</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">如需获得更多关于如何使用NodeMCU开发物联网的教程和资料信息</span></span><br><span class="line"><span class="comment">请参考太极创客网站（http://www.taichi-maker.com）</span></span><br><span class="line"><span class="comment">并在首页搜索栏中搜索关键字：物联网</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;taichi-maker&quot;</span>; <span class="comment">// 这里定义将要建立的WiFi名称。此处以&quot;taichi-maker&quot;为示例</span></span><br><span class="line">                                   <span class="comment">// 您可以将自己想要建立的WiFi名称填写入此处的双引号中</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *password = <span class="string">&quot;12345678&quot;</span>;  <span class="comment">// 这里定义将要建立的WiFi密码。此处以12345678为示例</span></span><br><span class="line">                                    <span class="comment">// 您可以将自己想要使用的WiFi密码放入引号内</span></span><br><span class="line">                                    <span class="comment">// 如果建立的WiFi不要密码，则在双引号内不要填入任何信息</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);              <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line">  WiFi.softAP(ssid, password);     <span class="comment">// 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。</span></span><br><span class="line">                                   <span class="comment">// 括号中有两个参数，ssid是WiFi名。password是WiFi密码。</span></span><br><span class="line">                                   <span class="comment">// 这两个参数具体内容在setup函数之前的位置进行定义。</span></span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  Serial.print(<span class="string">&quot;Access Point: &quot;</span>);    <span class="comment">// 通过串口监视器输出信息</span></span><br><span class="line">  Serial.println(ssid);              <span class="comment">// 告知用户NodeMCU所建立的WiFi名</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address: &quot;</span>);      <span class="comment">// 以及NodeMCU的IP地址</span></span><br><span class="line">  Serial.println(WiFi.softAPIP());   <span class="comment">// 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="安装相关库"><a href="#安装相关库" class="headerlink" title="安装相关库"></a>安装相关库</h2><p>进行编译的话我们需要安装支持相关编程的库文件：点击<kbd>工具</kbd>—&gt;<kbd>管理库</kbd>—&gt;搜索<code>esp8266wifi</code>—&gt;点击安装便可以</p>
<p><img src="/images/pasted-18.png" alt="upload successful"></p>
<p><img src="/images/pasted-19.png" alt="upload successful"></p>
<p><img src="/images/pasted-21.png" alt="upload successful"></p>
<p>之后我们需要选择芯片的指定型号，由于我使用的是<code>ESP-12F</code>的芯片，因此选择</p>
<p><img src="/images/pasted-24.png" alt="upload successful"></p>
<h2 id="将esp8266接入你的电脑"><a href="#将esp8266接入你的电脑" class="headerlink" title="将esp8266接入你的电脑"></a>将esp8266接入你的电脑</h2><p>与51芯片不同，接入芯片只需要一根能传输数据的<code>miro-usb</code>便可以进行实现，因此只需要找一个线将它与你电脑相连便可以了</p>
<h2 id="选择正确的端口号"><a href="#选择正确的端口号" class="headerlink" title="选择正确的端口号"></a>选择正确的端口号</h2><p>由于硬件需要选择端口来对硬件进行烧录，查找端口号的操作步骤为:右键<kbd>此电脑</kbd>—&gt;<kbd>管理</kbd>—&gt;<kbd>设备管理器</kbd>—&gt;<kbd>端口(COM和LPT)</kbd>，查找有无CH340接口，并确定它所对应的端口号</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>当代码一切正常的时候，你会在控制台得到一串信息，同时，再wifi处可以发现一个热点</p>
<p><img src="/images/pasted-25.png" alt="upload successful"></p>
<p><img src="/images/pasted-26.png" alt="upload successful"></p>
<p><img src="/images/pasted-27.png" alt="upload successful"></p>
<h1 id="产生错误"><a href="#产生错误" class="headerlink" title="产生错误"></a>产生错误</h1><h2 id="显示找不到库"><a href="#显示找不到库" class="headerlink" title="显示找不到库"></a>显示找不到库</h2><p><img src="/images/pasted-17.png" alt="upload successful"></p>
<p>尝试顺便安装下面的这两个库文件</p>
<p><img src="/images/pasted-22.png" alt="upload successful"></p>
<p><img src="/images/pasted-23.png" alt="upload successful"></p>
<p>如果还出现了错误，不妨检查一下，有没有选择正确的开发板。。。</p>
<h2 id="发现什么都没有输出"><a href="#发现什么都没有输出" class="headerlink" title="发现什么都没有输出"></a>发现什么都没有输出</h2><p>有可能是版本问题，其次上文代码只会再连接成功的时候输出一遍，因此有些高版本可能不允许一边打开串口监视器一边上传代码，因此导致代码运行时并未启动监控<br><strong>建议：<code>按esp8266的Rst键</code></strong></p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>硬件的开发总是与软件有着些许不同，也许你的程序再今天可以跑起来，但是不代表明天甚至下一刻可以使用，也许，这就是硬件的奥秘吧</p>
]]></content>
      <categories>
        <category>study</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用php进行上传文件</title>
    <url>/OLD_BLOG/2021/07/12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8php%E8%BF%9B%E8%A1%8C%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于需要设置提交报告，因此需要写一个提交模板</p>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="设置php-ini以及相关参数讲解"><a href="#设置php-ini以及相关参数讲解" class="headerlink" title="设置php.ini以及相关参数讲解"></a>设置php.ini以及相关参数讲解</h2><p>与网上大部分内容一样，需要对php.ini的内容进行修改<br>我们可以通过使用<code>locate php.ini</code>对此文件进行查找定位（如果没有请安装locate服务）<br>内容修改如下：</p>
<ul>
<li> file_uploads= On<br>（开启php文件上传功能）</li>
<li>upload_tmp_dir =<br>（开启临时存放位置，若此项为空，则为系统默认位置）</li>
<li>upload_max_filesize = 2M<br>（设置最大上传文件大小,默认为2M）<blockquote>
<p>请注意：该选项与下面的选项息息相关，如果下面没有修改，修改上面也没有用</p>
</blockquote>
</li>
<li>post_max_size = 8M<br>（设置post表单最大提交大小，<strong>要和上面的一起设置</strong> 此大小要大于上面的大小，否则容易上传空文件上来)</li>
<li>post_max_size = 100M<br>（如果启用了内存限制，则应该小于这个值【俺没用过】）</li>
<li>max_execution_time=30<br>（每个php脚本最大的运行时间，默认为30s）</li>
<li>max_input_time = 60<br>（设置php解析文件所需要的时间，若上传文件为大文件的时候，应将此项内容修改长一点，如果设置为0，则代表无限制）</li>
<li>memory_limit = 128M<br>（设置每个php脚本使用内存的最大容量，如果脚本过于垃圾，则可以限制它，防止影响其他程序，若设置为-1则代表无限制）<h2 id="上传文件参数解释"><a href="#上传文件参数解释" class="headerlink" title="上传文件参数解释"></a>上传文件参数解释</h2>当使用php上传文件时，<code>$_FILES[‘filename’]</code>则是php返回的关于上传文件的一串参数值，以下是具体解释</li>
<li><code>[‘name’]</code>    代表的是上传文件的文件名称</li>
<li><code>[‘type’] </code>文件类型，即doc文件、jpg文件，ppt文件等</li>
<li><code> [‘tmp_name’]</code>如果相关参数没有问题，文件则会被上传到临时存放位置，如上面设置的文件存放点或者是系统默认的存放位置，并在此处会返回文件的存放路径以及临时存放名称  </li>
<li><code>[‘error’] </code>如果相关参数设置没有问题，则不会产生报错，即error=0</li>
<li><code> [‘size’]</code>文件大小，代表着这个文件有多大</li>
</ul>
<h1 id="相关错误解释"><a href="#相关错误解释" class="headerlink" title="相关错误解释"></a>相关错误解释</h1><h2 id="如果发现临时文件没有内容但是一切正常不报错"><a href="#如果发现临时文件没有内容但是一切正常不报错" class="headerlink" title="如果发现临时文件没有内容但是一切正常不报错"></a>如果发现临时文件没有内容但是一切正常不报错</h2><p>这个问题是最苟的，因为不报错，所以有很多情况，其中我只讨论与我遇到的（写博客原因）</p>
<ul>
<li>请检查是否给予权限<br>网页以及php的权限基本上都是www-data，但是你的文件夹是root的，因此可能会出现无权操作文件的情况出现，因此我们可以在你设置的临时文件夹以及文件最后的存储位置，使用<br><code>sudo -u www-data touch 123</code>命令来查询是否具有权限创建文件，若发现没有，则需要使用<code>chown www-data:www-data -R &#39;你所要赋予权限的文件夹&#39;</code>进行赋予相关权限（如果显示权限不够加sudo或者使用root用户进行操作）<h2 id="如果发现临时文件存放位置为空"><a href="#如果发现临时文件存放位置为空" class="headerlink" title="如果发现临时文件存放位置为空"></a>如果发现临时文件存放位置为空</h2>一般来讲那就证明文件无法存放在相关位置，请检查文件大小是否超出php.ini中的设置，如果确实超过了，则需要对其进行更改</li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建一个自己的个人博客(以此平台为例)</title>
    <url>/OLD_BLOG/2021/07/12/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%BB%A5%E6%AD%A4%E5%B9%B3%E5%8F%B0%E4%B8%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>纪念一下这个博客的产生以及相关搭建问题的记录，其次<br><strong>正经人谁用csdn写博客呢？</strong></p>
<span id="more"></span>
<h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><h2 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h2><p>前期，我们需要准备并确保以下内容：</p>
<ul>
<li>git<br>作为一个版本控制软件，我们需要它对我们的博客进行管理，其次，由于本博客运行在github上，我们也需要将博客上载到github上，所以在某些方面而言，git也是很重要的，因此，我们可以使用命令<br><code> sudo pacman -S git</code><br>（arch的包管理器，如果是别的系统，可以去寻找对应系统的包管理器进行安装）进行安装，安装完成之后，使用<code>git -v</code>检查git版本</li>
<li>node.js<br>与git的安装方式一样，在终端输入<code>sudo pacman -S npm</code>进行安装，由于安装npm包管理器时，会自动安装node这个软件，因此运行一次就好（仅在arch中实验过，其他系统不确定），安装完成之后，输入<code>node -v</code>与<code>npm -v</code>来查看版本。  </li>
</ul>
<p><strong>需注意：</strong>node.js版本必须要求在 10.13及以上，如版本过于低，则有些java语句将无法使用，导致后续编译出错</p>
<ul>
<li>有一个github账户(可选)<br>如果你拥有一个github账户，那么你可以在后续部署中，将此博客托管到github上进行管理，让更多的人可以看见<h2 id="hexo的初始化"><a href="#hexo的初始化" class="headerlink" title="hexo的初始化"></a>hexo的初始化</h2></li>
</ul>
<p>1.由于hexo使用的是npm包管理器进行安装，因此我们可以输入<code>npm install -g hexo-cli</code>来安装hexo，其中npm的<code>-g</code>参数，代表着此软件全局安装，如果你对相关管理足够了解，你也可以采用<code>npm install hexo</code>来进行局部hexo的安装<br>2.等待安装完成之后，我们输入<code>hexo -v</code> 来查看是否报错以及相关软件是否安装成功<br>3.之后我们进入到想要创建博客的目录下，输入<code>hexo init myblogs</code>来对博客根目录进行初始化操作<br>4.然后<code>cd myblogs</code> 之后输入<code>npm install </code>进行相关包的补充（这里仍待研究<br>之后我们便将一个小型博客搭建完成，输入<code>hexo g &amp; hexo s</code>等待片刻之后在浏览器中输入<code>localhost:4000</code>便可以查看一下初始博客了～</p>
<h1 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h1><ul>
<li><code>hexo clean</code>或<code>hexo c</code> 与清除浏览器记录一样  </li>
<li><code>hexo g</code> 重新渲染静态网页  </li>
<li><code>hexo d</code> 将代码上载到相关代码托管平台</li>
<li><code>hexo s</code> 启动本地的hexo网站模块<h1 id="与github的梦幻联动"><a href="#与github的梦幻联动" class="headerlink" title="与github的梦幻联动"></a>与github的梦幻联动</h1>由于hexo是静态页面加载，符合github page的相关规定，因此我们可以将网站上载到github上。  </li>
</ul>
<p>1.我们需要有一个github的相关帐号以及绑定ssh密钥，相关操作已经在其他博客写有，本篇不再讨论<br>2.在github上创建一个仓库，名称填写为<code>你的用户名.github.io</code><br>例如：  </p>
<p><img src="/images/pasted-0.png" alt="upload successful"><br>3.修改在网站根目录下的<code>_config.yml</code>文件，找到<code>deploy</code>部分，更改为：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 此处填写git仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>4.之后安装<code>npm install hexo-deployer-git --save</code> 来实现hexo同步github等相关平台<br>5.之后运行<code>hexo clean &amp; hexo generate &amp; hexo deploy</code> 等代码运行完成之后，就会发现在仓库中多了一些东西<br>6.找到在github上的仓库位置，点击<kbd>settings</kbd>–&gt;<kbd>Pages</kbd>然后修改配置如下：</p>
<p><img src="/images/pasted-1.png" alt="upload successful"><br>由于我写入的是main，因此在branch中选择的是main，按正常情况而言默认都是master<br>至此，等待片刻，刷新该界面，当出现上图绿色的时候，便可以点击链接访问你的网站</p>
<h1 id="出现错误汇总"><a href="#出现错误汇总" class="headerlink" title="出现错误汇总"></a>出现错误汇总</h1><h2 id="文件下载有问题，出现错误"><a href="#文件下载有问题，出现错误" class="headerlink" title="文件下载有问题，出现错误"></a>文件下载有问题，出现错误</h2><p>由于国内网络原因，下载国外的东西可能会出现错误，因此需要短暂换源，参考如下：<br>输入：<br><code>npm config set registry https://registry.npm.taobao.org</code><br>  <code>npm info underscore</code><br>  之后可以使用，但由于博客服务器在海外，因此没有实验过此代码</p>
<h2 id="搭建完成之后输入localhost-4000报错"><a href="#搭建完成之后输入localhost-4000报错" class="headerlink" title="搭建完成之后输入localhost:4000报错"></a>搭建完成之后输入<code>localhost:4000</code>报错</h2><p>很有可能是你的端口号被占用了，因此需要更改你的相关端口，不过我没遇到过，随便找了一个解决方案：  </p>
<blockquote>
<p>可以修改在网站根目录下的<code>_config.yml</code>文件的运行端口号，如需更改成4001，代码如下：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 4001</span><br><span class="line">  compress: <span class="literal">true</span></span><br><span class="line">  header: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="为什么使用hexo？"><a href="#为什么使用hexo？" class="headerlink" title="为什么使用hexo？"></a>为什么使用hexo？</h1><p>因为hexo相对于其他平台而言，比较老，并且教程相关完善，虽然需要对代码以及相关程序基础有一定了解，但是其环境在所有静态网站来讲已经相当不错，毕竟不想挂服务器花钱。  极客风还是阔以的，但是对于此类平台来讲，还是仍有些许缺点，比如无法及时有效的编写博客，修改较为困难，等</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试使用github替我一次三连</title>
    <url>/OLD_BLOG/2021/07/13/%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8github%E6%9B%BF%E6%88%91%E4%B8%80%E6%AC%A1%E4%B8%89%E8%BF%9E/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于Hexo的平台效果编辑后冗余度及其高，并且编写文件比较繁琐困难，因此考虑将相关内容直接部署到<code>GitHub</code>中，方便后续的代码编写操作</p>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="另建立一个私有仓库"><a href="#另建立一个私有仓库" class="headerlink" title="另建立一个私有仓库"></a>另建立一个私有仓库</h2><p>由于方法是通过使用github action 来帮助进行管理的，因此我们要将自己的源码放置到github的私有仓库上进行管理<br>因此在博客根目录下创建一个git仓库，并将所有代码上传到github的私人仓库中进行保存<br><strong>请注意:要将主题中的git配置文件全部删除，并且如果之前有构建过上传过代码的，要将其中的所有关于git文件全部删除，否则会上传失败例如：’.git .develp_git’等</strong></p>
<h2 id="保存我们的公私钥"><a href="#保存我们的公私钥" class="headerlink" title="保存我们的公私钥"></a>保存我们的公私钥</h2><p>我们可以通过访问<code>~/.ssh</code>这个文件夹进行获取到我们的公私钥。其中公钥放置到自身的ssh钥匙中，私钥放置到私有仓库的密码中，并进行命名（请注意你的命名，会影响到后续的文件流的生成）<br><strong>请注意：私钥有相关文件描述，一定要将东西全部复制完毕，否则会产生报错</strong></p>
<h2 id="创建github-action的相关文件流"><a href="#创建github-action的相关文件流" class="headerlink" title="创建github action的相关文件流"></a>创建github action的相关文件流</h2><p>进入到私有仓库中，点击action，之后创建一个文件流，输入以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: Deploy Blog</span><br><span class="line"></span><br><span class="line">on: [push] <span class="comment"># 当有新push时运行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  build: <span class="comment"># 一项叫做build的任务</span></span><br><span class="line"></span><br><span class="line">    runs-on: ubuntu-latest <span class="comment"># 在最新版的Ubuntu系统下运行</span></span><br><span class="line">    </span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout <span class="comment"># 将仓库内master分支的内容下载到工作目录</span></span><br><span class="line">      uses: actions/checkout@v1 <span class="comment"># 脚本来自 https://github.com/actions/checkout</span></span><br><span class="line">      </span><br><span class="line">    - name: Use Node.js 16.x <span class="comment"># 配置Node环境</span></span><br><span class="line">      uses: actions/setup-node@v1 <span class="comment"># 配置脚本来自 https://github.com/actions/setup-node</span></span><br><span class="line">      with:</span><br><span class="line">        node-version: <span class="string">&quot;16.x&quot;</span></span><br><span class="line">    </span><br><span class="line">    - name: Setup Hexo <span class="built_in">env</span></span><br><span class="line">      <span class="built_in">env</span>:</span><br><span class="line">        ACTION_DEPLOY_KEY: <span class="variable">$&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;</span>&#125;</span><br><span class="line">      run: |</span><br><span class="line">        <span class="comment"># set up private key for deploy</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p ~/.ssh/</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ACTION_DEPLOY_KEY</span>&quot;</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\r&#x27;</span> &gt; ~/.ssh/id_rsa <span class="comment"># 配置秘钥</span></span><br><span class="line">        <span class="built_in">chmod</span> 600 ~/.ssh/id_rsa</span><br><span class="line">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">        <span class="comment"># set git infomation</span></span><br><span class="line">        git config --global user.name <span class="string">&#x27;你的名字&#x27;</span> <span class="comment"># 换成你自己的邮箱和名字</span></span><br><span class="line">        git config --global user.email <span class="string">&#x27;你的邮箱&#x27;</span></span><br><span class="line">        <span class="comment"># install dependencies</span></span><br><span class="line">        npm i -g hexo-cli <span class="comment"># 安装hexo</span></span><br><span class="line">        npm i</span><br><span class="line">  </span><br><span class="line">    - name: Deploy</span><br><span class="line">      run: |</span><br><span class="line">        <span class="comment"># publish</span></span><br><span class="line">        hexo generate &amp;&amp; hexo deploy <span class="comment"># 执行部署程序</span></span><br></pre></td></tr></table></figure>
<p>以上代码参考别人得出，相关源文件已无从得出，如有侵权请联系我  </p>
<blockquote>
<p>Node环境要以大环境为主，比如这个之前的代码是10一下的，但是Hexo显然不支持10了，因此对此需要修改到16</p>
</blockquote>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>让我们在源文件的<code>source/_posts/</code>里面创建一个md文件，之后输入需要用到的相关内容（具体可以参考里面其他的md文件<br>之后将文件提交，看看action是否有变化，后面发现有变化，因此配置成功，等一下刷新一下网站便可以  </p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>后面我看很多博主都有在线修改文章的功能，当时很懵，看了很多人的博客介绍，但是并没有找到自己所找到的东西，后面翻<a href="https://theme-next.js.org/docs/theme-settings/posts">next的配置文档</a>发现其实在next的主题文件中已经包含了关于在线修改文件的配置，经过修改配置文件的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">post_edit:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>之后将自己的url填写在里面，便可以实现此功能<br>如有其他问题，请在下方留言</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Github Actions</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统之重定位</title>
    <url>/OLD_BLOG/2021/07/12/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%87%8D%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="本文为转载"><a href="#本文为转载" class="headerlink" title="本文为转载"></a>本文为转载</h1><p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href="https://blog.csdn.net/sunjinbat/article/details/80571241">https://blog.csdn.net/sunjinbat/article/details/80571241</a><br>————————————————<br>版权声明：本文为CSDN博主「codedrinker」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/sunjinbat/article/details/80571241">https://blog.csdn.net/sunjinbat/article/details/80571241</a></p>
<span id="more"></span>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>区别这两个概念之前，要知道 重定位 的概念。</p>
<p>重定位，通常来说把在装入时对目标程序中指令和数据地址修改的过程称为重定位。</p>
<p>而静态重定位就是，在逻辑地址转换为物理地址的过程中，地址变换是在进程装入时一次完成的，以后不再改变。</p>
<p>优点：是无需增加硬件地址转换机构，便于实现程序的静态连接。在早期计算机系统中大多采用这种方案。 </p>
<p>缺点：内存空间不能移动；各个用户进程很难共享内存中同一程序的副本</p>
<p>动态重定位：动态运行的装入程序把转入模块装入内存之后，并不立即把装入模块的逻辑地址进行转换，而是把这</p>
<p>种地址转换推迟到程序执行时才进行，装入内存后的所有地址都仍是逻辑地址。这种方式需要寄存器的支持，其中</p>
<p>放有当前正在执行的程序在内存空间中的起始地址。</p>
<p>优点：内存空间可以移动；各个用户进程可以共享内存中同一程序的副本。</p>
<p>缺点：增加了机器成本，而且实现存储管理的软件算法比较复杂。<br>————————————————<br>版权声明：本文为CSDN博主「codedrinker」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/sunjinbat/article/details/80571241">https://blog.csdn.net/sunjinbat/article/details/80571241</a></p>
]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>近日小记（2022-5-19）</title>
    <url>/OLD_BLOG/2022/05/19/2022-5-19%E8%BF%91%E6%9C%9F%E5%B0%8F%E4%BA%8B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="好像密码不正确呢？再试试吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="27414a7b98ceb497efc6255d099b4f1e3c2a369cc740bad63eea01846a5f0c77"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">输入正确密码查看正确文章</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/OLD_BLOG/lib/hbe.js"></script><link href="/OLD_BLOG/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>近期</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN、镜像知识点</title>
    <url>/OLD_BLOG/2021/09/15/CDN%E3%80%81%E9%95%9C%E5%83%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于配置<code>Picgo</code>的时候需要搭建CDN加速或者镜像访问（推荐），因此秉持好奇心记录一下</p>
<span id="more"></span>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>本笔记有以下几篇参考文章，分别如下：</p>
<p><a href="https://baike.baidu.com/item/%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99/184890">镜像网站</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/113037678">CDN原理简单介绍</a></p>
<p><a href="https://www.cnblogs.com/sunzhenchao/p/3586442.html">CDN与镜像站点的比较</a></p>
<p><a href="https://blog.csdn.net/rongwenbin/article/details/47609591">CDN与镜像区别</a></p>
<h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><h2 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h2><p>它和主站并没有太大差别，或者可算是为主站作的后备措施。有了镜像网站的好处是：如果不能对主站作正常访问（如某个服务器死掉或出了意外），但仍能通过其它服务器正常浏览。相对来说主站在速度等各方面比<a href="https://baike.baidu.com/item/%E9%95%9C%E5%83%8F%E7%AB%99%E7%82%B9">镜像站点</a>略胜一筹。</p>
<p>最常见的当属镜像站点（Mirror Sites）。通过复制网站或网页的内容并分配以不同域名和服务器，以此欺骗搜索引擎对同一站点或同一页面进行多次索引。大多数<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">搜索引擎</a>都提供有能够检测镜象站点的适当的过滤系统，一旦发觉镜像站点，则源站点和镜像站点都会被从<a href="https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E5%BA%93/5394111">索引数据库</a>中删除。</p>
<h2 id="建立镜像网站的目的"><a href="#建立镜像网站的目的" class="headerlink" title="建立镜像网站的目的"></a>建立镜像网站的目的</h2><p>1、保存网页信息，特别是在一个网站面临关站的时候。</p>
<p>2、提高用户在某个地区的下载速度。譬如一个美国网站的中国镜像可以使来自中国的用户直接从这个中国的镜像访问，从而加快了速度。这可以看作是一种全球范围的缓存。</p>
<p>3、保存历史性的数据、信息，防止丢失。</p>
<p>4、平衡网站的流量负载。例如，一个Linux 的发行版的ISO镜像文件的大量下载可能会导致主站过荷而下线，而<a href="https://baike.baidu.com/item/%E9%95%9C%E5%83%8F%E7%AB%99%E7%82%B9">镜像站点</a>则可以在多个服务器分担流量，从而保证站点的持续在线。</p>
<p>5、对因流量激增而下线的站点提供临时的访问。</p>
<p>6、便于不同地区或不同ISP（如中国电信和中国联通的互访问题）的人获得更快的访问速度。</p>
<p>创建镜像站点通常是由于<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%B8%A6%E5%AE%BD">网络带宽</a>限制、封锁或是其他原因，导致无法实现对主站点的正常访问。这时通过将主站点的信息资源移植转移到相对容易访问的本地服务器，以提高用户的访问效率。常见于<a href="https://baike.baidu.com/item/%E5%86%85%E9%83%A8%E7%BD%91">内部网</a>、校园网或是其他有较大存储设备的服务器。通过镜像站点，也可以实现多目标多线程的快速下载。例如Get Smart和Get Right正是使用了这种高级的<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD">多线程下载</a>技术。像站点是通过主服务器增加转移存储地址来实现信息的<a href="https://baike.baidu.com/item/%E5%BC%82%E5%9C%B0%E5%A4%87%E4%BB%BD">异地备份</a>。通常一个镜像会定期访问主网站，以更新其内容。镜像也有分一级、二级等等。二级镜像是指那些通过访问一级镜像网站来更新内容的网站，通常更新速度不如一级镜像，但不会给主网站增加负担。</p>
<h2 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h2><p>通过主服务器增加转移存储地址来实现信息的异地备份。 更新镜像最常用的软件是rsync，有时候也直接用http镜像工具。</p>
<h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><h2 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN"></a>什么是CDN</h2><p>CDN是将源站内容分发至全国所有的节点，从而缩短用户查看对象的延迟，提高用户访问网站的响应速度与网站的可用性的技术。它能够有效解决网络带宽小、用户访问量大、网点分布不均等问题。</p>
<blockquote>
<p>CDN 其实是 Content Delivery Network 的缩写，即“内容分发网络”<br>源站内容(image、html、js、css等) 这个属于内容分发</p>
</blockquote>
<p>CDN 诞生于二十多年前，随着骨干网压力的逐渐增大，以及长传需求的逐渐增多，使得骨干网的压力越来越大，长传效果越来越差。于是在 1995 年，MIT 的应用数学教授 Tom Leighton 带领着研究生 Danny Lewin 和其他几位顶级研究人员一起尝试用数学问题解决网络拥堵问题。</p>
<h2 id="为什么需要CDN"><a href="#为什么需要CDN" class="headerlink" title="为什么需要CDN"></a>为什么需要CDN</h2><p>当下的互联网应用都包含大量的静态内容，但静态内容以及一些准动态内容又是最耗费带宽的，特别是针对全国甚至全世界的大型网站，如果这些请求都指向主站的服务器的话，不仅是主站服务器受不了，单端口500M左右的带宽也扛不住，所以大多数网站都需要CDN服务。</p>
<p>根本上的原因是，访问速度对互联网应用的用户体验、口碑、甚至说直接的营收都有巨大的影响，任何的企业都渴望自己站点有更快的访问速度。而HTTP传输时延对web的访问速度的影响很大，在绝大多数情况下是起决定性作用的，这是由TCP/IP协议的一些特点决定的。物理层上的原因是光速有限、信道有限，协议上的原因有丢包、慢启动、拥塞控制等。</p>
<p>这就是你使用CDN的第一个也是最重要的原因：为了加速网站的访问。</p>
<p><strong>除了加速网站的访问之外，CDN还有一些作用</strong>：</p>
<ul>
<li>为了实现跨运营商、跨地域的全网覆盖</li>
</ul>
<p>互联不互通、区域ISP地域局限、出口带宽受限制等种种因素都造成了网站的区域性无法访问。CDN加速可以覆盖全球的线路，通过和运营商合作，部署IDC资源，在全国骨干节点商，合理部署CDN边缘分发存储节点，充分利用带宽资源，平衡源站流量。阿里云在国内有500+节点，海外300+节点，覆盖主流国家和地区不是问题，可以确保CDN服务的稳定和快速。</p>
<ul>
<li>为了保障你的网站安全</li>
</ul>
<p>CDN的负载均衡和分布式存储技术，可以加强网站的可靠性，相当无无形中给你的网站添加了一把保护伞，应对绝大部分的互联网攻击事件。防攻击系统也能避免网站遭到恶意攻击。</p>
<ul>
<li>为了异地备援</li>
</ul>
<p>当某个服务器发生意外故障时，系统将会调用其他临近的健康服务器节点进行服务，进而提供接近100%的可靠性，这就让你的网站可以做到永不宕机。</p>
<ul>
<li>为了节约成本</li>
</ul>
<p>投入使用CDN加速可以实现网站的全国铺设，你根据不用考虑购买服务器与后续的托管运维，服务器之间镜像同步，也不用为了管理维护技术人员而烦恼，节省了人力、精力和财力。</p>
<ul>
<li>为了让你更专注业务本身</li>
</ul>
<p>CDN加速厂商一般都会提供一站式服务，业务不仅限于CDN，还有配套的云存储、大数据服务、视频云服务等，而且一般会提供7x24运维监控支持，保证网络随时畅通，你可以放心使用。并且将更多的精力投入到发展自身的核心业务之上。</p>
<h1 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h1><ol>
<li><p>CDN 对用户完全透明，不需要用户手动选择需要访问的镜像站点；</p>
</li>
<li><p>CDN 对节点有健康性检查，而镜像则没有，因此CDN 可靠性更高；</p>
</li>
<li><p> CDN 的内容同步机制不需要人工的干预，而镜像站点需要一套复杂的系统来实现内容同步；镜像站点的系统复杂，维护工作量大，对运维工作有很大的压力；</p>
</li>
<li><p>CDN 部署便捷不需要对源站做改动，很短的时间内就可以采用并产生显著的效果；</p>
</li>
<li><p>CDN 节点分布广、带宽扩充快，镜像站点很难做到同样的覆盖范围及带宽快速扩充。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/ZHYCarge/photo/master/image-20210915213305128.png" alt="image-20210915213305128"></p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>CDN、镜像</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Cron与crontab简谈</title>
    <url>/OLD_BLOG/2021/11/21/Cron%E4%B8%8Ecrontab%E7%AE%80%E8%B0%88/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想要制作一个定时发送邮件的小功能，因此需要使用到Linux的定时任务。</p>
<p>通过了解，发现了Cron与Crontab来进行定时任务的实现</p>
<span id="more"></span>



<h2 id="什么是Cron？"><a href="#什么是Cron？" class="headerlink" title="什么是Cron？"></a>什么是Cron？</h2><blockquote>
<p>工具型软件<strong>cron</strong>是一款<a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix">类Unix</a>的<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>下的基于时间的任务管理系统。用户们可以通过<strong>cron</strong>在固定时间、日期、间隔下，运行定期任务（可以是命令和脚本）。<strong>cron</strong>常用于运维和管理，但也可用于其他地方，如：定期下载文件和邮件。<strong>cron</strong>该词来源于<a href="https://zh.wikipedia.org/wiki/%E5%B8%8C%E8%85%8A%E8%AF%AD">希腊语</a>chronos（χρόνος），原意是时间。</p>
<p>——<a href="https://zh.wikipedia.org/zh-hans/Cron">维基百科《Cron》</a></p>
</blockquote>
<h2 id="什么是crontab"><a href="#什么是crontab" class="headerlink" title="什么是crontab?"></a>什么是crontab?</h2><blockquote>
<p>crontab命令常见于<a href="https://baike.baidu.com/item/Unix">Unix</a>和<a href="https://baike.baidu.com/item/%E7%B1%BBUnix">类Unix</a>的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中，以供之后读取和执行。该词来源于希腊语 chronos(χρνο)，原意是时间。通常，crontab储存的指令被<a href="https://baike.baidu.com/item/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/966835">守护进程</a>激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。</p>
<p>——<a href="https://baike.baidu.com/item/crontab/8819388">百度百科《crontab》</a></p>
</blockquote>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/qq_36827625/article/details/87214178">用crontab每隔1分钟执行一个命令行脚本</a></p>
<p><a href="https://www.runoob.com/linux/linux-comm-crontab.html">Linux crontab 命令</a></p>
<p><a href="https://www.matools.com/cron/">在线Cron表达式生成器</a></p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="基本运行命令"><a href="#基本运行命令" class="headerlink" title="基本运行命令"></a>基本运行命令</h2><p>cron是一个定时执行工具，与大多数linux工具一样，我们可以通过如下命令能对其进行控制：</p>
<ul>
<li><p><code>service cron start</code>    </p>
<p>启动cron服务</p>
</li>
<li><p><code>service crond stop</code>    </p>
<p>关闭cron服务</p>
</li>
<li><p><code>service crond restart</code> </p>
<p> 重启cron服务</p>
</li>
<li><p><code>service crond reload </code>   </p>
<p>重新载入cron服务配置</p>
</li>
</ul>
<h2 id="crontab表详解"><a href="#crontab表详解" class="headerlink" title="crontab表详解"></a>crontab表详解</h2><p>通过在表中添加相关参数，我们便可以将相关脚本通过定时器进行定时运行</p>
<ul>
<li><p><code>crontab -l</code></p>
<p>列出当前crontab表中的内容</p>
</li>
<li><p><code>crontab -r</code></p>
<p>移除crontab表</p>
</li>
<li><p><code>crontab -e</code></p>
<p>可以使用系统中内置的编辑器，进入crontab表中，对表中内容进行编辑</p>
</li>
<li><p><code>crontab -i</code></p>
<p>可以移除crontab，会跳出系统信息让你再次确定是否移除crontab</p>
</li>
</ul>
<p>crontab表时间格式说明</p>
<p>1-3表示123<br>1-9/2表示13579</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">每小时执行     0 * * * *</span><br><span class="line"></span><br><span class="line">每天执行        0 0 * * *</span><br><span class="line"></span><br><span class="line">每周执行       0 0 * * 0</span><br><span class="line"></span><br><span class="line">每月执行        0 0 1 * *</span><br><span class="line"></span><br><span class="line">每年执行       0 0 1 1 *</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure>



<p>因此，如果我们想让一个脚本每十分钟执行一次，那么可以这么设置：</p>
<p><code> */10 * * * * 运行方式 脚本的绝对地址</code></p>
<p>设定cron的权限<br><code>/etc/cron.allow /etc/cron.deny</code></p>
<blockquote>
<p>  系统首先判断是否有cron.allow这个文件，如果有这个文件的话，系统会判断这个使用者有没有在cron.allow的名单里面，如果在名单里面的话，就可以使用cron机制。</p>
<p>如果这个使用者没有在cron.allow名单里面的话，就不能使用cron机制。      </p>
<p>如果系统里面没有cron.allow这个文件的话，系统会再判断是否有cron.deny这个文件，如果有cron.deny这个文件的话，就会判断这个使用者有没有在cron.deny这个名单里面，如果这个使用者在cron.deny名单里面的话，将不能使用cron机制。</p>
<p>如果这个使用者没有在cron.deny这个名单里面的话就可以使用cron机制。     如果系统里这两个文件都没有的话，就可以使用cron机制</p>
</blockquote>
<h2 id="添加脚本文件到目录中"><a href="#添加脚本文件到目录中" class="headerlink" title="添加脚本文件到目录中"></a>添加脚本文件到目录中</h2><p>在<code>/etc/crontab</code>中，存放着四个文件夹（<code>/cron.hourly  cron.daily  cron.weekly  cron.monthly</code>）分别代表着每小时执行一次，每天执行一次，每周执行一次，每月执行一次</p>
<p>在到达了指定的时间后，系统便会对其进行自动执行</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>仅仅作为一次记录</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266的服务器小介绍</title>
    <url>/OLD_BLOG/2021/11/02/ESP8266%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%8F%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试使用esp8266去创建一个服务器以及实现对开发版的基本控制</p>
<p>本篇文章参考自太极创客的相关文章，作为博主笔记使用</p>
<span id="more"></span>



<h1 id="其他教程"><a href="#其他教程" class="headerlink" title="其他教程"></a>其他教程</h1><p><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/web-server/">3-2-1 建立基本网络服务器</a></p>
<p><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-control/">3-2-2 通过网络服务实现NodeMCU开发板基本控制</a></p>
<p><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-server/pin-state/">3-2-3 通过网络服务将开发板引脚状态显示在网页中</a></p>
<p><a href="https://www.bilibili.com/video/BV1L7411c7jw?p=6">【ESP8266教程】零基础入门学用物联网-基础知识篇（太极创客团队）</a></p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="建立网络基本服务器的示例代码"><a href="#建立网络基本服务器的示例代码" class="headerlink" title="建立网络基本服务器的示例代码"></a>建立网络基本服务器的示例代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : 3_2_1_First_Web_Server</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment">作者/Author              : CYNO朔</span></span><br><span class="line"><span class="comment">日期/Date（YYYYMMDD）     : 20191107</span></span><br><span class="line"><span class="comment">程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址</span></span><br><span class="line"><span class="comment">                           访问8266所建立的基本网页（Hello from ESP8266）</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">修订历史/Revision History  </span></span><br><span class="line"><span class="comment">日期/Date    作者/Author      参考号/Ref    修订说明/Revision Description</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class="comment">//  ESP8266WiFiMulti库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   <span class="comment">//  ESP8266WebServer库</span></span></span><br><span class="line"> </span><br><span class="line">ESP8266WiFiMulti wifiMulti;     <span class="comment">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class="line"> </span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>;<span class="comment">// 建立ESP8266WebServer对象，对象名称为esp8266_server</span></span><br><span class="line">                                    <span class="comment">// 括号中的数字是网路服务器响应http请求的端口号</span></span><br><span class="line">                                    <span class="comment">// 网络服务器标准http端口号为80，因此这里使用80为端口号</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);          <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//通过addAp函数存储  WiFi名称       WiFi密码</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker&quot;</span>, <span class="string">&quot;12345678&quot;</span>);  <span class="comment">// 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker2&quot;</span>, <span class="string">&quot;87654321&quot;</span>); <span class="comment">// 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker3&quot;</span>, <span class="string">&quot;13572468&quot;</span>); <span class="comment">// 这3个网络的密码分别是123456789，87654321，13572468。</span></span><br><span class="line">                                                <span class="comment">// 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。</span></span><br><span class="line">                                                <span class="comment">// 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。</span></span><br><span class="line"> </span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class="comment">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class="line">    delay(<span class="number">1000</span>);                             <span class="comment">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    <span class="comment">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class="line">  &#125;                                          <span class="comment">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class="line">                                             <span class="comment">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class="line">  Serial.println(<span class="string">&#x27;\n&#x27;</span>);                     <span class="comment">// WiFi连接成功后</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connected to &quot;</span>);            <span class="comment">// NodeMCU将通过串口监视器输出。</span></span><br><span class="line">  Serial.println(WiFi.SSID());              <span class="comment">// 连接的WiFI名称</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:\t&quot;</span>);            <span class="comment">// 以及</span></span><br><span class="line">  Serial.println(WiFi.localIP());           <span class="comment">// NodeMCU的IP地址</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//--------&quot;启动网络服务功能&quot;程序部分开始-------- //  此部分为程序为本示例程序重点1</span></span><br><span class="line">  esp8266_server.begin();                   <span class="comment">//  详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, handleRoot);       <span class="comment">//  第3章-第2节 ESP8266-NodeMCU网络服务器-1</span></span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);        </span><br><span class="line"><span class="comment">//--------&quot;启动网络服务功能&quot;程序部分结束--------</span></span><br><span class="line">  Serial.println(<span class="string">&quot;HTTP esp8266_server started&quot;</span>);<span class="comment">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 以下函数语句为本示例程序重点3</span></span><br><span class="line"><span class="comment">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class="line"><span class="comment">第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/</span>  </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  esp8266_server.handleClient();     <span class="comment">// 处理http服务器访问</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 以下两个函数为本示例程序重点2</span></span><br><span class="line"><span class="comment">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class="line"><span class="comment">第3章-第2节 3_2_1_First_Web_Server 的说明讲解*/</span>                                                                            </span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;   <span class="comment">//处理网站根目录“/”的访问请求 </span></span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;Hello from ESP8266&quot;</span>);   <span class="comment">// NodeMCU将调用此函数。</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;                                        <span class="comment">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>);   <span class="comment">// NodeMCU将调用此函数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="通过网络服务器控制Esp8266示例代码"><a href="#通过网络服务器控制Esp8266示例代码" class="headerlink" title="通过网络服务器控制Esp8266示例代码"></a>通过网络服务器控制Esp8266示例代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : 3_2_2_Turning_on_and_off_an_LED</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment">作者/Author              : CYNO朔</span></span><br><span class="line"><span class="comment">日期/Date（YYYYMMDD）     : 20191108</span></span><br><span class="line"><span class="comment">程序目的/Purpose          : 使用NodeMCU建立基本服务器。用户可通过浏览器使用8266的IP地址</span></span><br><span class="line"><span class="comment">                           访问8266所建立的基本网页并通过该页面点亮/熄灭NodeMCU的内置LED</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">修订历史/Revision History  </span></span><br><span class="line"><span class="comment">日期/Date    作者/Author      参考号/Ref    修订说明/Revision Description</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class="comment">//  ESP8266WiFiMulti库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   <span class="comment">//  ESP8266WebServer库</span></span></span><br><span class="line"> </span><br><span class="line">ESP8266WiFiMulti wifiMulti;     <span class="comment">// 建立ESP8266WiFiMulti对象,对象名称是 &#x27;wifiMulti&#x27;</span></span><br><span class="line"> </span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>;<span class="comment">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);   <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line">  pinMode(LED_BUILTIN, OUTPUT); <span class="comment">//设置内置LED引脚为输出模式以便控制LED</span></span><br><span class="line">  </span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_1&quot;</span>, <span class="string">&quot;your_password_for_AP_1&quot;</span>); <span class="comment">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_2&quot;</span>, <span class="string">&quot;your_password_for_AP_2&quot;</span>); <span class="comment">// ESP8266-NodeMCU再启动后会扫描当前网络</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_3&quot;</span>, <span class="string">&quot;your_password_for_AP_3&quot;</span>); <span class="comment">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Connecting ...&quot;</span>);                            <span class="comment">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class="comment">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class="line">    delay(<span class="number">1000</span>);                             <span class="comment">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    <span class="comment">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class="line">  &#125;                                          <span class="comment">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class="line">                                             <span class="comment">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class="line">  Serial.println(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  Serial.print(<span class="string">&quot;Connected to &quot;</span>);</span><br><span class="line">  Serial.println(WiFi.SSID());              <span class="comment">// 通过串口监视器输出连接的WiFi名称</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:\t&quot;</span>);</span><br><span class="line">  Serial.println(WiFi.localIP());           <span class="comment">// 通过串口监视器输出ESP8266-NodeMCU的IP</span></span><br><span class="line"> </span><br><span class="line">  esp8266_server.begin();                           <span class="comment">// 启动网站服务</span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, HTTP_GET, handleRoot);     <span class="comment">// 设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/LED&quot;</span>, HTTP_POST, handleLED);  <span class="comment">// 设置处理LED控制请求的函数&#x27;handleLED&#x27;</span></span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);        <span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"> </span><br><span class="line">  Serial.println(<span class="string">&quot;HTTP esp8266_server started&quot;</span>);<span class="comment">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  esp8266_server.handleClient();                     <span class="comment">// 检查http服务器访问</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class="line"><span class="comment">  该函数的作用是每当有客户端访问NodeMCU服务器根目录时，</span></span><br><span class="line"><span class="comment">  NodeMCU都会向访问设备发送 HTTP 状态 200 (Ok) 这是send函数的第一个参数。</span></span><br><span class="line"><span class="comment">  同时NodeMCU还会向浏览器发送HTML代码，以下示例中send函数中第三个参数，</span></span><br><span class="line"><span class="comment">  也就是双引号中的内容就是NodeMCU发送的HTML代码。该代码可在网页中产生LED控制按钮。 </span></span><br><span class="line"><span class="comment">  当用户按下按钮时，浏览器将会向NodeMCU的/LED页面发送HTTP请求，请求方式为POST。</span></span><br><span class="line"><span class="comment">  NodeMCU接收到此请求后将会执行handleLED函数内容*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;       </span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>, <span class="string">&quot;&lt;form action=\&quot;/LED\&quot; method=\&quot;POST\&quot;&gt;&lt;input type=\&quot;submit\&quot; value=\&quot;Toggle LED\&quot;&gt;&lt;/form&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//处理LED控制请求的函数&#x27;handleLED&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleLED</span><span class="params">()</span> &#123;                          </span><br><span class="line">  digitalWrite(LED_BUILTIN,!digitalRead(LED_BUILTIN));<span class="comment">// 改变LED的点亮或者熄灭状态</span></span><br><span class="line">  esp8266_server.sendHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/&quot;</span>);          <span class="comment">// 跳转回页面根目录</span></span><br><span class="line">  esp8266_server.send(<span class="number">303</span>);                           <span class="comment">// 发送Http相应代码303 跳转  </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;</span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>); <span class="comment">// 发送 HTTP 状态 404 (未找到页面) 并向浏览器发送文字 &quot;404: Not found&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代码示例讲解"><a href="#代码示例讲解" class="headerlink" title="代码示例讲解"></a>代码示例讲解</h3><ul>
<li><code> esp8266_server.on(&quot;/&quot;, HTTP_GET, handleRoot)</code></li>
</ul>
<p>当服务器访问<code>/</code>目录时，且访问方式为GET模式，则使用<code>handleRoot</code>函数对其请求进行处理</p>
<ul>
<li><code>esp8266_server.sendHeader(&quot;Location&quot;,&quot;/&quot;)</code></li>
</ul>
<p>发送一个头，位置是<code>/</code></p>
<h2 id="通过网络服务显示端口状态示例代码"><a href="#通过网络服务显示端口状态示例代码" class="headerlink" title="通过网络服务显示端口状态示例代码"></a>通过网络服务显示端口状态示例代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : 3_2_3_Pin_State_Display</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment">作者/Author              : CYNO朔</span></span><br><span class="line"><span class="comment">日期/Date（YYYYMMDD）     : 20191107</span></span><br><span class="line"><span class="comment">程序目的/Purpose          : 使用NodeMCU建立基本服务器。该页面将会自动刷新并且显示NodeMCU</span></span><br><span class="line"><span class="comment">                           的D3引脚状态。NodeMCU开发板上的FLASH按键可以控制D3引脚的电平。</span></span><br><span class="line"><span class="comment">                           没有按下该按键时D3引脚将会保持高电平状态。当按下该按键后，</span></span><br><span class="line"><span class="comment">                           D3引脚会变为低电平。</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">修订历史/Revision History  </span></span><br><span class="line"><span class="comment">日期/Date    作者/Author      参考号/Ref    修订说明/Revision Description</span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用 ESP8266WiFi库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class="comment">//  ESP8266WiFiMulti库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WebServer.h&gt;</span>   <span class="comment">//  ESP8266WebServer库</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> buttonPin D3            <span class="comment">// 按钮引脚D3</span></span></span><br><span class="line"> </span><br><span class="line">ESP8266WiFiMulti wifiMulti;     <span class="comment">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class="line"> </span><br><span class="line">ESP8266WebServer <span class="title function_">esp8266_server</span><span class="params">(<span class="number">80</span>)</span>;<span class="comment">// 建立网络服务器对象，该对象用于响应HTTP请求。监听端口（80）</span></span><br><span class="line"> </span><br><span class="line"><span class="type">bool</span> pinState;  <span class="comment">// 存储引脚状态用变量</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);   <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line">  pinMode(buttonPin, INPUT_PULLUP); <span class="comment">// 将按键引脚设置为输入上拉模式</span></span><br><span class="line"> </span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_1&quot;</span>, <span class="string">&quot;your_password_for_AP_1&quot;</span>); <span class="comment">// 将需要连接的一系列WiFi ID和密码输入这里</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_2&quot;</span>, <span class="string">&quot;your_password_for_AP_2&quot;</span>); <span class="comment">// ESP8266-NodeMCU再启动后会扫描当前网络</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;ssid_from_AP_3&quot;</span>, <span class="string">&quot;your_password_for_AP_3&quot;</span>); <span class="comment">// 环境查找是否有这里列出的WiFi ID。如果有</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Connecting ...&quot;</span>);                            <span class="comment">// 则尝试使用此处存储的密码进行连接。</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class="comment">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class="line">    delay(<span class="number">1000</span>);                             <span class="comment">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);    <span class="comment">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class="line">  &#125;                                          <span class="comment">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class="line">                                             <span class="comment">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class="line">  <span class="comment">// WiFi连接成功后将通过串口监视器输出连接成功信息 </span></span><br><span class="line">  Serial.println(<span class="string">&#x27;\n&#x27;</span>);                     <span class="comment">// WiFi连接成功后</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connected to &quot;</span>);            <span class="comment">// NodeMCU将通过串口监视器输出。</span></span><br><span class="line">  Serial.println(WiFi.SSID());              <span class="comment">// 连接的WiFI名称</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:\t&quot;</span>);            <span class="comment">// 以及</span></span><br><span class="line">  Serial.println(WiFi.localIP());           <span class="comment">// NodeMCU的IP地址</span></span><br><span class="line">  </span><br><span class="line">  esp8266_server.begin();                   <span class="comment">// 启动网站服务                </span></span><br><span class="line">  esp8266_server.on(<span class="string">&quot;/&quot;</span>, handleRoot);       <span class="comment">// 设置服务器根目录即&#x27;/&#x27;的函数&#x27;handleRoot&#x27;</span></span><br><span class="line">  esp8266_server.onNotFound(handleNotFound);<span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;        </span></span><br><span class="line"> </span><br><span class="line">  Serial.println(<span class="string">&quot;HTTP esp8266_server started&quot;</span>);<span class="comment">//  告知用户ESP8266网络服务功能已经启动</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">  esp8266_server.handleClient();     <span class="comment">// 处理http服务器访问</span></span><br><span class="line">  pinState = digitalRead(buttonPin); <span class="comment">// 获取引脚状态</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 以下函数处理网站首页的访问请求。此函数为本示例程序重点1</span></span><br><span class="line"><span class="comment">详细讲解请参见太极创客网站《零基础入门学用物联网》</span></span><br><span class="line"><span class="comment">第3章-第2节“通过网络服务将开发板引脚状态显示在网页中”的说明讲解。*/</span>                                                                       </span><br><span class="line"><span class="type">void</span> <span class="title function_">handleRoot</span><span class="params">()</span> &#123;   </span><br><span class="line">  String displayPinState;                   <span class="comment">// 存储按键状态的字符串变量</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(pinState == HIGH)&#123;                     <span class="comment">// 当按键引脚D3为高电平</span></span><br><span class="line">    displayPinState = <span class="string">&quot;Button State: HIGH&quot;</span>; <span class="comment">// 字符串赋值高电平信息</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;                                  <span class="comment">// 当按键引脚D3为低电平</span></span><br><span class="line">    displayPinState = <span class="string">&quot;Button State: LOW&quot;</span>;  <span class="comment">// 字符串赋值低电平信息</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  esp8266_server.send(<span class="number">200</span>, <span class="string">&quot;text/plain&quot;</span>, displayPinState); </span><br><span class="line">                                            <span class="comment">// 向浏览器发送按键状态信息  </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置处理404情况的函数&#x27;handleNotFound&#x27;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handleNotFound</span><span class="params">()</span>&#123;                                        <span class="comment">// 当浏览器请求的网络资源无法在服务器找到时，</span></span><br><span class="line">  esp8266_server.send(<span class="number">404</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;404: Not found&quot;</span>);   <span class="comment">// NodeMCU将调用此函数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h3><ul>
<li><p><code>digitalRead(buttonPin)</code></p>
<p>获取<code>buttonPin</code>的当前引脚状态</p>
</li>
</ul>
]]></content>
      <categories>
        <category>study</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266的连接模式</title>
    <url>/OLD_BLOG/2021/11/01/ESP8266%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试使用esp8266去创建一个无线局域网环境以及连接到一个无线局域网。</p>
<p>本篇文章参考自太极创客的相关文章，作为博主笔记使用</p>
<span id="more"></span>



<h1 id="其他教程"><a href="#其他教程" class="headerlink" title="其他教程"></a>其他教程</h1><p><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/ap/">3-1-3 NodeMCU开发板的接入点模式</a></p>
<p><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/station/">3-1-4 NodeMCU开发板的无线终端模式</a></p>
<p><a href="https://www.bilibili.com/video/BV1L7411c7jw?p=5">【ESP8266教程】零基础入门学用物联网-基础知识篇（太极创客团队）</a></p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="创建无线局域网示例代码"><a href="#创建无线局域网示例代码" class="headerlink" title="创建无线局域网示例代码"></a>创建无线局域网示例代码</h2><p>本代码复制于太极创客的示例代码，内容如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NodeMCU接入点模式</span></span><br><span class="line"><span class="comment">By 太极创客（http://www.taichi-maker.com）</span></span><br><span class="line"><span class="comment">2019-03-11</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">此程序用于演示如何将NodeMCU以接入点模式工作。通过此程序，您可以使用</span></span><br><span class="line"><span class="comment">电脑或者手机连接NodeMCU所建立WiFi网络。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">网络名: taichi-maker</span></span><br><span class="line"><span class="comment">密码：12345678</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">如需获得更多关于如何使用NodeMCU开发物联网的教程和资料信息</span></span><br><span class="line"><span class="comment">请参考太极创客网站（http://www.taichi-maker.com）</span></span><br><span class="line"><span class="comment">并在首页搜索栏中搜索关键字：物联网</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;taichi-maker&quot;</span>; <span class="comment">// 这里定义将要建立的WiFi名称。此处以&quot;taichi-maker&quot;为示例</span></span><br><span class="line">                                   <span class="comment">// 您可以将自己想要建立的WiFi名称填写入此处的双引号中</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *password = <span class="string">&quot;12345678&quot;</span>;  <span class="comment">// 这里定义将要建立的WiFi密码。此处以12345678为示例</span></span><br><span class="line">                                    <span class="comment">// 您可以将自己想要使用的WiFi密码放入引号内</span></span><br><span class="line">                                    <span class="comment">// 如果建立的WiFi不要密码，则在双引号内不要填入任何信息</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);              <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line">  WiFi.softAP(ssid, password);     <span class="comment">// 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。</span></span><br><span class="line">                                   <span class="comment">// 括号中有两个参数，ssid是WiFi名。password是WiFi密码。</span></span><br><span class="line">                                   <span class="comment">// 这两个参数具体内容在setup函数之前的位置进行定义。</span></span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  Serial.print(<span class="string">&quot;Access Point: &quot;</span>);    <span class="comment">// 通过串口监视器输出信息</span></span><br><span class="line">  Serial.println(ssid);              <span class="comment">// 告知用户NodeMCU所建立的WiFi名</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address: &quot;</span>);      <span class="comment">// 以及NodeMCU的IP地址</span></span><br><span class="line">  Serial.println(WiFi.softAPIP());   <span class="comment">// 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="连接到无线局域网示例代码"><a href="#连接到无线局域网示例代码" class="headerlink" title="连接到无线局域网示例代码"></a>连接到无线局域网示例代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NodeMCU无线终端模式连接WiFi</span></span><br><span class="line"><span class="comment">By 太极创客（http://www.taichi-maker.com）</span></span><br><span class="line"><span class="comment">2019-03-11</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">本示例程序用于演示如何使用NodeMCU无线终端模式连接WiFi</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">如需获得更多关于如何使用NodeMCU开发物联网的教程和资料信息</span></span><br><span class="line"><span class="comment">请参考太极创客网站（http://www.taichi-maker.com）</span></span><br><span class="line"><span class="comment">并在首页搜索栏中搜索关键字：物联网</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>        <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid     = <span class="string">&quot;taichi-maker&quot;</span>;      <span class="comment">// 连接WiFi名（此处使用taichi-maker为示例）</span></span><br><span class="line">                                            <span class="comment">// 请将您需要连接的WiFi名填入引号中</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;12345678&quot;</span>;          <span class="comment">// 连接WiFi密码（此处使用12345678为示例）</span></span><br><span class="line">                                            <span class="comment">// 请将您需要连接的WiFi密码填入引号中</span></span><br><span class="line">                                            </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);         <span class="comment">// 启动串口通讯</span></span><br><span class="line">  </span><br><span class="line">  WiFi.begin(ssid, password);                  <span class="comment">// 启动网络连接</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connecting to &quot;</span>);              <span class="comment">// 串口监视器输出网络连接信息</span></span><br><span class="line">  Serial.print(ssid); Serial.println(<span class="string">&quot; ...&quot;</span>);  <span class="comment">// 告知用户NodeMCU正在尝试WiFi连接</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                   <span class="comment">// 这一段程序语句用于检查WiFi是否连接成功</span></span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;      <span class="comment">// WiFi.status()函数的返回值是由NodeMCU的WiFi连接状态所决定的。 </span></span><br><span class="line">    delay(<span class="number">1000</span>);                               <span class="comment">// 如果WiFi连接成功则返回值为WL_CONNECTED                       </span></span><br><span class="line">    Serial.print(i++); Serial.print(<span class="string">&#x27; &#x27;</span>);      <span class="comment">// 此处通过While循环让NodeMCU每隔一秒钟检查一次WiFi.status()函数返回值</span></span><br><span class="line">  &#125;                                            <span class="comment">// 同时NodeMCU将通过串口监视器输出连接时长读秒。</span></span><br><span class="line">                                               <span class="comment">// 这个读秒是通过变量i每隔一秒自加1来实现的。</span></span><br><span class="line">                                               </span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);                          <span class="comment">// WiFi连接成功后</span></span><br><span class="line">  Serial.println(<span class="string">&quot;Connection established!&quot;</span>);   <span class="comment">// NodeMCU将通过串口监视器输出&quot;连接成功&quot;信息。</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:    &quot;</span>);             <span class="comment">// 同时还将输出NodeMCU的IP地址。这一功能是通过调用</span></span><br><span class="line">  Serial.println(WiFi.localIP());              <span class="comment">// WiFi.localIP()函数来实现的。该函数的返回值即NodeMCU的IP地址。</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;                                   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在实际生活中，可能会需要多个wifi进行匹配连接，（例如学校和家里），因此需要创建多个WiFi存储，以下这个代码可以很好的解决这个问题：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">NodeMCU无线终端模式连接WiFi-2</span></span><br><span class="line"><span class="comment">By 太极创客（http://www.taichi-maker.com）</span></span><br><span class="line"><span class="comment">2019-03-11</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">此程序将会控制NodeMCU在当前的网络环境里搜索预先存储好的WiFi。</span></span><br><span class="line"><span class="comment">一旦找到预存的WiFi名称，NodeMCU将会使用预存的密码信息尝试连接该WiFi。</span></span><br><span class="line"><span class="comment">如果同时找到多个预存WiFi，NodeMCU将会尝试连接信号最强的WiFi。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">如需获得更多关于如何使用NodeMCU开发物联网的教程和资料信息</span></span><br><span class="line"><span class="comment">请参考太极创客网站（http://www.taichi-maker.com）</span></span><br><span class="line"><span class="comment">并在首页搜索栏中搜索关键字：物联网</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span>          <span class="comment">// 本程序使用ESP8266WiFi库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFiMulti.h&gt;</span>   <span class="comment">// 本程序使用ESP8266WiFiMulti库</span></span></span><br><span class="line"> </span><br><span class="line">ESP8266WiFiMulti wifiMulti;     <span class="comment">// 建立ESP8266WiFiMulti对象,对象名称是&#x27;wifiMulti&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);            <span class="comment">// 启动串口通讯</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//通过addAp函数存储  WiFi名称       WiFi密码</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker&quot;</span>, <span class="string">&quot;12345678&quot;</span>);  <span class="comment">// 这三条语句通过调用函数addAP来记录3个不同的WiFi网络信息。</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker2&quot;</span>, <span class="string">&quot;87654321&quot;</span>); <span class="comment">// 这3个WiFi网络名称分别是taichi-maker, taichi-maker2, taichi-maker3。</span></span><br><span class="line">  wifiMulti.addAP(<span class="string">&quot;taichi-maker3&quot;</span>, <span class="string">&quot;13572468&quot;</span>); <span class="comment">// 这3个网络的密码分别是123456789，87654321，13572468。</span></span><br><span class="line">                                                <span class="comment">// 此处WiFi信息只是示例，请在使用时将需要连接的WiFi信息填入相应位置。</span></span><br><span class="line">                                                <span class="comment">// 另外这里只存储了3个WiFi信息，您可以存储更多的WiFi信息在此处。</span></span><br><span class="line">                                                </span><br><span class="line">  Serial.println(<span class="string">&quot;Connecting ...&quot;</span>);         <span class="comment">// 通过串口监视器输出信息告知用户NodeMCU正在尝试连接WiFi</span></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;                                 </span><br><span class="line">  <span class="keyword">while</span> (wifiMulti.run() != WL_CONNECTED) &#123;  <span class="comment">// 此处的wifiMulti.run()是重点。通过wifiMulti.run()，NodeMCU将会在当前</span></span><br><span class="line">    delay(<span class="number">1000</span>);                             <span class="comment">// 环境中搜索addAP函数所存储的WiFi。如果搜到多个存储的WiFi那么NodeMCU</span></span><br><span class="line">    Serial.print(<span class="string">&#x27;.&#x27;</span>);                       <span class="comment">// 将会连接信号最强的那一个WiFi信号。</span></span><br><span class="line">  &#125;                                           <span class="comment">// 一旦连接WiFI成功，wifiMulti.run()将会返回“WL_CONNECTED”。这也是</span></span><br><span class="line">                                              <span class="comment">// 此处while循环判断是否跳出循环的条件。</span></span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  Serial.println(<span class="string">&#x27;\n&#x27;</span>);                     <span class="comment">// WiFi连接成功后</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connected to &quot;</span>);            <span class="comment">// NodeMCU将通过串口监视器输出。</span></span><br><span class="line">  Serial.println(WiFi.SSID());              <span class="comment">// 连接的WiFI名称</span></span><br><span class="line">  Serial.print(<span class="string">&quot;IP address:\t&quot;</span>);            <span class="comment">// 以及</span></span><br><span class="line">  Serial.println(WiFi.localIP());           <span class="comment">// NodeMCU的IP地址</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>study</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions 相关教程</title>
    <url>/OLD_BLOG/2022/04/17/GitHub%20Action%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://github.com/features/actions">GitHub Actions</a> 是 GitHub 的<a href="https://www.ruanyifeng.com/blog/2015/09/continuous-integration.html">持续集成服务</a>，于2018年10月<a href="https://github.blog/changelog/2018-10-16-github-actions-limited-beta/">推出</a>。其具有比较强大的功能，方便摸鱼</p>
<span id="more"></span>

<p>持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p>
<p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p>
<p>如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p>
<h1 id="有关配置"><a href="#有关配置" class="headerlink" title="有关配置"></a>有关配置</h1><h2 id="配置Action-自动同步GitHub与Gitee仓库"><a href="#配置Action-自动同步GitHub与Gitee仓库" class="headerlink" title="配置Action 自动同步GitHub与Gitee仓库"></a>配置Action 自动同步GitHub与Gitee仓库</h2><p>参考Action的代码介绍 <a href="https://github.com/marketplace/actions/hub-mirror-action">点我</a></p>
<p>具体应用如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">  <span class="comment"># 加入其方便进行推送仓库</span></span><br><span class="line">  <span class="comment"># 每天早上十点、晚上九点更新仓库内容</span></span><br><span class="line">  <span class="comment"># 使用的UTC时间，中国地区的时间是UTC+8</span></span><br><span class="line">  schedule:</span><br><span class="line">    - cron: <span class="string">&#x27;0 2 * * *&#x27;</span></span><br><span class="line">    - cron: <span class="string">&#x27;0 13 * * *&#x27;</span></span><br><span class="line">name: Update gitee</span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  run:</span><br><span class="line">    name: Sync-GitHub-to-Gitee</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - name: Mirror the Github repos to Gitee.</span><br><span class="line">      uses: Yikun/hub-mirror-action@master</span><br><span class="line">      with:</span><br><span class="line">        src: github/ZHYCarge</span><br><span class="line">        dst: gitee/zhycarge</span><br><span class="line">        dst_key: <span class="variable">$&#123;&#123; secrets.GITEE_PRIVATE_KEY &#125;</span>&#125;</span><br><span class="line">        <span class="comment"># 你的Gitee私钥，需要找到一个可以连接到Gitee的私钥</span></span><br><span class="line">        dst_token:  <span class="variable">$&#123;&#123; secrets.GITEE_TOKEN &#125;</span>&#125;</span><br><span class="line">        <span class="comment">#Gitee的tocken，具体创建方式可百度</span></span><br><span class="line">        <span class="comment">#static_list: &#x27;test&#x27; # 静态名单，只更新里面的东西，其他不管</span></span><br><span class="line">        black_list: <span class="string">&#x27;test&#x27;</span> <span class="comment"># 黑名单，里面的东西不更新，其他的更新</span></span><br><span class="line">        <span class="comment">#white_list: &#x27;&#x27; # 白名单，只更新白名单里的东西</span></span><br><span class="line">        force_update: <span class="literal">false</span> <span class="comment"># 是否强制推送，如果不需要可以关掉【可选参数】</span></span><br><span class="line">        debug: <span class="literal">false</span>	<span class="comment"># debug ?</span></span><br><span class="line">        <span class="comment">#mappings: &#x27;hashes=&gt;hashes_gitee&#x27;# 映射 可以不同步相同的名称</span></span><br></pre></td></tr></table></figure>



<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a></li>
<li><a href="https://github.com/marketplace/actions/hub-mirror-action">Hub Mirror Action</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>Github Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub配置其他域名</title>
    <url>/OLD_BLOG/2021/09/10/GitHub%E9%85%8D%E7%BD%AE%E5%85%B6%E4%BB%96%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于自己有多余的域名，其次感觉github的域名不太好，因此了解一下如何将自己的域名绑定到GitHub pages上</p>
<span id="more"></span>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_34392457/article/details/89115236">GitHub Page绑定自己的域名</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>首先为了绑定域名，我们首先需要有一个github的pages的界面，而这个界面往往需要创建的时候是以<code>用户名.github.io</code>进行创建的，创建之后进入到仓库的设置中，将pages服务进行打开</p>
<p><img src="https://user-images.githubusercontent.com/40520292/132868839-389ee468-6421-46fd-9e21-a9c882da933b.png" alt="image"></p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>我们需要去域名服务商额外分配一个二级域名，这里以阿里云为例：</p>
<p>创建一个CNAME的域名解析，记录值即为<code>用户名.github.io</code></p>
<p>然后回到github的pages服务中，找到<code>Custom domain</code>选项，将其中输入框输入你刚刚创建的二级域名，然后稍等片刻，便发现解析成功</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>受限于域名服务商的服务质量，可能你的域名需要十分钟左右的时间来进行解析，因此请保证每一次修改尝试的时候中间隔开了足够的时间，放置由于DNS的问题导致设置出现问题</p>
<p>如果多次刷新发现还是不行，建议换一个浏览器重新加载，因为浏览器的缓存数据可能对域名进行过保存，但是并未清除掉<br>请注意：如果使用的是GitHub的一键三连，那么需要更新 <code>_config.yml</code> 的相关文件，要不会访问不了<br>本人暂未配置成功，具体原因仍在探索</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop的基本搭建</title>
    <url>/OLD_BLOG/2021/09/23/Hadoop%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试在课下搭建完成<code>hadoop</code>，较为详细的教程</p>
<span id="more"></span>



<h1 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h1><p><a href="https://note.youdao.com/web/#/file/recent/markdown/WEB89df9ee790282cb530f1e68be85e40da/4c44c3b7c9a6ee91c27ec456d9b38bc7">老师的有道云笔记</a></p>
<p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html">老师上课发的链接</a></p>
<p><a href="http://dblab.xmu.edu.cn/blog/2441-2/">软工学子提供的链接，可参考</a><br><a href="https://www.runoob.com/linux/linux-vim.html">Vim的使用方法，不会的必须要看！！！！！！</a>  </p>
<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><ul>
<li>一台主机(云服务器or虚拟机)</li>
</ul>
<p>由于为了省事，就直接买了百度云18元3个月的云服务器（毕竟结束之后就不需要用了）</p>
<p>相关软件准备：</p>
<ul>
<li>ssh(必须)</li>
<li>vim(推荐)</li>
<li>其他在后续需要安装的</li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="主机申请"><a href="#主机申请" class="headerlink" title="主机申请"></a>主机申请</h2><p>申请主机的过程就不叙述了，我的云主机配置如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210923102824100.png" alt="image-20210923102824100"></p>
<h2 id="更换镜像（可选）"><a href="#更换镜像（可选）" class="headerlink" title="更换镜像（可选）"></a>更换镜像（可选）</h2><p>由于有些人使用的是自己的虚拟机，因此可能会出现镜像使用的是官方的镜像，因此下载以及安装速度可能会很慢，甚至会出现无法进行下载的可能。因此对于这种情况，可以考虑更换镜像文件进行切换，更换方式如下：</p>
<p><a href="https://zhycarge.github.io/2021/07/12/ubuntu%E6%8D%A2%E6%BA%90/">Ubuntu换源</a></p>
<h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><p>由于服务器是Ubuntu的，因此使用的是apt的包管理器，因此在使用前需要先更新软件库，否则会导致软件无法进行安装。命令如下：</p>
<p><code>apt update</code>检查是否拥有可更新的包</p>
<p><code>apt upgrade</code>安装更新包</p>
<h2 id="安装友好的交互式shell（推荐）"><a href="#安装友好的交互式shell（推荐）" class="headerlink" title="安装友好的交互式shell（推荐）"></a>安装友好的交互式shell（推荐）</h2><p>由于bash emmm一言难尽。。。因此需要安装一个比较友好的shell来进行替代，推荐两个，新手推荐安装fish：</p>
<ul>
<li>fish</li>
</ul>
<p>安装命令如下：</p>
<p><code>apt install fish</code></p>
<blockquote>
<p>请注意：fish有些语法与bash不通，一些语法在bash中可以运行但是在fish中不可以进行运行，因此在运行此类代码时需要先转换为bash环境进行运行（后面会出现），因此遇到此类问题，代码为斜体*<code>我是个例子</code>*</p>
</blockquote>
<ul>
<li>zsh</li>
</ul>
<p>安装命令如下：</p>
<p><code>apt install zsh</code></p>
<p>推荐配套安装[oh-my-zsh]</p>
<p><code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p>
<p>两款shell的对比：</p>
<ul>
<li><p>fish讲究的是开箱即用，因此基本不需要进行任何配置，直接使用就好，但是有些情况会不支持bash的语法（简单快捷）</p>
</li>
<li><p>zsh的配置要比fish要麻烦许多，但是有oh-my-zsh会好很多，感觉与arch一样，需要自己进行配置，不会与bash脚本产生冲突，配置好的zsh会比fish好用很多（深度发烧友喜爱）</p>
</li>
</ul>
<p>zsh的配置链接：<a href="https://zhuanlan.zhihu.com/p/35283688">oh-my-zsh配置</a></p>
<h2 id="安装vim-推荐"><a href="#安装vim-推荐" class="headerlink" title="安装vim(推荐)"></a>安装vim(推荐)</h2><p>不习惯nano以及vi，嗯.     安装命令如下：</p>
<p><code>apt install vim </code></p>
<h2 id="创建Hadoop用户"><a href="#创建Hadoop用户" class="headerlink" title="创建Hadoop用户"></a>创建Hadoop用户</h2><p>由于root用户是超级用户，并且后续配置可能会涉及到一些变量配置，为了系统安全，推荐创建一个新用户</p>
<ol>
<li>创建用户</li>
</ol>
<p><code>useradd -m hadoop -s /bin/bash</code></p>
<blockquote>
<p>如果配置了其他的shell，在后面的<code>/bin/bash</code>可以换成其他的</p>
</blockquote>
<ol start="2">
<li>设置帐号密码</li>
</ol>
<p><code>passwd hadoop</code></p>
<blockquote>
<p>linux中，密码不会外显，因此直接输入就好</p>
</blockquote>
<ol start="3">
<li>将此用户增加管理员权限</li>
</ol>
<p><code>sudo adduser hadoop sudo</code></p>
<ol start="4">
<li>使用hadoop用户登录</li>
</ol>
<p><code>su - hadoop</code></p>
<p>配置完成之后如下显示：配置完成之后如下显示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210923105214569.png" alt="image-20210923105214569"></p>
<h2 id="安装以及配置Java"><a href="#安装以及配置Java" class="headerlink" title="安装以及配置Java"></a>安装以及配置Java</h2><ol>
<li>安装openjdk-8-jdk</li>
</ol>
<p><code>sudo apt install openjdk-8-jdk</code></p>
<ol start="2">
<li>查看当前java版本</li>
</ol>
<p><code>java -version</code></p>
<ol start="3">
<li>查找OpenJDK的安装路径</li>
</ol>
<p><code>update-alternatives --config java </code></p>
<p>显示如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210923105927066.png" alt="image-20210923105927066"></p>
<p>因此绝对路径为：<code>/usr/lib/jvm/java-8-openjdk-amd64</code></p>
<ol start="4">
<li><p>配置JAVA_HOME 环境变量</p>
<ol>
<li><p><code>sudo vim /etc/profile</code></p>
</li>
<li><p>在开头位置添加如下内容（使用<kbd>i</kbd>进行编辑）： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>之后按<kbd>Esc</kbd>,输入<code>:wq</code>来进行保存退出</p>
</li>
<li><p>让环境变量生效*<code>source /etc/profile</code>*</p>
</li>
</ol>
</li>
<li><p>检查是否配置正常</p>
<ul>
<li><em><code>echo $JAVA_HOME</code></em></li>
<li><em><code>java -version</code></em></li>
<li><em><code>$JAVA_HOME/bin/java -version</code></em></li>
</ul>
<p>如果最后两个指令输出是一样的，则代表配置完成，图片如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210923111140236.png" alt="image-20210923111140236"></p>
</li>
</ol>
<h2 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h2><ol>
<li>下载</li>
</ol>
<p><code>wget https://mirrors.bfsu.edu.cn/apache/hadoop/common/hadoop-3.3.0/hadoop-3.3.0-aarch64.tar.gz</code></p>
<blockquote>
<p>百度云比阿里云要慢好多。。。。</p>
</blockquote>
<ol start="2">
<li>解压<ol>
<li>解压缩：<code>sudo tar -zxvf hadoop-3.3.0-aarch64.tar.gz -C /usr/local/</code></li>
<li>进入目录：<code>cd /usr/local</code></li>
<li>更改文件夹名称：<code>sudo mv  hadoop-3.3.0 hadoop</code></li>
<li>赋权：<code>sudo chown -R hadoop ./hadoop</code></li>
</ol>
</li>
</ol>
<h2 id="配置Hadoop环境"><a href="#配置Hadoop环境" class="headerlink" title="配置Hadoop环境"></a>配置Hadoop环境</h2><p>输入命令<code>vim ~/.bashrc</code></p>
<p>将以下内容添加到文件开头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/local/hadoop</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=$(<span class="variable">$HADOOP_HOME</span>/bin/hadoop classpath):<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure>

<p>执行命令使配置生效</p>
<p><em><code>source ~/.bashrc</code></em></p>
<p>图片如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210923112610429.png" alt="image-20210923112610429"></p>
<h2 id="配置Hadoop独立操作"><a href="#配置Hadoop独立操作" class="headerlink" title="配置Hadoop独立操作"></a>配置Hadoop独立操作</h2><ol>
<li>进入目录 ：<code>cd /usr/local/hadoop</code> </li>
<li>创建文件夹：<code>mkdir input</code></li>
<li>拷贝文件到input：<code>cp etc/hadoop/*.xml input</code></li>
<li>不懂：<code>bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.0.jar grep input output &#39;dfs[a-z.]+&#39;</code></li>
<li>检查输出：<code>cat output/*</code></li>
</ol>
<p>最后输出结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210923113801257.png" alt="image-20210923113801257"></p>
<h2 id="配置Hadoop伪分布式操作"><a href="#配置Hadoop伪分布式操作" class="headerlink" title="配置Hadoop伪分布式操作"></a>配置Hadoop伪分布式操作</h2><ol>
<li><p>修改配置文件<code>vim etc/hadoop/core-site.xml</code></p>
</li>
<li><p>删除掉内部的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>文件结尾添加如下内容：(注意缩进)</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;</span><br><span class="line">        &lt;description&gt;Abase <span class="keyword">for</span> other temporary directories.&lt;/description&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改配置文件<code>vim etc/hadoop/hdfs-site.xml</code></li>
<li>与上一步一样，删除掉前面的内容并在文件结尾添加如下内容：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>
<p><strong>请严格注意格式问题，如果后续出现这两个文件的编译报错，请在保证编码格式正确的前提下重新操作</strong>  </p>
<h2 id="配置ssh无密码登录"><a href="#配置ssh无密码登录" class="headerlink" title="配置ssh无密码登录"></a>配置ssh无密码登录</h2><p>之前尝试不对其进行配置，发现如果不配置则会报错，信息如下:</p>
<p><img src="https://img-blog.csdnimg.cn/20190821100015967.png" alt="img"></p>
<p>因此需要我们进行配置localhost无密码登录</p>
<ol>
<li>首先试验能不能连接(如果直接连接成功就跳过，连不上继续)</li>
</ol>
<p><code>ssh localhost</code></p>
<ol start="2">
<li><p>执行以下命令</p>
<ol>
<li><code>ssh-keygen -t rsa -P &#39;&#39; -f ~/.ssh/id_rsa </code></li>
<li><code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys </code></li>
<li><code>chmod 0600 ~/.ssh/authorized_keys</code></li>
</ol>
</li>
<li><p>之后重新尝试第一个命令，可以的话则配置完成</p>
</li>
</ol>
<p><strong>请注意：ssh配置成功之后，需要退出ssh界面，而不是继续在ssh界面进行配置</strong></p>
<h2 id="Hadoop运行"><a href="#Hadoop运行" class="headerlink" title="Hadoop运行"></a>Hadoop运行</h2><ol>
<li>格式化文件系统：<code>bin/hdfs namenode -format</code></li>
<li>启动进程：<code> sbin/start-dfs.sh</code></li>
</ol>
<p>正常配置之后显示如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210923153254322.png" alt="image-20210923153254322"></p>
<p>浏览器显示如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210923153347687.png" alt="image-20210923153347687"></p>
<p>（如果需要浏览器界面，请在浏览器中输入<code>你的服务器的IP地址:9870</code>[默认]）</p>
<h2 id="运行检查"><a href="#运行检查" class="headerlink" title="运行检查"></a>运行检查</h2><p>使用命令<code>jps</code>对运行起来的<code>Hadoop</code>进行检查，如果成功运行的话会显示以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop@instance-b86q4g5n /u/l/hadoop&gt; jps</span><br><span class="line">6464 Jps                                                                                 </span><br><span class="line">1521 DataNode                                                                             </span><br><span class="line">1666 SecondaryNameNode                                                                   </span><br><span class="line">1428 NameNode  </span><br></pre></td></tr></table></figure>

<p>（端口号可以不一样，但是对应服务要有）</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><h2 id="apt与apt-get区别"><a href="#apt与apt-get区别" class="headerlink" title="apt与apt-get区别"></a>apt与apt-get区别</h2><p><a href="https://www.sysgeek.cn/apt-vs-apt-get/">https://www.sysgeek.cn/apt-vs-apt-get/</a></p>
<h2 id="显示JAVA-HOME-is-not-set-and-could-not-be-found"><a href="#显示JAVA-HOME-is-not-set-and-could-not-be-found" class="headerlink" title="显示JAVA_HOME is not set and could not be found"></a>显示<code>JAVA_HOME is not set and could not be found</code></h2><p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/BABA3EC68E19E7A89A8A385323270682.jpg" alt="BABA3EC68E19E7A89A8A385323270682"></p>
<p>根据老师指引，将<code>JAVA_HOME</code>的目录输入到<code>hadoop-env.sh</code>中，命令如下：</p>
<ol>
<li>进入到hadoop文件夹中:<code>cd /usr/local/hadoop</code></li>
<li>编辑文件：<code>vim etc/hadoop/hadoop-env.sh</code></li>
<li>在编辑文件界面输入<code>/JAVA_HOME</code>，显示如下：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210923152752487.png" alt="image-20210923152752487"></p>
<ol start="4">
<li>在图指针所指位置将自己的<code>JAVA_HOME</code>位置输入进去</li>
</ol>
<p><code>JAVA_HOME</code>的位置查找如下：*<code>echo $JAVA_HOME</code>*<br>例如我的<code>JAVA_HOME</code>如下：<code>/usr/lib/jvm/java-8-openjdk-amd64</code>  </p>
<blockquote>
<p>如果显示还是为空，则重新执行*<code>source /etc/profile</code>*</p>
</blockquote>
<h2 id="9-25更新：出现错误failed-to-start-namenode"><a href="#9-25更新：出现错误failed-to-start-namenode" class="headerlink" title="9-25更新：出现错误failed to start namenode"></a>9-25更新：出现错误<code>failed to start namenode</code></h2><p>如果在配置的过程中出现了如下错误：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210925190804612.png" alt="image-20210925190804612"></p>
<p>那就证明你的<code>core-site</code>的这个文件配置出现问题，建议重新配置此处。</p>
<h2 id="所有配置都完成但是无法访问"><a href="#所有配置都完成但是无法访问" class="headerlink" title="所有配置都完成但是无法访问"></a>所有配置都完成但是无法访问</h2><p>如果遇到这个问题可能你是使用的是阿里云服务器，由于每个服务器的运营商不同，因此可能会导致安全组的配置会有问题，以阿里云的服务器为由：一般只会打开服务器的443(https服务)、22（ssh服务）、21（ftp服务）、80（http服务）因此其他端口均属于关闭状态（即无法通过外网进行访问），因此我们需要对其进行开放端口处理，因此配置如下（以阿里云为例）：</p>
<ol>
<li><p>进入到服务器基础界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210926134207835.png" alt="image-20210926134207835"></p>
</li>
<li><p>选择<code>防火墙</code></p>
</li>
<li><p>点击<code>添加规则</code></p>
</li>
<li><p>在弹出的对话框中输入如下内容（备注可以不输入）</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210926134434816.png" alt="image-20210926134434816"></p>
</li>
<li><p>之后保存便可以</p>
</li>
</ol>
<h2 id="9-27更新：jps命令后无法显示namenode端口"><a href="#9-27更新：jps命令后无法显示namenode端口" class="headerlink" title="9.27更新：jps命令后无法显示namenode端口"></a>9.27更新：jps命令后无法显示namenode端口</h2><p>问题描述：启动进程之后，使用<code>jps</code>命令查看启动情况的时候发现缺少namenode端口</p>
<p>文章链接：<a href="https://blog.csdn.net/u013075024/article/details/103252770">jps命令没有namenode或datanode, 怎么解决？</a></p>
<p>解决办法：</p>
<ol>
<li><p>进入到hadoop目录下:</p>
<p><code>cd /usr/local/hadoop</code></p>
</li>
<li><p>停止hadoop集群：</p>
<p><code>stop-all.sh</code></p>
</li>
<li><p>删除data与logs目录下的文件</p>
<p><code>cd logs</code></p>
<p><code>rm -rf *</code></p>
<p><code>cd ..</code></p>
<p><code>rm -rf tmp</code></p>
</li>
<li><p>重新执行启动操作</p>
<p><code>bin/hdfs namenode -format</code></p>
<p><code>sbin/start-dfs.sh</code></p>
</li>
</ol>
<h1 id="如果在配置完成之后仍然会出现问题的话，请留言或者发送邮件给我"><a href="#如果在配置完成之后仍然会出现问题的话，请留言或者发送邮件给我" class="headerlink" title="如果在配置完成之后仍然会出现问题的话，请留言或者发送邮件给我"></a>如果在配置完成之后仍然会出现问题的话，请留言或者发送邮件给我</h1>]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>远程控制Hadoop</title>
    <url>/OLD_BLOG/2021/11/16/Hadoop%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近事情好多，就没有更新大数据的相关资料，本次内容是使用命令行去控制Hadoop，进行HDFS的编程（java），教你如何打开hadoop的相关配置，实现像老师的Hadoop一样，以及介绍一些关于控制HDFS的API控制命令</p>
<span id="more"></span>



<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/worldchinalee/article/details/80974544">更改连接hadoop的用户名称</a></p>
<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>服务器需要安装</p>
<ul>
<li>ssh</li>
<li>vim</li>
</ul>
<p>服务器之前应配置完之前hadoop系列的东西</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="如何配置Hadoop进行远程操作"><a href="#如何配置Hadoop进行远程操作" class="headerlink" title="如何配置Hadoop进行远程操作"></a>如何配置Hadoop进行远程操作</h2><h3 id="修改hdfs-site-xml文件"><a href="#修改hdfs-site-xml文件" class="headerlink" title="修改hdfs-site.xml文件"></a>修改<code>hdfs-site.xml</code>文件</h3><p>由于在使用中，namenode会向datanode发送一个局域网ip地址，由于发送的是局域网地址，因此在外网环境下，无法对其进行访问，因此需要修改文件中的内容，向文件中增加几行代码，使其发送的是datanode主机的hostname，然后通过后续操作，使其直接指向外网IP地址</p>
<p>针对我自己服务器的编辑为：<code>vim /usrl/local/hadoop/etc/hadoop/hdfs-site.xml</code></p>
<p>(如果没有权限前面加sudo)</p>
<p>在文件内添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.use.datanode.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>配置完成之后，总代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.use.datanode.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="配置主机hostname"><a href="#配置主机hostname" class="headerlink" title="配置主机hostname"></a>配置主机hostname</h3><p>我们需要将主机名称更改为自己的hadoop名称，方便在后续访问主机的时候能够进行访问到</p>
<ul>
<li><code>sudo vim /etc/hostname</code></li>
</ul>
<p>将里面的内容全部删除，更换成<code>hadoop</code>（此处名称可以自行定义，在后续操作中进行修改就行）</p>
<h3 id="关闭服务器端关于namenode的安全模式"><a href="#关闭服务器端关于namenode的安全模式" class="headerlink" title="关闭服务器端关于namenode的安全模式"></a>关闭服务器端关于namenode的安全模式</h3><p>安全模式界面下，无法对namenode进行任何操作，因此我们需要对其进行关闭</p>
<p>在hadoop的根目录下，执行<code>hdfs dfsadmin -safemode leave</code></p>
<h3 id="确保自己的namenode和datanode的id号一致"><a href="#确保自己的namenode和datanode的id号一致" class="headerlink" title="确保自己的namenode和datanode的id号一致"></a>确保自己的namenode和datanode的id号一致</h3><p>由于在实际操作中，namenode 要与 datanode 进行通信，要求两个节点的<code>clusterID</code>要进行一致，因此我们可以通过进入到自己的namenode 与datanode中查看VERSION，对于我自己的机子来讲，在hadoop根目录下输入<code>cat tmp/dfs/name/current/VERSION</code>与<code>cat tmp/dfs/data/current/VERSION</code>对两个版本号进行查看。</p>
<p>其他机子的namenode 和datanode节点需要根据自己的项目设置可以查看。</p>
<p>进入<code>vim /usr/local/hadoop/etc/hadoop/hdfs-site.xml</code>对两个的dir进行查看</p>
<h3 id="修改自己的主机名称（百度云）"><a href="#修改自己的主机名称（百度云）" class="headerlink" title="修改自己的主机名称（百度云）"></a>修改自己的主机名称（百度云）</h3><p>神奇的百度云教会了我一件事情，你自己的主机名在本地的hostname中进行更改，但是在百度云里面（暂且只发现了百度云的事情），你需要进入到百度云控制台，将自己的主机名称进行修改，否则无法生效</p>
<h2 id="在系统本地配置运行环境"><a href="#在系统本地配置运行环境" class="headerlink" title="在系统本地配置运行环境"></a>在系统本地配置运行环境</h2><h3 id="安装java环境"><a href="#安装java环境" class="headerlink" title="安装java环境"></a>安装java环境</h3><p>使用java编译器就需要先提前将java的环境配置成功，本次介绍Java环境为使用Java17，因此如果没有相关环境的需要自行去进行下载</p>
<h3 id="客户端配置host"><a href="#客户端配置host" class="headerlink" title="客户端配置host"></a>客户端配置host</h3><p>此处分windows与linux两种配置方式：</p>
<p>windows：</p>
<p>​    进入到<code>C:\Windows\System32\drivers\etc</code>修改hosts内容，在最后一项添加：</p>
<p>​    <code>127.0.0.1  hadoop   #前面的那项是你自己服务器的ip地址，后面那项是之前设置的那个值</code></p>
<blockquote>
<p>如果无法修改的话，参照这篇文章进行配置<a href="https://jingyan.baidu.com/article/27fa7326509bc246f8271fdf.html">百度经验</a></p>
</blockquote>
<p>linux：</p>
<p>​    <code>sudo vim /etc/hosts</code>修改hosts内容，在最后一项添加：</p>
<p>​    <code>127.0.0.1  hadoop   #前面的那项是你自己服务器的ip地址，后面那项是之前设置的那个值</code></p>
<p>之后配置完成之后尝试在浏览器中输入<code>hadoop:端口号</code>去访问自己的hadoop，端口号默认为9870，如果能正常启动就一切安好，如果不成就下方留言一起讨论2333</p>
<h3 id="切换idea的java环境"><a href="#切换idea的java环境" class="headerlink" title="切换idea的java环境"></a>切换idea的java环境</h3><p>由于需要使用到java17，因此需要更换idea的java编辑器</p>
<p>配置基本如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20211116224035747.png" alt="image-20211116224035747"> </p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>为了配置讲解方便，此处放出老师所给的HDFS的java操作代码，此代码后期可能会同步更新到github中</p>
<p>在讲解中，我用到了代码中编写的<code>Tool</code>库，这个库让HDFS运行代码变得简单了许多，因此下面的讲解将基于此库进行讲解</p>
<p>Tool库包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hadoopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.BlockLocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tools</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(<span class="string">&quot;io.saagie.example.hdfs.Tools&quot;</span>);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Tools</span><span class="params">(String hdfs, Configuration conf)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.hdfsPath = hdfs;</span><br><span class="line">		<span class="built_in">this</span>.conf = conf;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String hdfsPath;</span><br><span class="line">	<span class="keyword">private</span> Configuration conf;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * ����Ŀ¼</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> folder</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mkdirs</span><span class="params">(String folder)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(folder);</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);</span><br><span class="line">		<span class="keyword">if</span> (!fs.exists(path)) &#123;</span><br><span class="line">			fs.mkdirs(path);</span><br><span class="line">			logger.info(<span class="string">&quot;Create: &quot;</span> + folder);</span><br><span class="line">		&#125;</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * �ж��ļ���Ŀ¼�Ƿ����</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(filename);</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span>  fs.exists(path);</span><br><span class="line">		fs.close();</span><br><span class="line">		<span class="keyword">return</span> exists;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * ɾ���ļ���Ŀ¼</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> folder</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rmr</span><span class="params">(String folder)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(folder);</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);</span><br><span class="line">		fs.deleteOnExit(path);</span><br><span class="line">		logger.info(<span class="string">&quot;Delete: &quot;</span> + folder);</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * �������ļ�</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> dst</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rename</span><span class="params">(String src, String dst)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">Path</span> <span class="variable">name1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(src);</span><br><span class="line">		<span class="type">Path</span> <span class="variable">name2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(dst);</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);</span><br><span class="line">		fs.rename(name1, name2);</span><br><span class="line">		logger.info(<span class="string">&quot;Rename: from &quot;</span> + src + <span class="string">&quot; to &quot;</span> + dst);</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * �����ļ�</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> folder</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ls</span><span class="params">(String folder)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(folder);</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);</span><br><span class="line">		FileStatus[] list = fs.listStatus(path);</span><br><span class="line">		logger.info(<span class="string">&quot;ls: &quot;</span> + folder);</span><br><span class="line">		logger.info(<span class="string">&quot;==========================================================&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (FileStatus f : list) &#123;</span><br><span class="line">			System.out.printf(<span class="string">&quot;name: %s, folder: %s, size: %d\n&quot;</span>, f.getPath(),</span><br><span class="line">					f.isDir(), f.getLen());</span><br><span class="line">		&#125;</span><br><span class="line">		logger.info(<span class="string">&quot;==========================================================&quot;</span>);</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * �����ļ�</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createFile</span><span class="params">(String file, String content)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);</span><br><span class="line">		<span class="type">byte</span>[] buff = content.getBytes();</span><br><span class="line">		<span class="type">FSDataOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			os = fs.create(<span class="keyword">new</span> <span class="title class_">Path</span>(file));</span><br><span class="line">			os.write(buff, <span class="number">0</span>, buff.length);</span><br><span class="line">			logger.info(<span class="string">&quot;Create: &quot;</span> + file);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (os != <span class="literal">null</span>)</span><br><span class="line">				os.close();</span><br><span class="line">		&#125;</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * �����ļ���HDFS</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> local</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> remote</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(String local, String remote)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);</span><br><span class="line">		fs.copyFromLocalFile(<span class="keyword">new</span> <span class="title class_">Path</span>(local), <span class="keyword">new</span> <span class="title class_">Path</span>(remote));</span><br><span class="line">		logger.info(<span class="string">&quot;copy from: &quot;</span> + local + <span class="string">&quot; to &quot;</span> + remote);</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * ��HDFS�������ļ���������</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> remote</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> local</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String remote, String local)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remote);</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);</span><br><span class="line">		fs.copyToLocalFile(path, <span class="keyword">new</span> <span class="title class_">Path</span>(local));</span><br><span class="line">		logger.info(<span class="string">&quot;download: from&quot;</span> + remote + <span class="string">&quot; to &quot;</span> + local);</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * �鿴�ļ��е�����</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> remoteFile</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">cat</span><span class="params">(String remoteFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(remoteFile);</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath), conf);</span><br><span class="line">		<span class="type">FSDataInputStream</span> <span class="variable">fsdis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		logger.info(<span class="string">&quot;cat: &quot;</span> + remoteFile);</span><br><span class="line"></span><br><span class="line">		<span class="type">OutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fsdis = fs.open(path);</span><br><span class="line">			IOUtils.copyBytes(fsdis, baos, <span class="number">4096</span>, <span class="literal">false</span>);</span><br><span class="line">			str = baos.toString();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			IOUtils.closeStream(fsdis);</span><br><span class="line">			fs.close();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(str);</span><br><span class="line">		<span class="keyword">return</span> str;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//���ظ����ļ���λ��</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return an array containing hostnames, offset and size of </span></span><br><span class="line"><span class="comment">	 * portions of the given file.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">location</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">folder</span> <span class="operator">=</span> hdfsPath + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="string">&quot;sample.txt&quot;</span>;</span><br><span class="line">		<span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(URI.create(hdfsPath),</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Configuration</span>());</span><br><span class="line">		<span class="type">FileStatus</span> <span class="variable">f</span> <span class="operator">=</span> fs.getFileStatus(<span class="keyword">new</span> <span class="title class_">Path</span>(folder + file));</span><br><span class="line">		BlockLocation[] list = fs.getFileBlockLocations(f, <span class="number">0</span>, f.getLen());</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;File Location: &quot;</span> + folder + file);</span><br><span class="line">		<span class="keyword">for</span> (BlockLocation bl : list) &#123;</span><br><span class="line">			String[] hosts = bl.getHosts();</span><br><span class="line">			<span class="keyword">for</span> (String host : hosts) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;host:&quot;</span> + host);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		fs.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hadoopdemo;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(<span class="string">&quot;io.saagie.example.hdfs.Main&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HDFS</span> <span class="operator">=</span> <span class="string">&quot;hdfs://hadoop:9000/&quot;</span>;</span><br><span class="line">    <span class="comment">//这里的hadoop与上面的host一样</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">		<span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;hadoop&quot;</span>);</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>,HDFS);</span><br><span class="line">        conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>, org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;fs.file.impl&quot;</span>, org.apache.hadoop.fs.LocalFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;dfs.client.use.datanode.hostname&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Tools</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tools</span>(HDFS, conf);</span><br><span class="line">        <span class="keyword">if</span>(tool.exists(<span class="string">&quot;/zhy/1&quot;</span>))</span><br><span class="line">            tool.rmr(<span class="string">&quot;/zhy/1&quot;</span>);</span><br><span class="line">        tool.mkdirs(<span class="string">&quot;/zhy/1&quot;</span>);</span><br><span class="line">        tool.ls(<span class="string">&quot;/zhy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conf</span></span><br><span class="line"><span class="comment">    </span></span><br></pre></td></tr></table></figure>



<h3 id="更新小项"><a href="#更新小项" class="headerlink" title="更新小项"></a>更新小项</h3><p>在github中并未出现的两行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line">properties.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;hadoop&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>由于Hadoop的权限问题，因此有两种方式可以解决此处问题，详情可以参考参考文档的<code>更改连接hadoop的用户名称</code>文章进行解决，或者在上面的示例文件中相同位置加入这两行代码，其中hadoop采用的是你自己服务器端的用户名</p>
<h4 id="解读代码"><a href="#解读代码" class="headerlink" title="解读代码"></a>解读代码</h4><p>通过阅读代码大致可以发现，HDFS的API调用大概会出现<code> Tools tool = new Tools(HDFS, conf);</code>命令之后。因此通过点开tool的java编译，我们可以知道在HDFS的命令控制中，出现了如下的命令：</p>
<h4 id="判断文件夹-文件是否存在"><a href="#判断文件夹-文件是否存在" class="headerlink" title="判断文件夹/文件是否存在"></a>判断文件夹/文件是否存在</h4><ul>
<li><p><code>tool.exists(&quot;文件路径或文件夹路径&quot;)</code></p>
<p>通过执行命令，可以判断在HDFS中，是否存在此文件或者文件夹</p>
</li>
</ul>
<h4 id="创建一个文件夹"><a href="#创建一个文件夹" class="headerlink" title="创建一个文件夹"></a>创建一个文件夹</h4><ul>
<li><p><code>tool.mkdirs(&quot;文件夹路径&quot;);</code></p>
<p><strong>注意：此文件夹创建和系统创建一样，需要层层创建，不然会报错，并且目录下有同名文件夹之后，执行命令不会有任何操作</strong></p>
</li>
</ul>
<h4 id="删除文件-文件夹"><a href="#删除文件-文件夹" class="headerlink" title="删除文件/文件夹"></a>删除文件/文件夹</h4><ul>
<li><p><code>tool.rmr(&quot;文件夹路径&quot;);</code></p>
<p>通过执行命令，可以删除文件/文件夹</p>
<p>注意：此删除命令为linux下的<code>rm -r</code>，因此在删除时，会把路径下所有文件都会删除</p>
</li>
</ul>
<h4 id="更改文件-文件夹名称"><a href="#更改文件-文件夹名称" class="headerlink" title="更改文件/文件夹名称"></a>更改文件/文件夹名称</h4><ul>
<li><p><code>tool.rename(&quot;/zhy/1&quot;,&quot;/zhy/2&quot;);</code></p>
<p>将前者的名字更改成后者</p>
</li>
</ul>
<h4 id="查看文件夹下内容"><a href="#查看文件夹下内容" class="headerlink" title="查看文件夹下内容"></a>查看文件夹下内容</h4><ul>
<li><p><code>tool.ls(&quot;/zhy&quot;);</code></p>
<p>可以输出<code>zhy</code>文件夹下的内容</p>
</li>
</ul>
<h4 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a>创建一个文件</h4><ul>
<li><p><code>tool.createFile();</code></p>
<p>在指定目录下创建一个文件</p>
</li>
</ul>
<p>····</p>
<h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>运行代码之后应该不会出现太多问题，如果有问题请留言联系我，方便进行后续讨论</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>由于配置过程较为困难，因此这里放出了我的hadoop的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoopIP地址：106.13.230.111</span><br><span class="line">hadoop用户名：hadoop</span><br><span class="line">hadoop端口：9870</span><br><span class="line">hdfs端口：9000</span><br></pre></td></tr></table></figure>

<p>由于此服务器为作业所用，所以到博客发布后两个月后，此服务器已经删除，就请各位自己搭建。</p>
<p>如有其他问题，欢迎留言进行讨论</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>使用命令行上传文件到HDFS(Hadoop)</title>
    <url>/OLD_BLOG/2021/09/27/Hadoop%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%9801/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继续配置以及学习相关配置技巧</p>
<span id="more"></span>

<p>老师的第二次作业完成</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://note.youdao.com/ynoteshare/index.html?id=1d632447f73748f5d54993f8b0e95361&type=note&_time=1632703420005">老师的云笔记</a></p>
<p><a href="">官方帮助文档</a></p>
<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><p>需要完成前者的配置过程<a href="https://zhycarge.github.io/2021/09/23/Hadoop%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/#more">这个</a>（如果访问过慢可以将网址中的github更换成gitee）（对于第二个配置自己服务器而言）<br>或者需要电脑上拥有putty等其他ssh连接软件  </p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="完成老师的任务（必做）"><a href="#完成老师的任务（必做）" class="headerlink" title="完成老师的任务（必做）"></a>完成老师的任务（必做）</h2><p>过程比较简单，因此相对内容较少</p>
<h3 id="自己电脑上需要完成的"><a href="#自己电脑上需要完成的" class="headerlink" title="自己电脑上需要完成的"></a>自己电脑上需要完成的</h3><p>使用putty连接到老师的服务器</p>
<p>地址：<code>39.105.6.205</code></p>
<p>用户名：<code>hadoop</code></p>
<p>密码：<code>hadoop01</code></p>
<h3 id="在老师服务器上需完成的"><a href="#在老师服务器上需完成的" class="headerlink" title="在老师服务器上需完成的"></a>在老师服务器上需完成的</h3><ol>
<li><p>进入到hadoop的目录：</p>
<p><code>cd /usr/local/hadoop/</code></p>
</li>
<li><p>执行以下命令来创建一个自己的Hadoop目录（以学号为例）：</p>
<p><code>hadoop fs -mkdir /1900301500</code></p>
</li>
<li><p>在hadoop用户的家目录下面创建一个文件：</p>
<p><code>vim ~/1900301500姓名</code></p>
<p>直接在打开的界面中输入<code>:wq</code>进行保存退出</p>
</li>
<li><p>检查一下是不是目录下有这个文件：</p>
<p><code>ls ~/</code></p>
</li>
<li><p>将这个文件上传到自己的Hadoop目录下面：</p>
<p><code>hadoop fs -put ~/1900301500姓名 /1900301500</code></p>
</li>
<li><p>删除这个文件：</p>
<p><code>rm ~/19003015300姓名</code></p>
</li>
<li><p>之后打开浏览器输入<code>39.105.6.205:9870</code>按照下面的点击顺序查看是否完成</p>
</li>
</ol>
<p><kbd>Utilities</kbd>—&gt;<kbd>Browse the file system</kbd></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo//image-20210927140859323.png" alt="image-20210927140859323"></p>
<p>整体操作步骤以及终端反馈内容如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo//image-20210927141016128.png" alt="image-20210927141016128"></p>
<h2 id="创建一个文件夹（自己服务器的操作）（可不做）"><a href="#创建一个文件夹（自己服务器的操作）（可不做）" class="headerlink" title="创建一个文件夹（自己服务器的操作）（可不做）"></a>创建一个文件夹（自己服务器的操作）（可不做）</h2><ol>
<li><p>首先进入到自己的Hadoop目录：</p>
<p><code>cd /usr/local/hadoop</code></p>
</li>
<li><p>然后执行以下命令来创建一个自己的Hadoop目录(后面的文件夹名字可以自定义)：</p>
<p><code>bin/hadoop fs -mkdir /test </code></p>
</li>
<li><p>尝试将一个文件复制到自己的Hadoop目录下</p>
<p><code>bin/hadoop fs -put ~/hadoop-3.3.0-aarch64.tar.gz /text</code></p>
<p>过程展示如下：</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo//image-20210927093804615.png" alt="image-20210927093804615"></p>
<p>之后通过相关点击便可以实现完成</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo//image-20210927094051303.png" alt="image-20210927094051303"></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="bin-hadoop与hadoop指令区别"><a href="#bin-hadoop与hadoop指令区别" class="headerlink" title="bin/hadoop与hadoop指令区别"></a><code>bin/hadoop</code>与<code>hadoop</code>指令区别</h2><p>不知道老师进行了别的配置还是由于其他原因，因此使用hadoop命令的时候在自己服务器上使用<code>hadoop</code>会出现没有命令的情况，因此需要将其更改为<code>bin/hadoop</code>进行使用，也可以使用<code>alias</code>命令进行设置操作快捷键</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>如果配置过程中出现什么问题，留言或者私聊我</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客支持Latex语法</title>
    <url>/OLD_BLOG/2022/04/09/Hexo%E5%8D%9A%E5%AE%A2%E6%94%AF%E6%8C%81Latex%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于在学习以及后续的使用过程中，需要用到 <code>LaTex</code>的公式书写，但是<code>hexo</code>博客自身并不支持渲染 <code>LaTex</code>数学公式，因此需要进行配置。</p>
<span id="more"></span>



<h2 id="相关博客"><a href="#相关博客" class="headerlink" title="相关博客"></a>相关博客</h2><ul>
<li><a href="https://www.codewoody.com/posts/20215/">Hexo+Next: 使用 Latex 公式</a></li>
<li><a href="https://pxxyyz.com/posts/hexo-problem/">GitHub Actions-pandoc</a></li>
</ul>
<h2 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h2><ul>
<li>搭建使用 <code>GitHub action</code></li>
<li>使用<code>hexo</code>博客系统</li>
<li>使用<code>next</code>主题</li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>由于此博文系统使用的是<code>GitHub Action</code>进行的自动更新管理，因此在后面配置中遇到了其他问题，后面介绍</p>
<p>Next 支持<code>mathjax</code>和<code>katex</code>两种渲染方式，其中<code>katex</code>的速度更快，但是对于 <code>Latex</code> 的支持有一定的限制。所以除非你的博客数量实在是过于庞大，不然就可以直接使用<code>mathjax</code>。</p>
<p><code>mathjax</code>可以选用下面两种渲染引擎的中的任一一种</p>
<ul>
<li><code>hexo-renderer-kramed</code>（在查找中发现此引擎并不推荐，因此后续演示的时候使用下者）</li>
<li><code>hexo-render-pandoc</code></li>
</ul>
<p>以<code>hexo-render-pandoc</code>为例，由于博客系统最终会重新部署到<code>Github Action</code>中，因此不进行教授部署其他服务器的教程，如有需要，可以参考 <a href="https://www.codewoody.com/posts/20215/">博文</a></p>
<p>使用传统方法安装 <code>pandoc</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: Install Pandoc</span><br><span class="line">  run: |</span><br><span class="line">  <span class="comment"># install pandoc</span></span><br><span class="line">  curl -s -L https://github.com/jgm/pandoc/releases/download/2.9.2/pandoc-2.9.2-linux-amd64.tar.gz | tar xvzf - -C <span class="variable">$RUNNER_TOOL_CACHE</span>/</span><br></pre></td></tr></table></figure>



<p>安装完成之后将 <code>pandoc</code>加入路径中，并对博文进行部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: Hexo Generate</span><br><span class="line">  run: |</span><br><span class="line">    <span class="comment"># add pandoc to PATH</span></span><br><span class="line">    <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$RUNNER_TOOL_CACHE</span>/pandoc-2.9.2/bin&quot;</span></span><br><span class="line">    <span class="built_in">rm</span> -f .yarnclean</span><br><span class="line">    yarn --frozen-lockfile --ignore-engines --ignore-optional --non-interactive --silent --ignore-scripts --production=<span class="literal">false</span></span><br><span class="line">    <span class="built_in">rm</span> -rf ./public</span><br><span class="line">    yarn run hexo clean</span><br><span class="line">    yarn run hexo generate</span><br></pre></td></tr></table></figure>

<p>之后我们需要对<code>Next</code>的主题配置进行修改：</p>
<p>编辑<code>_config.yml</code></p>
<p>找到 <code>math</code>一行</p>
<p>将其修改为如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  per_page: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  mathjax:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    mhchem: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>请注意： <code>per_page</code> 是对每一个界面都尝试进行公式渲染，但是这样对于博文过多的博客网站来说是一种极大的时间以及应用开销，因此选项请默认保持 <code>true</code>，在对于需要公式渲染的界面中的title加入：<code>mathjax: true</code>即可</p>
<p><code>mhchem</code>则是用来展示化学公式的渲染工具（我一个计算机学子应该用不到化学公式吧阿巴阿巴</p>
<p>至此，配置完成</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客同时部署github与gitee</title>
    <url>/OLD_BLOG/2021/09/26/Hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2github%E4%B8%8Egitee/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="好像密码不正确呢？再试试吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4539f476b1089215f330ca4824449fd5aeec15977c55d1e787767fc3ea0e853e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">输入正确密码查看正确文章</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/OLD_BLOG/lib/hbe.js"></script><link href="/OLD_BLOG/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib模块的使用</title>
    <url>/OLD_BLOG/2021/07/27/Matplotlib%E6%A8%A1%E5%9D%97%E7%BB%98%E5%88%B6%E5%9B%BE%E5%83%8F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试根据b站大佬来扩充自己的知识面</p>
<p>使用Matplotlib模块来实现图像的绘制（基础）</p>
<span id="more"></span>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1QJ411W7SS?p=17">B站视频</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">y = np.array([<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>])</span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;blue&#x27;</span>)  <span class="comment"># 绘制折线图 [参数1： x轴坐标 参数2： y轴坐标 参数3：颜色]</span></span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;b&#x27;</span>, lw=<span class="number">5</span>)  <span class="comment"># [参数4： 线条宽度]</span></span><br><span class="line"><span class="comment"># 绘图分为折线、 饼状、柱状图</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">y = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">plt.bar(x, y, <span class="number">0.5</span>, alpha=<span class="number">1</span>, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment"># 绘制柱状图[参数1： x轴坐标 参数2：y轴坐标 参数3： 柱状图宽度比例 参数4： 透明度 参数5： 颜色]</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>代码运行结果如下：</p>
<p><img src="/home/zhycarge/.config/Typora/typora-user-images/image-20210727163647412.png" alt="image-20210727163647412"></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="在pycharm中没有看到所显示的图"><a href="#在pycharm中没有看到所显示的图" class="headerlink" title="在pycharm中没有看到所显示的图"></a>在pycharm中没有看到所显示的图</h2><p>在新版pycharm中，图像显示政策进行了修改，在新版界面下，图片显示将出现在<code>Sciview</code>里面，但是我们也可以将其调整出来，调整方法如下：</p>
<p><kbd> File</kbd>—&gt;<kbd>Settings</kbd>—&gt;<kbd>Tools</kbd>—&gt;<kbd> Python Scientific</kbd></p>
<p>之后将<code>Show plots in toolwindow</code>勾选的选项关闭即可</p>
<h2 id="发现没有图像显示"><a href="#发现没有图像显示" class="headerlink" title="发现没有图像显示"></a>发现没有图像显示</h2><p>根据b站视频所敲，但是并没有图像显示，查了一下发现在<code>jupyter</code>中，不使用show方法便可以进行显示，但是在pycharm中，需要使用show方法进行显示</p>
]]></content>
      <categories>
        <category>study</category>
        <category>视觉</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>atplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Numpy模块操作矩阵</title>
    <url>/OLD_BLOG/2021/07/27/Numpy%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试根据b站大佬来扩充自己的知识面</p>
<p>使用Numpy模块来实现对矩阵的基本运算以及矩阵元素的基本查找</p>
<span id="more"></span>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1QJ411W7SS?p=17">B站视频</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">data2 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(data1)    <span class="comment"># 打印矩阵内容</span></span><br><span class="line"><span class="built_in">print</span>(data2)    <span class="comment"># 打印矩阵内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data1.shape, data2.shape)  <span class="comment"># 打印矩阵维度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.zeros([<span class="number">2</span>, <span class="number">3</span>]))     <span class="comment"># 打印一个两行三列的空矩阵</span></span><br><span class="line"><span class="built_in">print</span>(np.ones([<span class="number">2</span>, <span class="number">2</span>]))      <span class="comment"># 打印一个两行两列的1矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现矩阵的数据更改</span></span><br><span class="line">data2[<span class="number">1</span>, <span class="number">0</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(data2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现矩阵数据的查找</span></span><br><span class="line"><span class="built_in">print</span>(data2[<span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># 或者是下面这个</span></span><br><span class="line"><span class="built_in">print</span>(data2[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵的基本运算</span></span><br><span class="line">data3 = np.ones([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(data3*<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(data3/<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(data3+<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(data3-<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵的加法乘法</span></span><br><span class="line">data4 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(data3+data4)  <span class="comment"># 对应元素相加</span></span><br><span class="line"><span class="built_in">print</span>(data3 * data4)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>运行结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[1 2 3 4 5]</span><br><span class="line">[[1 2]</span><br><span class="line"> [3 4]]</span><br><span class="line">(5,) (2, 2)</span><br><span class="line">[[0. 0. 0.]</span><br><span class="line"> [0. 0. 0.]]</span><br><span class="line">[[1. 1.]</span><br><span class="line"> [1. 1.]]</span><br><span class="line">[[1 2]</span><br><span class="line"> [5 4]]</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">[[2. 2. 2.]</span><br><span class="line"> [2. 2. 2.]]</span><br><span class="line">[[0.33333333 0.33333333 0.33333333]</span><br><span class="line"> [0.33333333 0.33333333 0.33333333]]</span><br><span class="line">[[4. 4. 4.]</span><br><span class="line"> [4. 4. 4.]]</span><br><span class="line">[[-2. -2. -2.]</span><br><span class="line"> [-2. -2. -2.]]</span><br><span class="line">[[2. 3. 4.]</span><br><span class="line"> [5. 6. 7.]]</span><br><span class="line">[[1. 2. 3.]</span><br><span class="line"> [4. 5. 6.]]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>study</category>
        <category>视觉</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>tensorflow</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Nvidia Nano基础安装</title>
    <url>/OLD_BLOG/2022/01/07/Nvidia%20Nano%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习一下嵌入式设备<code>Nano</code></p>
<span id="more"></span>

<p>由于经费有限，使用的是Nano的2GB版本</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.nvidia.cn/zh-cn/embedded/downloads">Nano官方镜像包</a></li>
<li><a href="https://developer.nvidia.cn/embedded/learn/get-started-jetson-nano-2gb-devkit#intro">Nano官方教程</a></li>
</ul>
<h2 id="什么是Nano？"><a href="#什么是Nano？" class="headerlink" title="什么是Nano？"></a>什么是Nano？</h2><blockquote>
<p>NVIDIA® Jetson Nano™ 2GB 开发者套件是学习、构建和教授 AI 和机器人 – 的理想之选。专为创造者打造，定价亲民。伴随熟悉的 Linux 环境、易于学习的教程以及由活跃社区打造的现成开源项目，该套件是边做边学的完美工具。</p>
</blockquote>
<h1 id="安装镜像包"><a href="#安装镜像包" class="headerlink" title="安装镜像包"></a>安装镜像包</h1><p>从官网下载Nano官方镜像包，选择</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220107183521978.png" alt="image-20220107183521978"></p>
<p>由于是国外网站，因此提供一个国内地址方便下载<a href="https://datum1.oss-cn-hangzhou.aliyuncs.com/img/jetson-nano-2gb-jp46-sd-card-image.zip">点我下载Nano2GB安装包{版本4.6}</a></p>
<p>下载完成之后，我们需要将镜像文件烧录到SD卡中，使用工具<code>Win32DiskImager_v1.0</code>进行烧录<a href="https://datum1.oss-cn-hangzhou.aliyuncs.com/Tools/%E7%83%A7%E5%BD%95%E7%A8%8B%E5%BA%8F/Win32DiskImager_v1.0.exe">下载链接</a></p>
<p>在烧录完成之后，在本地电脑中会出现多个U盘盘符，不需要管，直接退出U盘即可</p>
<h1 id="Nano的基本配置"><a href="#Nano的基本配置" class="headerlink" title="Nano的基本配置"></a>Nano的基本配置</h1><p>按照<a href="https://developer.nvidia.cn/embedded/learn/get-started-jetson-nano-2gb-devkit#intro">官方教程</a>来，在借助QQ翻译的同时，问题基本上可以解决，本文不再赘述，如有所需，请评论联系我，我会在评论中给予解决方法</p>
<p>如果使用的是命令行配置，在配置完成之后应满足在如截图所示即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220107195711527.png" alt="image-20220107195711527"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220107195821784.png" alt="image-20220107195821784"></p>
<p>之后便可以进行下一步配置</p>
<h1 id="Nano的基本设置（命令行）"><a href="#Nano的基本设置（命令行）" class="headerlink" title="Nano的基本设置（命令行）"></a>Nano的基本设置（命令行）</h1><p><strong>以下内容请保证在<code>nano</code>联网状态下使用</strong></p>
<h2 id="更新apt源"><a href="#更新apt源" class="headerlink" title="更新apt源"></a>更新apt源</h2><p>由于<code>Ubuntu</code>系统属于国外，如果使用外网地址来进行更新会面临网速问题，因此需要更换成国内源</p>
<p>与其他<code>Ubuntu</code>系统换源一样</p>
<ol>
<li><p>备份原先的文件</p>
<p><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.back</code></p>
</li>
<li><p>修改原先的文件</p>
<p><code>sudo vim /etc/apt/sources.list</code></p>
</li>
<li><p>将里面的内容全部删除，并将下述内容复制进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main multiverse restricted universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main multiverse restricted universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main multiverse restricted universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main multiverse restricted universe</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main multiverse restricted universe</span><br></pre></td></tr></table></figure></li>
<li><p>使用命令更新软件列表</p>
<p><code>sudo apt update</code></p>
</li>
</ol>
<p><strong>注意：Nano属于arm架构，因此需要确定好架构类型进行选择，防止出现依赖问题</strong></p>
<h2 id="安装fish（选配）"><a href="#安装fish（选配）" class="headerlink" title="安装fish（选配）"></a>安装fish（选配）</h2><p>为了更好敲命令，防止对某些命令不熟悉导致出错，可以考虑安装<code>fish</code>或其他。</p>
<p><strong>请注意：fish部分命令可能会与bash产生冲突，如果出现冲突请在bash环境下运行</strong></p>
<p>安装：<code>sudo apt install fish</code></p>
<p>进入时直接输入fish即可</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>至此，完成Nano的基础配置</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>nano</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux添加swap分区</title>
    <url>/OLD_BLOG/2021/11/30/Linux%E6%B7%BB%E5%8A%A0swap%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于在实际的使用过程中，可能会出现磁盘空间充足而内存不够的现象，为了降低自身内存使用量，充分利用多余的磁盘空间，我们可以创建一个swap分区，让其与内存一同进行使用，降低系统总体内存占用率</p>
<span id="more"></span>

<h1 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h1><h2 id="创建一个用于交换分区的文件"><a href="#创建一个用于交换分区的文件" class="headerlink" title="创建一个用于交换分区的文件"></a>创建一个用于交换分区的文件</h2><p>由于Linux系统基本上都是以文件的形式进行交互的，因此创建虚拟内存，我们应当先创建一个交换分区的文件</p>
<p><code>dd if=/dev/zero of=/mnt/swap bs=1M count=1024</code></p>
<p>其中bs为block_size，count为number_of_block</p>
<p>bs和count可以进行根据自己所需进行更改，现在例程中是创建一个1M*1024的文件,文件路径为：<code>/mnt/swap</code></p>
<h2 id="格式化分区文件"><a href="#格式化分区文件" class="headerlink" title="格式化分区文件"></a>格式化分区文件</h2><p><code>sudo mkswap /mnt/swap</code></p>
<h2 id="立即启用交换分区文件"><a href="#立即启用交换分区文件" class="headerlink" title="立即启用交换分区文件"></a>立即启用交换分区文件</h2><p><code>sudo swapon /mnt/swap</code></p>
<blockquote>
<p>如果在/etc/rc.local中有swapoff -a 需要修改为swapon -a</p>
</blockquote>
<h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><p>在<code>/etc/fstab</code>中，添加如下内容：</p>
<p><code>/mnt/swap swap swap defaults 0 0</code></p>
<blockquote>
<p>请注意：这个不需要加前缀uuid，直接添加如上内容就可以</p>
</blockquote>
<h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p>执行完成之后，输入<code>free -h </code>可以查看运行效果</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>如有其他问题，欢迎留言</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Termux的基本介绍</title>
    <url>/OLD_BLOG/2021/10/30/Termux%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于电脑的种种不方便，并不会有向手机或者平板一样比较好的便携性，因此在此处记录一个关于Termux即手机终端的一款APP</p>
<span id="more"></span>

<h1 id="参考笔记"><a href="#参考笔记" class="headerlink" title="参考笔记"></a>参考笔记</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/termux/">清华源介绍</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/95865982">知乎笔记的介绍</a></p>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>由于之前写过了，但是没有保存。。。就。。。</p>
<p>就离谱，因此仅仅粘贴链接，如果有其他人看到了并且需要帮忙的，请留言</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>Termux</tag>
        <tag>water</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql数据库学习</title>
    <url>/OLD_BLOG/2022/03/22/Postgresql%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试记录一下自己关于学习postgresql的一些心路旅程</p>
<span id="more"></span>

<p><strong>请注意：如果你自身对Linux系统不太了解，请不要尝试安装Postgresql，而是转向学习Mysql</strong></p>
<p>Postgresql的安装很有可能给新手小白的服务器遭受到网络挖矿病毒的侵扰（深有体会），因此需要对Linux有一定的基础才可进行继续学习</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p>
<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><ul>
<li>硬件：阿里云ECS 1核2G</li>
<li>软件：Ubuntu20.04 64位</li>
</ul>
<h2 id="相关参考文献"><a href="#相关参考文献" class="headerlink" title="相关参考文献"></a>相关参考文献</h2><ul>
<li><a href="https://www.postgresql.org/">Postgresql官方网站</a></li>
<li><a href="https://www.lanqiao.cn/courses/2712/learning/?id=199464">数据库学习课程</a></li>
<li><a href="http://www.postgres.cn/docs/9.4/auth-pg-hba-conf.html">pg_hba.conf文件详解</a></li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="安装你的Postgresql"><a href="#安装你的Postgresql" class="headerlink" title="安装你的Postgresql"></a>安装你的Postgresql</h2><p>根据<a href="https://www.postgresql.org/download/linux/ubuntu/">官网教程</a>所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220322104525984.png" alt="image-20220322104525984"></p>
<p>因此，安装流程如下：</p>
<ol>
<li><p>创建文件存储库配置：</p>
<p><code>sudo sh -c &#39;echo &quot;deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&quot; &gt; /etc/apt/sources.list.d/pgdg.list&#39;</code></p>
</li>
<li><p>导入存储库签名密钥：</p>
<p><code>wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</code></p>
</li>
<li><p>更新apt软件源</p>
<p><code>sudo apt update</code></p>
</li>
<li><p>下载安装Postgresql</p>
<p><code>sudo apt -y install postgresql</code></p>
</li>
</ol>
<blockquote>
<p>如果你需要的并不是最新版的Postgresql，则可以通过输入 <code>postgresql-12</code>来替换掉上文提到的postgresql进行指定版本安装</p>
</blockquote>
<p>至此，数据库便已经安装到你的服务器上了</p>
<h2 id="进入到你的Postgresql中"><a href="#进入到你的Postgresql中" class="headerlink" title="进入到你的Postgresql中"></a>进入到你的Postgresql中</h2><p>有一个很好的命令可以去查看你的数据库是否处于运行状态：</p>
<p><code>sudo systemctl status postgresql</code></p>
<p>当其显示为绿色的时候你的数据库便处在运行当中</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220322110434111.png" alt="image-20220322110434111"></p>
<p>因此，只需要输入：</p>
<p><code>sudo -u postgres psql</code>便可成功进入到数据库中</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220322110522926.png" alt="image-20220322110522926"></p>
<blockquote>
<p>命令下面的那条语句表示我没有权限进入到/root目录中，可以不需要管</p>
</blockquote>
<p>至此，你便进入到了数据库中，并可以进行下一步操作</p>
<h2 id="远程访问你的数据库"><a href="#远程访问你的数据库" class="headerlink" title="*远程访问你的数据库"></a>*远程访问你的数据库</h2><p>在实际环境中，你的数据库可能不仅仅供自身内部访问，也可能需要通过外部访问来获取你的数据或者进一步调配，Postgresql中默认关闭远程访问权限，因此需要进行相关操作，将其开启远程访问，方便后续操作</p>
<p><strong>为了防止数据库容易遭到入侵，因此这里额外创建一个账户，并为其配置远程访问渠道</strong></p>
<ol>
<li><p>通过上述步骤进入到你的数据库中去</p>
</li>
<li><p>创建一个新的用户，密码为<code>1234</code>这里用test去表示：</p>
<p><code>create user test with password &#39;1234&#39;;</code></p>
</li>
<li><p>创建一个数据库，并将其划分到它的管辖中去：</p>
<p><code>CREATE DATABASE testdb OWNER test;</code></p>
<p><code> GRANT ALL PRIVILEGES ON DATABASE testdb TO test;</code></p>
</li>
<li><p>退出数据库，进入后续配置环节：</p>
<p><code>\q</code></p>
</li>
<li><p>在linux中创建一个普通账户，用户名与数据库创建的同名：</p>
<p><code>sudo adduser test</code></p>
<p><code>sudo passwd test</code></p>
<p>:question:不确定是否密码要求一致，这里暂时不进行验证，如果后续有留言想要知道，再去验证解决</p>
</li>
<li><p>修改配置文件使其支持远程访问（以下内容讲解简化）</p>
<ol>
<li><p><code>cd /etc/postgresql/12/main/</code></p>
</li>
<li><p><code>vim postgresql.conf</code></p>
</li>
<li><p>找到大概第60行中的 <code>listen_addresses = &#39;localhost&#39; </code>，将其更改为：<code>listen_addresses = &#39;*&#39;</code> </p>
<p>让数据库监听所有IP地址的访问信息（如果为了安全，在确保IP地址一定的情况下，可以直接更改为相应的IP地址即可）</p>
</li>
<li><p>修改同文件夹下的<code>pg_hba.conf</code>文件，在文件第一行添加如下 内容:</p>
<p><code>host   all       all       0.0.0.0/0        md5</code></p>
<p>(并不推荐⬆)(推荐⬇)</p>
<p><code>host   all       test       0.0.0.0/0        md5</code></p>
<p><em>允许过多的用户进行访问可能会出现问题，因此不建议</em></p>
<p>内容讲解</p>
<table>
<thead>
<tr>
<th>TYPE</th>
<th>DATABASE</th>
<th>USER</th>
<th>ADDRESS</th>
<th>METHOD</th>
</tr>
</thead>
</table>
<p>type【连接方式】</p>
<ul>
<li><p>local</p>
<p>这条记录匹配企图通过 Unix 域套接字进行的连接。没有这种类型的记录，就不允许 Unix 域套接字的连接。</p>
</li>
<li><p>host</p>
<p>这条记录匹配企图通过 TCP/IP 进行的连接。<code>host</code>记录匹配 SSL和非SSL的连接请求。</p>
</li>
<li><p>hostssl</p>
<p>这条记录匹配企图使用 TCP/IP 的 SSL 连接。但必须是使用SSL加密的连接。</p>
</li>
<li><p>hostnossl</p>
<p>这条记录与<code>hostssl</code>行为相反：它只匹配那些在 TCP/IP 上不使用SSL的连接请求。</p>
</li>
</ul>
<p>database【声明记录所匹配的数据库名称】</p>
<ul>
<li><p>all</p>
<p>匹配所有的数据库</p>
</li>
<li><p>sameuser</p>
<p>如果被请求的数据库和请求的用户同名，则匹配</p>
</li>
<li><p>samerole</p>
<p>请求的用户必须是一个与数据库同名的角色中的成员</p>
</li>
<li><p>replication</p>
<p>如果请求一个复制链接， 则匹配（注意复制链接不表示任何特定的数据库）。{在其它情况里，这就是一个特定的 PostgreSQL数据库名字。可以通过用逗号分隔的方法声明多个数据库， 也可以通过前缀<code>@</code>来声明一个包含数据库名的文件。}</p>
</li>
</ul>
<p>user【为这条记录声明所匹配的数据库用户】</p>
<ul>
<li><p>all</p>
<p>表示匹配所有用户</p>
</li>
<li><p>其他</p>
<p>否则，此值就是特定数据库用户的名字或者是一个前缀<code>+</code>的组名称</p>
</li>
</ul>
<p>……相关内容请访问：<a href="http://www.postgres.cn/docs/9.4/auth-pg-hba-conf.html#:~:text=%E5%90%8D%E7%9A%84%E6%96%87%E4%BB%B6%E3%80%82-,user,-%E4%B8%BA%E8%BF%99%E6%9D%A1">pg_hba.conf中文手册</a></p>
</li>
</ol>
</li>
</ol>
<p>至此，在第三方软件或者其他机器上使用数据库IP、新创建的用户名及密码，便可以连接到数据库中进行访问创建</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>随着后续程序的完善以及学习，相关内容会继续更新，如需其他方面的知识，欢迎留言催更</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Zotero在word中建立引用超链接</title>
    <url>/OLD_BLOG/2022/04/19/Zotero_word%E4%B8%AD%E5%BB%BA%E7%AB%8B%E8%B6%85%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于在实际使用过程中，发现在word中插入引用并不能正常的使用超链接进行跳转，因此在网上搜索了一下，得到了如下解决方法：</p>
<span id="more"></span>



<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="编辑宏"><a href="#编辑宏" class="headerlink" title="编辑宏"></a>编辑宏</h2><p>以<code>word2019</code>为例：按顺序点击如下内容：<kbd>视图</kbd>→<kbd>宏</kbd>→<kbd>查看宏</kbd></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220419095451217.png" alt="image-20220419095451217"></p>
<p>点击<kbd>创建</kbd></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220419095532390.png" alt="image-20220419095532390"></p>
<p>之后进入到编辑框中，在如图所示位置替换全部代码，并将宏名称保存为 <code>ZoteroLinkCitation</code>（其实名字咋样都可以，方便辨认就行）</p>
<details>
    <summary>代码部分</summary>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Public Sub ZoteroLinkCitation()</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27; get selected area (if applicable)</span></span><br><span class="line"><span class="string">    Dim nStart&amp;, nEnd&amp;</span></span><br><span class="line"><span class="string">    nStart = Selection.Start</span></span><br><span class="line"><span class="string">    nEnd = Selection.End</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#x27;</span> toggle screen updating</span><br><span class="line">    Application.ScreenUpdating = False</span><br><span class="line">    </span><br><span class="line"><span class="string">&#x27; define variables</span></span><br><span class="line"><span class="string">    Dim title As String</span></span><br><span class="line"><span class="string">    Dim titleAnchor As String</span></span><br><span class="line"><span class="string">    Dim style As String</span></span><br><span class="line"><span class="string">    Dim fieldCode As String</span></span><br><span class="line"><span class="string">    Dim numOrYear As String</span></span><br><span class="line"><span class="string">    Dim pos&amp;, n1&amp;, n2&amp;, n3&amp;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ActiveWindow.View.ShowFieldCodes = True</span></span><br><span class="line"><span class="string">    Selection.Find.ClearFormatting</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&#x27;</span> find the Zotero bibliography</span><br><span class="line">    With Selection.Find</span><br><span class="line">        .Text = <span class="string">&quot;^d ADDIN ZOTERO_BIBL&quot;</span></span><br><span class="line">        .Replacement.Text = <span class="string">&quot;&quot;</span></span><br><span class="line">        .Forward = True</span><br><span class="line">        .Wrap = wdFindContinue</span><br><span class="line">        .Format = False</span><br><span class="line">        .MatchCase = False</span><br><span class="line">        .MatchWholeWord = False</span><br><span class="line">        .MatchWildcards = False</span><br><span class="line">        .MatchSoundsLike = False</span><br><span class="line">        .MatchAllWordForms = False</span><br><span class="line">    End With</span><br><span class="line">    Selection.Find.Execute</span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27; add bookmark for the Zotero bibliography</span></span><br><span class="line"><span class="string">    With ActiveDocument.Bookmarks</span></span><br><span class="line"><span class="string">        .Add Range:=Selection.Range, Name:=&quot;Zotero_Bibliography&quot;</span></span><br><span class="line"><span class="string">        .DefaultSorting = wdSortByName</span></span><br><span class="line"><span class="string">        .ShowHidden = True</span></span><br><span class="line"><span class="string">    End With</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &#x27;</span> loop through each field <span class="keyword">in</span> the document</span><br><span class="line">    For Each aField In ActiveDocument.Fields</span><br><span class="line">        <span class="string">&#x27; check if the field is a Zotero in-text reference</span></span><br><span class="line"><span class="string">        &#x27;</span>##################################################</span><br><span class="line">        If InStr(aField.Code, <span class="string">&quot;ADDIN ZOTERO_ITEM&quot;</span>) &gt; 0 Then</span><br><span class="line">            fieldCode = aField.Code</span><br><span class="line">            <span class="string">&#x27;#############</span></span><br><span class="line"><span class="string">            &#x27;</span> Prepare</span><br><span class="line">            <span class="string">&#x27; Plain citation== Format of Textfield shown</span></span><br><span class="line"><span class="string">            &#x27;</span> must be <span class="keyword">in</span> Brackets</span><br><span class="line">            Dim plain_Cit As String</span><br><span class="line">            plCitStrBeg = <span class="string">&quot;&quot;</span><span class="string">&quot;plainCitation&quot;</span><span class="string">&quot;:&quot;</span><span class="string">&quot;[&quot;</span></span><br><span class="line">            plCitStrEnd = <span class="string">&quot;]&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">            n1 = InStr(fieldCode, plCitStrBeg)</span><br><span class="line">            n1 = n1 + Len(plCitStrBeg)</span><br><span class="line">            n2 = InStr(Mid(fieldCode, n1, Len(fieldCode) - n1), plCitStrEnd) - 1 + n1</span><br><span class="line">            plain_Cit = Mid$(fieldCode, n1 - 1, n2 - n1 + 2)</span><br><span class="line">            <span class="string">&#x27;Reference &#x27;</span>as shown<span class="string">&#x27; in word as a string</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &#x27;</span>Title array <span class="keyword">in</span> fieldCode (all referenced Titles within this field)</span><br><span class="line">            Dim array_RefTitle(32) As String</span><br><span class="line">            i = 0</span><br><span class="line">            Do While InStr(fieldCode, <span class="string">&quot;&quot;</span><span class="string">&quot;title&quot;</span><span class="string">&quot;:&quot;</span><span class="string">&quot;&quot;</span>) &gt; 0</span><br><span class="line">                n1 = InStr(fieldCode, <span class="string">&quot;&quot;</span><span class="string">&quot;title&quot;</span><span class="string">&quot;:&quot;</span><span class="string">&quot;&quot;</span>) + Len(<span class="string">&quot;&quot;</span><span class="string">&quot;title&quot;</span><span class="string">&quot;:&quot;</span><span class="string">&quot;&quot;</span>)</span><br><span class="line">                n2 = InStr(Mid(fieldCode, n1, Len(fieldCode) - n1), <span class="string">&quot;&quot;</span><span class="string">&quot;,&quot;</span><span class="string">&quot;&quot;</span>) - 1 + n1</span><br><span class="line">                If n2 &lt; n1 Then <span class="string">&#x27;Exception the type &#x27;</span>Article<span class="string">&#x27;</span></span><br><span class="line"><span class="string">                    n2 = InStr(Mid(fieldCode, n1, Len(fieldCode) - n1), &quot;&#125;&quot;) - 1 + n1 - 1</span></span><br><span class="line"><span class="string">                End If</span></span><br><span class="line"><span class="string">                array_RefTitle(i) = Mid(fieldCode, n1, n2 - n1)</span></span><br><span class="line"><span class="string">                fieldCode = Mid(fieldCode, n2 + 1, Len(fieldCode) - n2 - 1)</span></span><br><span class="line"><span class="string">                i = i + 1</span></span><br><span class="line"><span class="string">            Loop</span></span><br><span class="line"><span class="string">            Titles_in_Cit = i</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &#x27;</span>Number array with References shown <span class="keyword">in</span> PlainCit</span><br><span class="line">            <span class="string">&#x27;Numer is equal or less than Titels, depending on the type</span></span><br><span class="line"><span class="string">            &#x27;</span>[3], [8]-[10]; [2]-[4]; [2], [4], [5]</span><br><span class="line">            <span class="string">&#x27; All citations have to be in Brackets each! [3], [8] not [3, 8]</span></span><br><span class="line"><span class="string">            &#x27;</span> This doesnt work otherwise!</span><br><span class="line">            <span class="string">&#x27; --&gt; treatment of other delimiters could be implemented here</span></span><br><span class="line"><span class="string">            Dim RefNumber(32) As String</span></span><br><span class="line"><span class="string">            i = 0</span></span><br><span class="line"><span class="string">            Do While (InStr(plain_Cit, &quot;]&quot;) Or InStr(plain_Cit, &quot;[&quot;)) &gt; 0</span></span><br><span class="line"><span class="string">                n1 = InStr(plain_Cit, &quot;[&quot;)</span></span><br><span class="line"><span class="string">                n2 = InStr(plain_Cit, &quot;]&quot;)</span></span><br><span class="line"><span class="string">                RefNumber(i) = Mid(plain_Cit, n1 + 1, n2 - (n1 + 1))</span></span><br><span class="line"><span class="string">                plain_Cit = Mid(plain_Cit, n2 + 1, Len(plain_Cit) - (n2 + 1) + 1)</span></span><br><span class="line"><span class="string">            i = i + 1</span></span><br><span class="line"><span class="string">            Loop</span></span><br><span class="line"><span class="string">            Refs_in_Cit = i</span></span><br><span class="line"><span class="string">                 &#x27;</span>treat only the shown references (skip the rest)</span><br><span class="line">            <span class="string">&#x27;[3], [8]-[10] --&gt; skip [9]</span></span><br><span class="line"><span class="string">            &#x27;</span>Order of titles given from fieldcode, not checked!</span><br><span class="line">            If Titles_in_Cit &gt; Refs_in_Cit Then</span><br><span class="line">                array_RefTitle(Refs_in_Cit - 1) = array_RefTitle(Titles_in_Cit - 1)</span><br><span class="line">                i = 1</span><br><span class="line">                Do While Refs_in_Cit + i &lt;= Titles_in_Cit</span><br><span class="line">                    array_RefTitle(Refs_in_Cit + i - 1) = <span class="string">&quot;&quot;</span></span><br><span class="line">                    i = i + 1</span><br><span class="line">                Loop</span><br><span class="line">            End If</span><br><span class="line">            </span><br><span class="line">            <span class="string">&#x27;#############</span></span><br><span class="line"><span class="string">            &#x27;</span>Make the links</span><br><span class="line">            For Refs = 0 To Refs_in_Cit - 1 Step 1</span><br><span class="line">                title = array_RefTitle(Refs)</span><br><span class="line">                array_RefTitle(Refs) = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="string">&#x27; make title a valid bookmark name</span></span><br><span class="line"><span class="string">                titleAnchor = title</span></span><br><span class="line"><span class="string">                titleAnchor = MakeValidBMName(titleAnchor)</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                ActiveWindow.View.ShowFieldCodes = False</span></span><br><span class="line"><span class="string">                Selection.GoTo What:=wdGoToBookmark, Name:=&quot;Zotero_Bibliography&quot;</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                &#x27;</span><span class="string">&#x27; locate the corresponding reference in the bibliography</span></span><br><span class="line"><span class="string">                &#x27;</span><span class="string">&#x27; by searching for its title</span></span><br><span class="line"><span class="string">                Selection.Find.ClearFormatting</span></span><br><span class="line"><span class="string">                With Selection.Find</span></span><br><span class="line"><span class="string">                    .Text = Left(title, 255)</span></span><br><span class="line"><span class="string">                    .Replacement.Text = &quot;&quot;</span></span><br><span class="line"><span class="string">                    .Forward = True</span></span><br><span class="line"><span class="string">                    .Wrap = wdFindContinue</span></span><br><span class="line"><span class="string">                    .Format = False</span></span><br><span class="line"><span class="string">                    .MatchCase = False</span></span><br><span class="line"><span class="string">                    .MatchWholeWord = False</span></span><br><span class="line"><span class="string">                    .MatchWildcards = False</span></span><br><span class="line"><span class="string">                    .MatchSoundsLike = False</span></span><br><span class="line"><span class="string">                    .MatchAllWordForms = False</span></span><br><span class="line"><span class="string">                End With</span></span><br><span class="line"><span class="string">                Selection.Find.Execute</span></span><br><span class="line"><span class="string">                               </span></span><br><span class="line"><span class="string">                &#x27;</span> <span class="keyword">select</span> the whole caption (<span class="keyword">for</span> mouseover tooltip)</span><br><span class="line">                Selection.MoveStartUntil (<span class="string">&quot;[&quot;</span>), Count:=wdBackward</span><br><span class="line">                Selection.MoveEndUntil (vbBack)</span><br><span class="line">                lnkcap = <span class="string">&quot;[&quot;</span> &amp; Selection.Text</span><br><span class="line">                lnkcap = Left(lnkcap, 70)</span><br><span class="line">                </span><br><span class="line">                <span class="string">&#x27; add bookmark for the reference within the bibliography</span></span><br><span class="line"><span class="string">                Selection.Shrink</span></span><br><span class="line"><span class="string">                With ActiveDocument.Bookmarks</span></span><br><span class="line"><span class="string">                    .Add Range:=Selection.Range, Name:=titleAnchor</span></span><br><span class="line"><span class="string">                    .DefaultSorting = wdSortByName</span></span><br><span class="line"><span class="string">                    .ShowHidden = True</span></span><br><span class="line"><span class="string">                End With</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                &#x27;</span> jump back to the field</span><br><span class="line">                aField.Select</span><br><span class="line">                <span class="string">&#x27; find and select the numeric part of the field which will become the hyperlink</span></span><br><span class="line"><span class="string">                Selection.Find.ClearFormatting</span></span><br><span class="line"><span class="string">                With Selection.Find</span></span><br><span class="line"><span class="string">                    .Text = RefNumber(Refs)</span></span><br><span class="line"><span class="string">                    .Replacement.Text = &quot;&quot;</span></span><br><span class="line"><span class="string">                    .Forward = True</span></span><br><span class="line"><span class="string">                    .Wrap = wdFindContinue</span></span><br><span class="line"><span class="string">                    .Format = False</span></span><br><span class="line"><span class="string">                    .MatchCase = False</span></span><br><span class="line"><span class="string">                    .MatchWholeWord = False</span></span><br><span class="line"><span class="string">                    .MatchWildcards = False</span></span><br><span class="line"><span class="string">                    .MatchSoundsLike = False</span></span><br><span class="line"><span class="string">                    .MatchAllWordForms = False</span></span><br><span class="line"><span class="string">                End With</span></span><br><span class="line"><span class="string">                Selection.Find.Execute</span></span><br><span class="line"><span class="string">                        </span></span><br><span class="line"><span class="string">                numOrYear = Selection.Range.Text &amp; &quot;&quot;</span></span><br><span class="line"><span class="string">                                    </span></span><br><span class="line"><span class="string">                &#x27;</span> store current style</span><br><span class="line">                style = Selection.style</span><br><span class="line">                <span class="string">&#x27; Generate the Hyperlink --&gt;Forward!</span></span><br><span class="line"><span class="string">                ActiveDocument.Hyperlinks.Add Anchor:=Selection.Range, Address:=&quot;&quot;, SubAddress:=titleAnchor, ScreenTip:=lnkcap, TextToDisplay:=&quot;&quot; &amp; numOrYear</span></span><br><span class="line"><span class="string">                &#x27;</span> reset the style</span><br><span class="line">                Selection.style = style</span><br><span class="line"></span><br><span class="line">                <span class="string">&#x27; comment if you want standard link style</span></span><br><span class="line"><span class="string">                aField.Select</span></span><br><span class="line"><span class="string">                With Selection.Font</span></span><br><span class="line"><span class="string">                     .Underline = wdUnderlineNone</span></span><br><span class="line"><span class="string">                     .ColorIndex = wdBlack</span></span><br><span class="line"><span class="string">                End With</span></span><br><span class="line"><span class="string">                    </span></span><br><span class="line"><span class="string">            Next Refs &#x27;</span>References <span class="keyword">in</span> Cit</span><br><span class="line"></span><br><span class="line">        End If  <span class="string">&#x27;If Zotero-Field</span></span><br><span class="line"><span class="string">        &#x27;</span>#########################</span><br><span class="line"></span><br><span class="line">        Next aField <span class="string">&#x27; next field</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#x27;</span> go back to original range selected</span><br><span class="line">        ActiveWindow.View.ShowFieldCodes = False</span><br><span class="line">        ActiveDocument.Range(nStart, nEnd).Select</span><br><span class="line">        </span><br><span class="line">    End Sub</span><br><span class="line">    Function MakeValidBMName(strIn As String)</span><br><span class="line">        Dim pFirstChr As String</span><br><span class="line">        Dim i As Long</span><br><span class="line">        Dim tempStr As String</span><br><span class="line">        strIn = Trim(strIn)</span><br><span class="line">        pFirstChr = Left(strIn, 1)</span><br><span class="line">        If Not pFirstChr Like <span class="string">&quot;[A-Za-z]&quot;</span> Then</span><br><span class="line">            strIn = <span class="string">&quot;A_&quot;</span> &amp; strIn</span><br><span class="line">        End If</span><br><span class="line">        For i = 1 To Len(strIn)</span><br><span class="line">            Select Case Asc(Mid$(strIn, i, 1))</span><br><span class="line">            Case 49 To 57, 65 To 90, 97 To 122</span><br><span class="line">                tempStr = tempStr &amp; Mid$(strIn, i, 1)</span><br><span class="line">            Case Else</span><br><span class="line">                tempStr = tempStr &amp; <span class="string">&quot;_&quot;</span></span><br><span class="line">            End Select</span><br><span class="line">            Next i</span><br><span class="line">            tempStr = Replace(tempStr, <span class="string">&quot;  &quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">            MakeValidBMName = Left(tempStr, 40)</span><br><span class="line">        End Function</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</details>

<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220419095839292.png" alt="image-20220419095839292"></p>
<p>保存完毕之后退出便可</p>
<h2 id="使用宏"><a href="#使用宏" class="headerlink" title="使用宏"></a>使用宏</h2><p>编辑完成之后便要进行使用。</p>
<p>以<code>word2019</code>为例：按顺序点击如下内容：<kbd>视图</kbd>→<kbd>宏</kbd>→<kbd>查看宏</kbd></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220419095451217.png" alt="image-20220419095451217"></p>
<p>找到名字为 <code>ZoteroLinkCitation</code>  的宏，选中，并点击右边的<kbd>运行</kbd></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220419100130439.png" alt="image-20220419100130439"></p>
<p>之后便可以了</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://blog.csdn.net/weixin_43356770/article/details/124207445">Zotero如何在word中引用跳转到参考文献/建立超链接</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Zotero</tag>
      </tags>
  </entry>
  <entry>
    <title>apache设置反向代理</title>
    <url>/OLD_BLOG/2021/09/11/apache%E8%AE%BE%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于青岛大学的OJ项目需要占用80端口，并且此服务使用的是docker来进行开展的，因此现阶段并不能找到相关的方式去更换代码，因此采用apache2的自带反代理模式，来实现对域名的映射</p>
<span id="more"></span>  

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/bluedawn/p/Apache-ReverseProxy.html">Ubuntu Apache2 反代</a></p>
<p><a href="https://blog.csdn.net/LoveZoeAyo/article/details/120228608">Ubuntu Apache反代(反向代理)设置</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/230829571">什么是反向代理？</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="什么是反向代理？"><a href="#什么是反向代理？" class="headerlink" title="什么是反向代理？"></a>什么是反向代理？</h2><blockquote>
<p>反向代理是充当Web服务器网关的代理服务器。当您将请求发送到使用反向代理的Web服务器时，他们将先转到反向代理，由该代理将确定是将其路由到Web服务器还是将其阻止。</p>
<p>这意味着有了反向代理，您永远不会与使用它的Web服务器进行直接通信。可以将它们看作web服务器或服务器集群的某种包装器。通过负载平衡和缓存，它们可以保护web免遭攻击，并提供更好的web性能。</p>
</blockquote>
<h2 id="加载相关模块"><a href="#加载相关模块" class="headerlink" title="加载相关模块"></a>加载相关模块</h2><p>首先我们需要运行apache的模块加载，输入如下命令(可能是ubuntu专属命令)：  </p>
<p><code>a2enmod proxy proxy_balancer proxy_http</code></p>
<p>之后我们需要在apahce的配置服务中设置相关配置</p>
<ol>
<li>进入到apache 的配置目录下：</li>
</ol>
<p>如我的是<code>etc/apache2/sites-available</code></p>
<ol start="2">
<li>使用你所要配置的域名进行创建一个<code>域名.conf</code>文件</li>
<li>使用vim或者等相关编辑工具对此conf文件进行编辑</li>
</ol>
<p>输入如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">	ServerName lizi.com:80</span><br><span class="line">	ProxyRequests Off</span><br><span class="line">	ProxyMaxForwards 100</span><br><span class="line">	ProxyPreserveHost On</span><br><span class="line">	<span class="comment">#反代理要解析的ip 支持添加端口</span></span><br><span class="line">	ProxyPass / http://127.0.0.1:90/</span><br><span class="line">	ProxyPassReverse / http://127.0.0.1:90/</span><br><span class="line"></span><br><span class="line">	&lt;Proxy *&gt;</span><br><span class="line">		Order Deny,Allow</span><br><span class="line">		Allow from all</span><br><span class="line">	&lt;/Proxy&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注意：lizi.com是你的域名地址，将其替换输入进去即可</strong></p>
<ol start="4">
<li>在<code>sites-enabled</code>的文件夹下（一般是在<code>etc/apache2</code>目录下）链接一下你刚刚创建的conf文件</li>
</ol>
<p><code>ln -s /etc/apahce2/sites-available/域名.conf ../sites-enabled</code></p>
<ol start="5">
<li>之后重启apache服务便可以</li>
</ol>
<p><code>systemctl restart apache2</code>或者<code>service apache2 restart</code></p>
<p>然后访问你的域名，你就会发现已经正常代理到了你所需要的网站上</p>
<h1 id="相关用途"><a href="#相关用途" class="headerlink" title="相关用途"></a>相关用途</h1><ul>
<li><strong>该公司可以隐藏其实际内部服务器结构的详细信息</strong>，从而使访问或破坏这些服务器变得更加困难。本质上是黑客保护。</li>
<li>**反向代理可以使用防火墙设置来帮助防御<a href="https://link.zhihu.com/?target=https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/">DDoS攻击</a>**。该代理可以减轻DDoS的压力并通过合法的流量，而不会损害真实Web服务器的性能。当然，就像一扇人群挤过的门一样，它仍然可能是一个瓶颈，但并不是那种在失败时危及用户数据的瓶颈。</li>
<li><strong>反向代理可能配备有可加快SSL证书验证速度的硬件</strong>，从而使SSL连接更快且更不容易被利用。</li>
<li>如果有几台内部Web服务器上有冗余数据，<strong>则反向代理可以充当负载平衡器</strong>，确保每台内部服务器的压力都不大。当每台服务器的功能极小但它们共同构成强大的资源来源时，此功能特别有用。</li>
<li>通过在请求相同时立即向多个客户端提供动态数据，<strong>可以将反向代理用作动态内容的缓存</strong>。此过程称为网络加速。</li>
<li><strong>反向代理可以处理</strong> Web服务器的<strong>数据压缩</strong>，以提供更快的连接和较低的主Web服务器压力。</li>
<li>当访问地址必须保持不变时，<strong>反向代理用于统一网址</strong>。如果您有五个Web服务器，则通常每个服务器都有自己的IP地址。这将使静态脚本难以访问，因为它将被迫访问指</li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Apache2</tag>
      </tags>
  </entry>
  <entry>
    <title>arduino安装库(线下)</title>
    <url>/OLD_BLOG/2021/07/16/arduino%E5%AE%89%E8%A3%85%E5%BA%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于部分库的获得需要通过国外网站，而对于培训来讲，让每个人翻墙不太好，因此出此文章</p>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="下载所需库"><a href="#下载所需库" class="headerlink" title="下载所需库"></a>下载所需库</h2><p>通过任意渠道去获取到你所需要的库，包括但不限于直接上github上下载、找学长学姐要、网盘里有提供，总之下载下来解压好便可以</p>
<h2 id="安装所需库"><a href="#安装所需库" class="headerlink" title="安装所需库"></a>安装所需库</h2><p>将所下载好的安装包解压，我们会得到如下文件夹</p>
<p><img src="https://user-images.githubusercontent.com/40520292/125896645-9864ac96-53a4-4528-9949-56f279f57815.png" alt="image"></p>
<p>之后将这些文件夹统一放置在arduinio安装的目录下的libries，比如我的是<code>F:\arduino\libraries</code>：</p>
<p><img src="https://user-images.githubusercontent.com/40520292/125896875-70755954-cdc7-4877-9c3f-ba936e9b8a64.png" alt="image"></p>
<p>之后重启arduino便可以</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>打开arduino，看看是不是会多出来这些库呢？</p>
]]></content>
      <categories>
        <category>study</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora+Picgo+github配置</title>
    <url>/OLD_BLOG/2021/09/14/Typora+Picgo+github%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此配置环境使用的是<code>arch linux</code>的系统进行配置，使用的是picgo的命令行格式，如果是windows或者是GUI界面，建议直接看官方文档或者联系我进行更新相关配置讲解</p>
<span id="more"></span>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>本博客有以下几篇参考文章，分别如下：</p>
<p><a href="https://www.cnblogs.com/Run2948/p/13408419.html"><a href="https://www.cnblogs.com/Run2948/p/13408419.html">Typora + PicGo-Core + Custom Command 实现上传图片到图床</a></a></p>
<p><a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/commands.html">CLI命令</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="安装picgo-core"><a href="#安装picgo-core" class="headerlink" title="安装picgo-core"></a>安装<code>picgo-core</code></h2><p>打开<code>Typora</code>之后，依次点击<kbd>文件</kbd>——&gt;<kbd>偏好设置</kbd>——&gt;<kbd>图像</kbd>——&gt;<kbd>上传服务</kbd>，找到<code>Picgo-Core</code>，之后点击下面的<kbd>下载或更新</kbd></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210914150442012.png" alt="image-20210914150442012"></p>
<p>之后在同意许可后，等待下载安装完成，便可以直接使用命令行，输入picgo进行进一步配置</p>
<p><strong>注意：可能在使用过程中会发现picgo并没有安装到全局目录上，因此可能会出现命令无法找到的情况，因此可以直接进入它的程序目录进行配置</strong></p>
<p>进入方法：<code>cd ~/.config/Typora/picgo/linux</code>，之后输入<code>./picgo</code>进行配置</p>
<p>如不确定是否正确，则可以使用<code>./picgo -h</code>进行验证，如果输出如下内容则证明成功进入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">☁  linux  ./picgo -h      </span><br><span class="line">Usage: index [options] [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -v, --version                        output the version number</span><br><span class="line">  -d, --debug                          debug mode</span><br><span class="line">  -s, --silent                         silent mode</span><br><span class="line">  -c, --config &lt;path&gt;                  <span class="built_in">set</span> config path</span><br><span class="line">  -p, --proxy &lt;url&gt;                    <span class="built_in">set</span> proxy <span class="keyword">for</span> uploading</span><br><span class="line">  -h, --<span class="built_in">help</span>                           output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  install|add [options] &lt;plugins...&gt;   install picgo plugin</span><br><span class="line">  uninstall|<span class="built_in">rm</span> &lt;plugins...&gt;            uninstall picgo plugin</span><br><span class="line">  update &lt;plugins...&gt;                  update picgo plugin</span><br><span class="line">  <span class="built_in">set</span>|config &lt;module&gt; [name]           configure config of picgo modules</span><br><span class="line">  upload|u [input...]                  upload, go go go</span><br><span class="line">  use [module]                         use modules of picgo</span><br><span class="line">  init [options] &lt;template&gt; [project]  create picgo plugin<span class="string">&#x27;s development templates</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>如果不想每次配置那么麻烦则也可以将其链接到<code>/usr/bin</code>中，但是我链接完成之后显示的是</p>
<p><code>zsh: 符号连接的层数过多: picgo</code>可能是<code>zsh</code>的原因，暂时无法判断，因此不提供链接命令</p>
<p><strong>注意：如果没有正常配置出来picgo的全局变量，则后期有关它的所有命令都需要为<code>./picgo</code>形式的</strong></p>
<h2 id="配置Picgo-Core"><a href="#配置Picgo-Core" class="headerlink" title="配置Picgo-Core"></a>配置<code>Picgo-Core</code></h2><p>由于博主使用的<code>github</code>，因此只提供<code>github</code>的相关配置教程</p>
<h2 id="获取github的tocken"><a href="#获取github的tocken" class="headerlink" title="获取github的tocken"></a>获取<code>github</code>的<code>tocken</code></h2><p>由于需要将图片存储到<code>github</code>，需要对其中的仓库拥有相关权限，因此我们需要申请一个<code>tocken</code>来实现对<code>picgo</code>的赋权</p>
<p>相关步骤：</p>
<ol>
<li>登录<code>github</code>，点击头像，选择<code>settings</code></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20210914151840110.png" alt="image-20210914151840110"></p>
<ol start="2">
<li>寻找左侧按钮，名称为<code>Developer settings</code>,点击进入</li>
</ol>
<p><img src="https://raw.githubusercontent.com/ZHYCarge/photo/master/image-20210914152041115.png" alt="image-20210914152041115"></p>
<ol start="3">
<li>选择<code>Personal access tokens</code></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ZHYCarge/photo/master/image-20210914152117344.png" alt="image-20210914152117344"></p>
<ol start="4">
<li><p>点击<code>Generate new tocken</code></p>
</li>
<li><p>之后按照如下内容进行填写</p>
<p><img src="https://raw.githubusercontent.com/ZHYCarge/photo/master/image-20210914152501208.png" alt="image-20210914152501208"></p>
</li>
<li><p>之后点击<code>Generate tocken</code>输入密码之后便可以进行创建</p>
</li>
<li><p>之后复制你的tocken即可</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/ZHYCarge/photo/master/image-20210914152623098.png" alt="image-20210914152623098"></p>
<p>(这个tocken早删除了，不要想着其他的了)</p>
<h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><ol>
<li> 配置<code>picgo</code>的图床选择</li>
</ol>
<p>由于<code>picgo</code>默认图床为<code>smms</code>，而我的是<code>github</code>，因此需要进行修改</p>
<p>输入<code>picgo use </code> 进行交互式命令行配置</p>
<p>以官网提供的命令行显示为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ picgo use</span><br><span class="line">? Use an uploader (Use arrow keys)</span><br><span class="line">  smms</span><br><span class="line">❯ tcyun</span><br><span class="line">  weibo</span><br><span class="line">  github</span><br><span class="line">  qiniu</span><br><span class="line">  imgur</span><br><span class="line">  aliyun</span><br></pre></td></tr></table></figure>

<p>后面选择<code>path</code>即可</p>
<blockquote>
<p>通常来说，在命令行模式下你只需要选择<code>path</code>作为picgo的<code>transformer</code>即可。</p>
</blockquote>
<ol start="2">
<li>配置<code>picgo</code>图床信息，项目目录什么的</li>
</ol>
<p>输入<code>picgo set uploader</code>进入交互式命令行配置</p>
<blockquote>
<p>通常来说，picgo默认只需要配置Uploader即可。所以你可以直接通过<code>picgo set uploader</code>或者<code>picgo set uploader weibo|tcyun|...</code>等命令直接进入交互式命令行。</p>
</blockquote>
<p>第一项是<code>repo</code>填写你的路径，格式为<code>用户名/仓库名</code></p>
<p>第二项是<code>branch</code>填写你的默认分支，默认选择<code>master</code>即可</p>
<p>之后有个<code>tocken</code>输入你刚刚获取到的<code>tockens</code>即可</p>
<p>后面有个<code>path</code>是存储路径，可以直接回车，及存到主目录下，也可以新建一个文件夹进行存储</p>
<p><code>customPath</code>同样也可以直接回车</p>
<p>最后有一个<code>customUrl</code>，是可以自定义返回的域名的，如果你需要CDN加速等相关操作，可以在此处写出你的相关改写域名</p>
<p>相关配置例程如下（部分参考即可）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? repo: xxxx/image</span><br><span class="line">? branch: master</span><br><span class="line">? token: 5a34fa3f348d556...</span><br><span class="line">? path: 2020</span><br><span class="line">? customPath: 年月</span><br><span class="line">? customUrl: https://gitee.com/xxxx/image/raw/master/</span><br><span class="line">[PicGo SUCCESS]: Configure config successfully!</span><br></pre></td></tr></table></figure>

<h2 id="配置测试"><a href="#配置测试" class="headerlink" title="配置测试"></a>配置测试</h2><p>回到<code>typora</code>，点击测试，看看是否成功，成功的话便是配置完成</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>如果需要其他内容，或者是CDN加速有关的，建议参考这篇文章,windows的话我是参照这个配置的</p>
<p><a href="https://blog.csdn.net/yefcion/article/details/88412025">PicGo + GitHub 搭建个人图床工具</a></p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>由于<code>github</code>的国内访问速度，导致图片有些时候会遭到404或者503的访问限制，因此推荐在配置<code>custoMur</code>的时候定制一下国内的访问节点或镜像会比较好</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装anaconda</title>
    <url>/OLD_BLOG/2022/06/23/Ubuntu%E5%AE%89%E8%A3%85anaconda/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想拿自己的云服务器跑Python脚本，为了防止环境导致后续出现问题，因此尝试安装Linux的Anaconda</p>
<span id="more"></span>

<h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><ul>
<li>Ubuntu 18.04</li>
<li>2核2G</li>
<li>python3.69</li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="更新自身包"><a href="#更新自身包" class="headerlink" title="更新自身包"></a>更新自身包</h2><p><code>sudo apt update &amp;&amp; sudo apt upgrade</code></p>
<h2 id="下载curl软件"><a href="#下载curl软件" class="headerlink" title="下载curl软件"></a>下载<code>curl</code>软件</h2><p><code>sudo apt install curl</code></p>
<h2 id="进入到-tmp目录下"><a href="#进入到-tmp目录下" class="headerlink" title="进入到 /tmp目录下"></a>进入到 <code>/tmp</code>目录下</h2><p>这步可选，（存到<code>/tmp</code>目录下方便关机的时候自动给你删掉，安装包没啥用2333）</p>
<p><code>cd /tmp</code></p>
<h2 id="下载anaconda安装包"><a href="#下载anaconda安装包" class="headerlink" title="下载anaconda安装包"></a>下载<code>anaconda</code>安装包</h2><p>从<a href="https://www.anaconda.com/products/distribution#Downloads">官网</a>上找到属于你自己的anaconda安装包，如图：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220623175613105.png" alt="image-20220623175613105"></p>
<p><code>https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh</code></p>
<p>右键链接复制链接之后，在终端中输入：</p>
<p><code>curl -O 你复制的链接</code></p>
<p>例子: <code>curl -O https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh</code></p>
<p>等待下载完毕</p>
<h2 id="【可选】验证安装包的有效及完整性"><a href="#【可选】验证安装包的有效及完整性" class="headerlink" title="【可选】验证安装包的有效及完整性"></a>【可选】验证安装包的有效及完整性</h2><p>以自身为例:</p>
<p>输入命令</p>
<p><code>sha256sum Anaconda3-2022.05-Linux-x86_64.sh  </code>来生成一段sha256验证密钥,通过<a href="https://docs.anaconda.com/anaconda/install/hashes/lin-3-64/">官网链接</a>找到属于自己的版本sha256密钥</p>
<p>如<a href="https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-2022.05-Linux-x86_64.sh-hash/">此链接</a>对应的便是上文的密钥链接,将两段sha256密钥进行比对,一致即可</p>
<h2 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h2><p>输入命令</p>
<p><code>bash Anaconda3-2022.05-Linux-x86_64.sh</code>即可安装,</p>
<p>期间会让你确定安装目录\阅读许可等相关操作 </p>
<p>直到后面会出现安装成功提醒</p>
<p>之后在命令行中输入 <code>source ~/.bashrc</code></p>
<blockquote>
<p>注意:此处如果在fish中输入,会报错,因此需要先退出fish,或者直接先bash,再输入此命令</p>
</blockquote>
<h2 id="是否在每个会话中启用conda"><a href="#是否在每个会话中启用conda" class="headerlink" title="是否在每个会话中启用conda"></a>是否在每个会话中启用conda</h2><p>默认此选项是开启的,如果需要更改,输入如下命令:</p>
<p><code>conda config --set auto_activate_base False</code>    取消每个<code>shell</code>中使用</p>
<p><strong>请注意:此命令使用前提为需要在shell中提前使用 <code>conda init</code></strong></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="conda环境配置到fish中"><a href="#conda环境配置到fish中" class="headerlink" title="conda环境配置到fish中"></a>conda环境配置到fish中</h2><p>在<code>bash</code>中输入:</p>
<p><code>conda init fish</code></p>
<p>即可</p>
<h2 id="出现错误-Variables-may-not-be-used-as-commands-In-fish-please-define-a-function-or-use-39-eval-CONDA-EXE-39"><a href="#出现错误-Variables-may-not-be-used-as-commands-In-fish-please-define-a-function-or-use-39-eval-CONDA-EXE-39" class="headerlink" title="出现错误:Variables may not be used as commands. In fish, please define a function or use&#39;eval $CONDA_EXE&#39;. "></a>出现错误:<code>Variables may not be used as commands. In fish, please define a function or use&#39;eval $CONDA_EXE&#39;. </code></h2><p>经过面向Google编程之后发现,在<code>fish</code>版本小于 <code>3.0.0</code>时会出现这个问题:<a href="https://github.com/conda/conda/issues/11079">问题链接</a>,因此,需要通过执行<a href="https://github.com/conda/conda/issues/11079#:~:text=on%2013%20Jan-,I%20also%20came%20across%20this%20error.,-I%20solved%20it">下面命令</a>,将fish更新到最新版本来解决此类问题</p>
<p><code>sudo apt-add-repository ppa:fish-shell/release-3</code></p>
<p><code>apt update</code></p>
<p><code>sudo apt install fish</code></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://docs.anaconda.com/anaconda/install/linux/">官网教程</a></li>
<li><a href="https://phoenixnap.com/kb/how-to-install-anaconda-ubuntu-18-04-or-20-04">国外博客[<strong>How to Install Anaconda on Ubuntu 18.04 and 20.04</strong>]</a></li>
<li><a href="https://github.com/conda/conda/issues/11079">Github[fish使用conda报错]</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab无法执行（错误分析及solve）</title>
    <url>/OLD_BLOG/2021/12/26/crontab%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C%EF%BC%88%E9%94%99%E8%AF%AF%E5%88%86%E6%9E%90%E5%8F%8Asolve%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于比较懒，因此写了一个小脚本用来定时运行<code>EPIC</code>的领游戏插件，之后发现 <code>crontab</code>命令无法运行，因此记录一下解决方法</p>
<span id="more"></span>

<h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://blog.csdn.net/zhuangtim1987/article/details/52280409">Crontab日志无法输出</a></p>
<p><a href="https://blog.csdn.net/panyox/article/details/79157046">ubuntu打开crontab日志及不执行常见原因</a></p>
<p><a href="https://blog.csdn.net/u012129607/article/details/80418149">crontab 脚本错误日志和正确的输出写入到文件</a></p>
<h1 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h1><p>程序出错的话第一步还是先去看日志比较好，因此打开日志，发现没有日志输出，通过参考相关教程之后发现可能是日志功能未进行打开，因此</p>
<ol>
<li><code>sudo vim /etc/rsyslog.d/50-default.conf  </code></li>
<li><code>cron.*              /var/log/cron.log #将cron前面的注释符去掉  </code></li>
<li><code>sudo  service rsyslog  restart </code></li>
<li>等待执行之后，输入 <code>tail -f /var/log/cron.log </code>来查看相关日志</li>
</ol>
<h1 id="找bug"><a href="#找bug" class="headerlink" title="找bug"></a>找bug</h1><h2 id="发现问题1"><a href="#发现问题1" class="headerlink" title="发现问题1"></a>发现问题1</h2><p>在运行结束之后果然发现了相关问题，log报错记录如下：</p>
<p><code>mailed 366 bytes of output but got status 0x00ff from MTA#012</code></p>
<p>继续查询文章，发现</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20211226100544716.png" alt="image-20211226100544716"></p>
<p>因此明白了解决方向</p>
<p>根据其博客所说，在所有要执行的语句后面加上<code> &gt;/dev/null 2&gt;&amp;1</code>或者<code>&amp;&gt; /dev/null</code>即可，即</p>
<p><code>*/5 * * * * sh /var/xxx/xxx.sh &gt;/dev/null  2&gt;&amp;1</code></p>
<p>之后重启cron服务即可</p>
<p><code>service cron restart</code></p>
<h2 id="发现问题2"><a href="#发现问题2" class="headerlink" title="发现问题2"></a>发现问题2</h2><p><code>crontab</code>什么时候会发送邮件呢？在运行脚本出错的时候。。。。因此我需要它发送的信息以便去核查代码是否有问题。。。因此我还得需要这个邮件日志。。。因此，继续查询博客，找到如下内容</p>
<p>把正确以及错误的日志都输出：</p>
<p>​    <code>*/1 * * * * /root/XXXX.sh &gt; /tmp/load.log 2&gt;&amp;1 &amp;</code></p>
<p>只输出正确日志：</p>
<p>​    <code>*/1 * * * * /root/XXXX.sh &gt; /tmp/load.log &amp;  等同于   */1 * * * * /root/XXXX.sh 1&gt;/tmp/load.log &amp;</code></p>
<p>只输出错误日志：</p>
<p>​    <code>*/1 * * * * /root/XXXX.sh 2&gt; /tmp/load.log &amp; </code></p>
<p>因此，再次尝试之后，我又发现了问题3。。。</p>
<h2 id="发现问题3"><a href="#发现问题3" class="headerlink" title="发现问题3"></a>发现问题3</h2><p>在 <code>Crontab</code>中，默认执行路径是<code>当前系统的根目录</code>，在邮件排查中，我发现了所用到的python文件进行过其他的文件调用。由于在命令行中运行，<code>python</code>文件均在一起，因此无需进行目录统一。。但是在 <code>crontab</code>中需要进行要求。因此可以通过曲线救国的方式，将 <code>Crontab</code>的执行路径更换成脚本所在路径：</p>
<ol>
<li><p>新增一个脚本文件<code>auto.sh</code></p>
</li>
<li><p>在其中输入 </p>
<ol>
<li>```bash<br>cd “你需要进入到的项目路径中”<br>python 1.py # 你需要执行的代码<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 之后在`crontab`中执行该脚本文件即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Others</span><br><span class="line"></span><br><span class="line">## [解决非root用户crontab定时任务无法执行问题](https://jingyan.baidu.com/article/bea41d432d4967f4c51be68a.html)（不知道有没有用，按照他的配置了，正确与否不确定）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">修改/etc/pam.<span class="property">d</span>/crond，把把所有required改成sufficient，这个对非root用户管用</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">\#</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">\# <span class="title class_">The</span> <span class="variable constant_">PAM</span> configuration file <span class="keyword">for</span> the cron daemon</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">\#</span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p> No PAM authentication called, auth modules not needed</p>
<p>account  sufficient pam_access.so</p>
<p>account  include  password-auth</p>
<p>session  sufficient pam_loginuid.so</p>
<p>session  include  password-auth</p>
<p>auth    include  password-auth<br>```</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>又是开心的debug的半天呢（bushi）</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title>cv实现图片裁剪以及移位</title>
    <url>/OLD_BLOG/2021/07/28/cv%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA%E4%BB%A5%E5%8F%8A%E7%A7%BB%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想跟着b站大佬，去学习一些相关知识</p>
<p>使用opencv对图像进行裁剪以及移位</p>
<span id="more"></span>

<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="图片剪切"><a href="#图片剪切" class="headerlink" title="图片剪切"></a>图片剪切</h2><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图片剪切功能</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;YT.jpg&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">dst = img[<span class="number">3000</span>:<span class="number">3600</span>, <span class="number">3100</span>:<span class="number">3700</span>]</span><br><span class="line">cv2.imshow(<span class="string">&#x27;img&#x27;</span>, dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p>原图：</p>
<p><img src="https://user-images.githubusercontent.com/40520292/127297201-c871ae9d-7d1d-4fb6-820c-391885d06f04.png" alt="image"></p>
<p>处理后：</p>
<p><img src="https://user-images.githubusercontent.com/40520292/127297221-9a843eb7-9783-4c2a-bd33-9a739c03839c.png" alt="image"></p>
<h2 id="使用API的方式对图片进行位移"><a href="#使用API的方式对图片进行位移" class="headerlink" title="使用API的方式对图片进行位移"></a>使用API的方式对图片进行位移</h2><h3 id="代码部分-1"><a href="#代码部分-1" class="headerlink" title="代码部分"></a>代码部分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;YT.jpg&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># cv2.imshow(&#x27;src&#x27;, img)</span></span><br><span class="line">imgInfo = img.shape</span><br><span class="line">imgH = imgInfo[<span class="number">0</span>]</span><br><span class="line">imgW = imgInfo[<span class="number">1</span>]</span><br><span class="line">matShift = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">100</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">200</span>]])</span><br><span class="line">dst = cv2.warpAffine(img, matShift, (imgH, imgW))</span><br><span class="line"><span class="comment"># 参数1：原始图片信息 参数2：移位矩阵 参数3：相关信息</span></span><br><span class="line">cv2.namedWindow(<span class="string">&quot;enhanced&quot;</span>, cv2.WINDOW_FREERATIO)</span><br><span class="line"><span class="comment"># 如果图片特别大，可以采用以上方法</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;enhanced&quot;</span>, dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>原图：</p>
<p><img src="https://user-images.githubusercontent.com/40520292/127297242-0cf6465f-54d6-43a4-af48-3908cc0ea422.png" alt="image"></p>
<p>运行结果：</p>
<p><img src="https://user-images.githubusercontent.com/40520292/127297265-76b1cf71-2a00-40a4-87d1-7446ea3ffad2.png" alt="image"></p>
<p>可以看见图像明显的进行了移位</p>
<h2 id="使用源码的形式对图片进行位移"><a href="#使用源码的形式对图片进行位移" class="headerlink" title="使用源码的形式对图片进行位移"></a>使用源码的形式对图片进行位移</h2><h3 id="代码部分-2"><a href="#代码部分-2" class="headerlink" title="代码部分"></a>代码部分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;YT.jpg&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;YT&quot;</span>, cv2.WINDOW_FREERATIO)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;YT&#x27;</span>, img)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">dst = np.zeros(img.shape, np.uint8)</span><br><span class="line">height = imgInfo[<span class="number">0</span>]</span><br><span class="line">weight = imgInfo[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, height):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, weight-<span class="number">100</span>):</span><br><span class="line">        dst[i][j+<span class="number">100</span>] = img[i, j]</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;img&quot;</span>, cv2.WINDOW_FREERATIO)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;img&#x27;</span>, dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://user-images.githubusercontent.com/40520292/127297283-28a10011-e71e-4ace-8965-70d9b053aad5.png" alt="image"></p>
<p>左边为原图，右边为移动后的图片（由于图片过大，因此放大了一下）</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="如果原图太大，当前屏幕无法进行显示"><a href="#如果原图太大，当前屏幕无法进行显示" class="headerlink" title="如果原图太大，当前屏幕无法进行显示"></a>如果原图太大，当前屏幕无法进行显示</h2><p>可以在<code>imshow()</code>方法前面加入<code>cv2.namedWindow(&quot;enhanced&quot;, cv2.WINDOW_FREERATIO)</code>，便可实现窗口自适应并可以进行相关放缩</p>
]]></content>
      <categories>
        <category>study</category>
        <category>视觉</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>esp8266(贴片)使用ttl烧录程序</title>
    <url>/OLD_BLOG/2021/07/18/esp8266(%E8%B4%B4%E7%89%87)%E4%BD%BF%E7%94%A8ttl%E7%83%A7%E5%BD%95%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于实验室以及小学期培训所用到的芯片是贴片芯片，并没有mirco usb来进行编写烧录，需要在烧录前做一些准备，因此出一篇博客，顺便学习一下esp8266（贴片）的相关信息</p>
<span id="more"></span>
<h1 id="相关参考资料"><a href="#相关参考资料" class="headerlink" title="相关参考资料"></a>相关参考资料</h1><p><a href="https://blog.csdn.net/qq_36958104/article/details/103406214?spm=1001.2014.3001.5506">ESP8266下载AT固件</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="看引脚图"><a href="#看引脚图" class="headerlink" title="看引脚图"></a>看引脚图</h2><p>首先需要查看一下esp8266（贴片）的引脚图，根据引脚图功能，以及网上的相关参考文件，对线路进行焊接<br><img src="https://user-images.githubusercontent.com/40520292/126067535-a7e74406-c8bf-4c50-8235-9b5288c6df91.png" alt="引脚图"><br>【图源必应】</p>
<h2 id="查询相关资料"><a href="#查询相关资料" class="headerlink" title="查询相关资料"></a>查询相关资料</h2><p>ESP8266的相关引脚</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">引脚标号</th>
<th align="center">引脚作用</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">GND</td>
<td align="center">地</td>
<td align="center">接电源负极或者io口置零使用</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">VCC</td>
<td align="center">电源正极</td>
<td align="center">一般为3.3V，外部供电使用</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">RST</td>
<td align="center">复位</td>
<td align="center">外部复位引脚，低电平复位</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">RXD</td>
<td align="center">数据接收端</td>
<td align="center">用于数据传输</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">TXD</td>
<td align="center">数据发送端</td>
<td align="center">用于数据传输</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">GPIO0</td>
<td align="center">工作模式选择</td>
<td align="center">当高电平为工作模式；当为低电平为下载模式</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">GPIO15</td>
<td align="center">SS (SPI)</td>
<td align="center">运行以及编译时保持低电平</td>
</tr>
</tbody></table>
<p>在运行过程种，我们只需要对vcc以及gnd进行接线便可以使用，并不需要外接其他IO口<br>因此我们在烧录程序之前先要对手上的芯片进行接线<br><strong>请注意：esp8266（贴片并无内置上拉电阻，因此为确保安全，请在危险操作时接入上拉电阻）</strong></p>
<h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p><img src="https://user-images.githubusercontent.com/40520292/126068460-ff83639f-f107-4c2a-9384-0bbd9cff5ce2.jpg" alt="1626614185608"><br>接线前</p>
]]></content>
      <categories>
        <category>study</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hadoop运行Java项目(精简版)</title>
    <url>/OLD_BLOG/2021/10/15/hadoop%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%9803/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>跟着老师教程以及一篇博客将相关步骤进行简化流程以及操作</p>
<span id="more"></span>

<p>老师的第三次作业完成</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/rathboma/hadoop-framework-examples">项目的官方源文件</a></p>
<p><a href="https://cat-nyan.github.io/2021/10/08/run-hadoop-old-project/#%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C">一个同学的博客 <strong>重要</strong> </a></p>
<h1 id="所需内容"><a href="#所需内容" class="headerlink" title="所需内容"></a>所需内容</h1><p>本博客仅讲解远程即使用Hadoop进行操作，因此需要服务器or虚拟机拥有：</p>
<ul>
<li>JDK1.8</li>
<li>Hadoop3.22</li>
<li>Maven3.63</li>
<li>git</li>
<li>scp(可选)</li>
</ul>
<blockquote>
<p>注意：</p>
<ol>
<li>此配置仅是博主运行时的版本配置，可以高于此版本，但是尽量不要低于此版本号</li>
<li>如果按照流程正常配置过Hadoop的话，仅需要在命令行输入<code>sudo apt install maven</code>进行安装即可</li>
<li>如果没有git，请输入<code>sudo apt install git</code>进行安装</li>
</ol>
</blockquote>
<h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>由于内容以及操作关系，尽管对于操作进行了缩减，但是还是会存在流程的复杂性，因此本篇博客会分成两个类型进行解答，一个是对于同学博客的精简以及半复制，另一个则是无脑操作，因此如果仅仅需要完成老师的任务的话，可以直接点击下面的链接进行跳转</p>
<p><a href="#%E6%97%A0%E8%84%91%E6%93%8D%E4%BD%9C">点我跳转</a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><blockquote>
<p> 推荐电脑系统是liunx，方便后续对文件的上传，windows的话也可以使用虚拟机或者自带的terminal进行上传文件操作</p>
</blockquote>
<h2 id="获取文件"><a href="#获取文件" class="headerlink" title="获取文件"></a>获取文件</h2><p>首先我们需要获取我们需要使用的文件，这里有两种方法进行获取：</p>
<ol>
<li>在github的官方文件上点击下载zip文件之后解压即可<a href="https://github.com/rathboma/hadoop-framework-examples">Github源码</a></li>
<li>使用git直接输入<code>git clone https://github.com/rathboma/hadoop-framework-examples.git</code>便可在当前目录下直接下载</li>
</ol>
<h2 id="更改文件"><a href="#更改文件" class="headerlink" title="更改文件"></a>更改文件</h2><p>由于本项目创建以及维护最后一次日期是在2016年，因此所使用的版本信息过于古老，以及不符合当前api的使用以及调用，因此需要修改相关源码，使其匹配当前环境。</p>
<ol>
<li><p>进入到我们下载的原文件的文件夹中，找到<code>java-mapreduce</code>点击进入</p>
</li>
<li><p>删除test文件夹</p>
</li>
<li><p>打开<code>pom.xml</code>文件</p>
</li>
<li><p>修改<code>pom.xml</code>文件</p>
<ul>
<li><p>删除其中的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-mr1-cdh4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-mr1-cdh4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将<code>&lt;version&gt;2.0.0-mr1-cdh4.3.1&lt;/version&gt;</code>修改成为<code>version&gt;3.3.1&lt;/version&gt;</code></p>
</li>
<li><p>并删除<code>&lt;scope&gt;provided&lt;/scope&gt;</code></p>
</li>
</ul>
</li>
<li><p><code>pom.xml</code>最后应该成为如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.matthewrathbone.example.RawMapreduce<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.matthewrathbone.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-mapreduce<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>java-mapreduce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>cloudera<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>进入到<code>hadoop-framework-examples-master/java-mapreduce/src/main/java/com/matthewrathbone/example/</code>目录下，用文本编辑器或者其他IDE对<code>RawMapreduce.java</code>进行修改编辑操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo//image-20211015134728548.png" alt="image-20211015134728548"></p>
<ul>
<li>找到这个函数，将<kbd>1</kbd>、<kbd>2</kbd>、<kbd>3</kbd>、<kbd>4</kbd>内容修改成如上图所示</li>
</ul>
<blockquote>
<p>注意：</p>
<ol>
<li>路径名称可以自己设置，此位置只是示例，如果修改成其他名称请注意在后续操作中需要将名称进行替换</li>
<li>这一个步骤可以不进行操作，可以在后续运行hadoop命令时进行现场传参，但是你会后悔的</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>将老师在群里发的<code>user.txt</code>、<code>transactions.txt</code>文件上传到自己服务器或者虚拟机中，将<code>hadoop-framework-examples-master/</code>这个文件夹也一并上传到虚拟机或者服务器中。</p>
<blockquote>
<p>提供一个小命令：<a href="https://www.runoob.com/linux/linux-comm-scp.html">scp</a></p>
<p><code>scp [-r[如果是一个文件夹的话]] [你需要上传的资源] [你需要上传到哪里]</code></p>
<p>示例：<code>scp ~/test.txt root@root.com:~ </code></p>
</blockquote>
<p>以下教程将默认你将文件传输到了用户根目录即<code>~</code>中，如有区别，请自行替换</p>
<h2 id="创建以及上传文件到Hadoop"><a href="#创建以及上传文件到Hadoop" class="headerlink" title="创建以及上传文件到Hadoop"></a>创建以及上传文件到Hadoop</h2><ol>
<li><p>进入到你上传的文件夹中</p>
<p><code>cd ~/hadoop-framework-examples-master/java-mapreduce/</code></p>
</li>
<li><p>执行命令对项目进行打包（时间可能较长，请耐心等待）</p>
<p><code>mvn package assembly:single</code></p>
</li>
<li><p>检查是否生成相关文件</p>
<p>进入到taeget文件夹中，查看是否有下图所示的文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo//image-20211015140444279.png" alt="image-20211015140444279"></p>
</li>
<li><p>进入到hadoop的目录下</p>
<p>默认是<code>cd /usr/local/hadoop</code></p>
</li>
<li><p>新建目录集<code>/user/path/users</code>与<code>/user/path/transactions/</code> 请注意，目录需要一层层创建，否则会出错</p>
<ol>
<li><code>bin/hadoop fs -mkdir /user</code></li>
<li><code>bin/hadoop fs -mkdir /user/path</code></li>
<li><code>bin/hadoop fs -mkdir /user/path/transactions</code></li>
<li><code>bin/hadoop fs -mkdir /user/path/users</code></li>
</ol>
<blockquote>
<p>注意：</p>
<p>这里只需要创建两个文件夹即可，因为剩下的两个文件夹会在hadoop运行的时自动生成，但是在更改文件的时候仍需要进行更改去给其指定目录文件</p>
</blockquote>
</li>
<li><p>上传文件到<code>users</code>与<code>transactions</code>文件夹中</p>
<ul>
<li><code>bin/hadoop fs -put ~/users.txt /user/path/users</code></li>
<li><code>bin/hadoop fs -put ~/transactions.txt /user/path/transactions</code></li>
</ul>
</li>
</ol>
<h2 id="使用Hadoop运行代码"><a href="#使用Hadoop运行代码" class="headerlink" title="使用Hadoop运行代码"></a>使用Hadoop运行代码</h2><p>首先启动hadoop（如果已经启动了便可以进行忽略）</p>
<p><code> sbin/start-dfs.sh</code></p>
<p>使用命令<code>bin/hadoop jar ~/hadoop-framework-examples-master/java-mapreduce/target/java-mapreduce-1.0-SNAPSHOT-jar-with-dependencies.jar</code> 进行运行</p>
<p>等待运行结束之后，从浏览器中输入虚拟机或者服务器的<code>ip:9870</code>，进入到浏览器界面，打开到文件管理器中，在<code>/user/path/output</code>中便可以看到所运行的文件结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo//image-20211015141906781.png" alt="image-20211015141906781"></p>
<h1 id="无脑操作"> 无脑操作</h1>

<p>由于教程足够无脑，基本不需要任何其他操作，因此</p>
<p><strong>进入到服务器或者虚拟机终端之后，请严格按照步骤进行一步步进行</strong></p>
<ol>
<li><p><code>su - hadoop</code></p>
</li>
<li><p><code>cd ~</code></p>
</li>
<li><p><code>git clone https://gitee.com/zhycarge/Hadoop_3.git</code></p>
</li>
<li><p><code>cd Hadoop_3/java-mapreduce</code></p>
</li>
<li><p><code>mvn package assembly:single</code></p>
</li>
<li><p>进入到hadoop目录(一般来讲都是)</p>
<p><code>cd /usr/local/hadoop</code></p>
</li>
<li><p><code>bin/hadoop fs -mkdir /user</code></p>
</li>
<li><p><code>bin/hadoop fs -mkdir /user/path</code></p>
</li>
<li><p><code>bin/hadoop fs -mkdir /user/path/transactions</code></p>
</li>
<li><p><code>bin/hadoop fs -mkdir /user/path/users</code></p>
</li>
<li><p><code>bin/hadoop fs -put ~/Hadoop_3/use/users.txt /user/path/users</code></p>
</li>
<li><p><code>bin/hadoop fs -put ~/Hadoop_3/use/transactions.txt /user/path/transactions</code></p>
</li>
<li><p><code>bin/hadoop jar ~/Hadoop_3/java-mapreduce/target/java-mapreduce-1.0-SNAPSHOT-jar-with-dependencies.jar</code></p>
</li>
</ol>
<p>之后稍等片刻，访问自己的hadoop界面，就会发现在界面下多了一个user文件夹，在里面的<code>path/output</code>文件夹里面便存放着Hadoop计算好的文件。然后如果需要的话便可以直接进行下载</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>如有问题，请留言进行联系我</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>使用tf进行基本的矩阵运算</title>
    <url>/OLD_BLOG/2021/07/26/tf%E8%BF%9B%E8%A1%8C%E5%9F%BA%E6%9C%AC%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试根据b站大佬来扩充自己的知识面</p>
<p>本人使用的环境为tf2.0但是b站视频是1.0，因此与视频会稍有不符合</p>
<span id="more"></span>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1QJ411W7SS?p=15">B站视频</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="代码片段1"><a href="#代码片段1" class="headerlink" title="代码片段1"></a>代码片段1</h2><p>这里仅贴出跟着b站视频写出来的代码，并在有些区域会有些许注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># data1 = tf.placeholder(tf.float32)        # 该方法在2.0版本之后就已经被弃用</span></span><br><span class="line"><span class="comment"># data2 = tf.placeholder(tf.float32)        # 该方法在2.0版本之后就已经被弃用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.0之后使用</span></span><br><span class="line">tf.compat.v1.disable_eager_execution()  <span class="comment"># 初始化新版本的模块化更新信息</span></span><br><span class="line"></span><br><span class="line">data1 = tf.compat.v1.placeholder(tf.float32)</span><br><span class="line">data2 = tf.compat.v1.placeholder(tf.float32)</span><br><span class="line">dataAdd = tf.add(data1, data2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with tf.sesson() as sess: # 该方法已经在2.0之后弃用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.0之后使用</span></span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(dataAdd,  feed_dict=&#123;data1: <span class="number">6</span>, data2: <span class="number">2</span>&#125;))</span><br><span class="line">    <span class="comment"># feed_dict 为其中的内容进行赋值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8.0</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<h2 id="代码片段2"><a href="#代码片段2" class="headerlink" title="代码片段2"></a>代码片段2</h2><p>此部分代码表明Python的矩阵维度定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">tf.compat.v1.disable_eager_execution()  <span class="comment"># 初始化新版本的模块化更新信息</span></span><br><span class="line"></span><br><span class="line">data1 = tf.compat.v1.constant([[<span class="number">6</span>, <span class="number">6</span>]])  <span class="comment"># 一行两列</span></span><br><span class="line">data2 = tf.compat.v1.constant([[<span class="number">2</span>], [<span class="number">2</span>]])  <span class="comment"># 两行一列</span></span><br><span class="line">data3 = tf.compat.v1.constant([[<span class="number">3</span>, <span class="number">3</span>]])  <span class="comment"># 一行两列</span></span><br><span class="line">data4 = tf.compat.v1.constant([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])  <span class="comment"># 三行两列</span></span><br><span class="line">data5 = tf.compat.v1.constant([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                               [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">                               [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])  <span class="comment"># 三行三列，为了更好区分，因此加了回车</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data5.shape)  <span class="comment"># 打印矩阵维度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(data5))  <span class="comment"># 输出整个矩阵</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(data5[<span class="number">0</span>]))  <span class="comment"># 输出矩阵的某一行</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(data5[:, <span class="number">0</span>]))  <span class="comment"># 输出矩阵的某一列</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(data5[<span class="number">0</span>][<span class="number">0</span>]))  <span class="comment"># 输出矩阵第一行第一列</span></span><br><span class="line"><span class="comment"># 矩阵的起始位置都是0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(3, 3)</span><br><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]</span><br><span class="line"> [7 8 9]]</span><br><span class="line">[1 2 3]</span><br><span class="line">[1 4 7]</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>片段</p>
<h2 id="代码片段3"><a href="#代码片段3" class="headerlink" title="代码片段3"></a>代码片段3</h2><p>此段代码讲解矩阵乘法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 矩阵乘法</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;TF_CPP_MIN_LOG_LEVEL&quot;</span>] = <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line">tf.compat.v1.disable_eager_execution()  <span class="comment"># 初始化新版本的模块化更新信息</span></span><br><span class="line"></span><br><span class="line">data1 = tf.compat.v1.constant([[<span class="number">6</span>, <span class="number">6</span>]])  <span class="comment"># 一行两列</span></span><br><span class="line">data2 = tf.compat.v1.constant([[<span class="number">2</span>], [<span class="number">2</span>]])  <span class="comment"># 两行一列</span></span><br><span class="line">data3 = tf.compat.v1.constant([[<span class="number">3</span>, <span class="number">3</span>]])  <span class="comment"># 一行两列</span></span><br><span class="line">data4 = tf.compat.v1.constant([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])  <span class="comment"># 三行两列</span></span><br><span class="line">data5 = tf.compat.v1.constant([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                               [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">                               [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])  <span class="comment"># 三行三列，为了更好区分，因此加了回车</span></span><br><span class="line">matMul = tf.matmul(data1, data2)</span><br><span class="line">matMul2 = tf.multiply(data1, data2)     <span class="comment"># 类似于加法，对应元素相乘</span></span><br><span class="line">matAdd = tf.add(data1, data3)</span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(matMul))     <span class="comment"># 一维</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(matAdd))     <span class="comment"># 二维</span></span><br><span class="line">    <span class="built_in">print</span>(sess.run(matMul2))</span><br><span class="line">    <span class="built_in">print</span>(sess.run([matMul, matAdd]))   <span class="comment"># 可以通过中括号，一次性打印多个内容</span></span><br><span class="line"><span class="comment"># MK x KN = MN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[24]]</span><br><span class="line">[[9 9]]</span><br><span class="line">[[12 12]</span><br><span class="line"> [12 12]]</span><br><span class="line">[array([[24]], dtype=int32), array([[9, 9]], dtype=int32)]</span><br></pre></td></tr></table></figure>



<h2 id="代码片段4"><a href="#代码片段4" class="headerlink" title="代码片段4"></a>代码片段4</h2><p>如何定义一个基本矩阵</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;TF_CPP_MIN_LOG_LEVEL&quot;</span>] = <span class="string">&quot;2&quot;</span></span><br><span class="line">tf.compat.v1.disable_eager_execution()  <span class="comment"># 初始化新版本的模块化更新信息</span></span><br><span class="line"></span><br><span class="line">mat0 = tf.constant([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])  <span class="comment"># 自己动手，丰衣足食</span></span><br><span class="line">mat1 = tf.zeros([<span class="number">2</span>, <span class="number">3</span>])     <span class="comment"># 定义一个三行两列的空矩阵</span></span><br><span class="line">mat2 = tf.ones([<span class="number">3</span>, <span class="number">2</span>])      <span class="comment"># 定义一个三行两列的1矩阵</span></span><br><span class="line">mat3 = tf.fill([<span class="number">2</span>, <span class="number">3</span>], <span class="number">15</span>)</span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(mat0))</span><br><span class="line">    <span class="built_in">print</span>(sess.run(mat1))</span><br><span class="line">    <span class="built_in">print</span>(sess.run(mat2))</span><br><span class="line">    <span class="built_in">print</span>(sess.run(mat3))</span><br></pre></td></tr></table></figure>



<p>运行结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[0 0 0]</span><br><span class="line"> [0 0 0]]</span><br><span class="line">[[0. 0. 0.]</span><br><span class="line"> [0. 0. 0.]]</span><br><span class="line">[[1. 1.]</span><br><span class="line"> [1. 1.]</span><br><span class="line"> [1. 1.]]</span><br><span class="line">[[15 15 15]</span><br><span class="line"> [15 15 15]]</span><br></pre></td></tr></table></figure>



<h2 id="代码片段5"><a href="#代码片段5" class="headerlink" title="代码片段5"></a>代码片段5</h2><p>如何定义一个非基本矩阵</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何定义一个矩阵（非基础）</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&quot;TF_CPP_MIN_LOG_LEVEL&quot;</span>] = <span class="string">&quot;2&quot;</span></span><br><span class="line">tf.compat.v1.disable_eager_execution()  <span class="comment"># 初始化新版本的模块化更新信息</span></span><br><span class="line"></span><br><span class="line">mat1 = tf.constant([[<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]])</span><br><span class="line">mat2 = tf.zeros_like(mat1)  <span class="comment"># 定义一个全零矩阵，维度与mat1相同</span></span><br><span class="line">mat3 = tf.linspace(<span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">11</span>)    <span class="comment"># 创建一个从0-2的一个中间具有11个元素的矩阵</span></span><br><span class="line">mat4 = tf.compat.v1.random_uniform([<span class="number">2</span>, <span class="number">3</span>], -<span class="number">1</span>, <span class="number">2</span>)   <span class="comment"># 创建一个2×3的矩阵，并且矩阵数字为 (-1)-2 之间</span></span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(mat2))</span><br><span class="line">    <span class="built_in">print</span>(sess.run(mat3))</span><br><span class="line">    <span class="built_in">print</span>(sess.run(mat4))</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[0]</span><br><span class="line"> [0]</span><br><span class="line"> [0]]</span><br><span class="line">[0.        0.2       0.4       0.6       0.8       1.        1.2</span><br><span class="line"> 1.4       1.6       1.8000001 2.       ]</span><br><span class="line">[[-0.988165   0.3698578 -0.68531  ]</span><br><span class="line"> [-0.7001637  1.0496833  1.1087246]]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="在tf中矩阵的定义"><a href="#在tf中矩阵的定义" class="headerlink" title="在tf中矩阵的定义"></a>在tf中矩阵的定义</h2><p>在python中，定义一个矩阵可以采用以下方法进行定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中矩阵的定义</span></span><br><span class="line"><span class="comment"># 一行两列:[[6,6]]</span></span><br><span class="line"><span class="comment"># 两行两列:[[6,6],[6,6]]</span></span><br></pre></td></tr></table></figure>



<h2 id="什么是placeholder"><a href="#什么是placeholder" class="headerlink" title="什么是placeholder"></a>什么是<code>placeholder</code></h2><blockquote>
<p>Tensorflow中的palceholder，中文翻译为占位符，什么意思呢？</p>
<p>在Tensoflow2.0以前，还是静态图的设计思想，整个设计理念是计算流图，在编写程序时，首先构筑整个系统的graph，代码并不会直接生效，这一点和python的其他数值计算库（如Numpy等）不同，graph为静态的，在实际的运行时，启动一个session，程序才会真正的运行。这样做的好处就是：避免反复地切换底层程序实际运行的上下文，tensorflow帮你优化整个系统的代码。我们知道，很多python程序的底层为C语言或者其他语言，执行一行脚本，就要切换一次，是有成本的，tensorflow通过计算流图的方式，可以帮你优化整个session需要执行的代码。</p>
<p>在代码层面，每一个tensor值在graph上都是一个op，当我们将train数据分成一个个minibatch然后传入网络进行训练时，每一个minibatch都将是一个op，这样的话，一副graph上的op未免太多，也会产生巨大的开销；于是就有了tf.placeholder()，我们每次可以将 一个minibatch传入到x = tf.placeholder(tf.float32,[None,32])上，下一次传入的x都替换掉上一次传入的x，这样就对于所有传入的minibatch x就只会产生一个op，不会产生其他多余的op，进而减少了graph的开销。<br>——<a href="https://blog.csdn.net/caoyuan666/article/details/104706756">CSDN</a></p>
</blockquote>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="错误汇总"><a href="#错误汇总" class="headerlink" title="错误汇总"></a>错误汇总</h2><h4 id="报错信息为AttributeError-module-39-tensorflow-39-has-no-attribute-39-placeholder-39"><a href="#报错信息为AttributeError-module-39-tensorflow-39-has-no-attribute-39-placeholder-39" class="headerlink" title="报错信息为AttributeError: module &#39;tensorflow&#39; has no attribute &#39;placeholder&#39;"></a>报错信息为<code>AttributeError: module &#39;tensorflow&#39; has no attribute &#39;placeholder&#39;</code></h4><p>由于本人使用的环境不同，根据<a href="https://blog.csdn.net/caoyuan666/article/details/104706756">CSDN</a>上的信息而言，表明在tf版本2.0之后，该方法就已经被进行了弃用，因此我们需要寻找到2.0版本的对应方法，对应方法已经在相关代码片段中进行提及</p>
]]></content>
      <categories>
        <category>study</category>
        <category>视觉</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>windows安全中心打不开defender的完美解决方法</title>
    <url>/OLD_BLOG/2022/04/07/windows%E5%AE%89%E5%85%A8%E4%B8%AD%E5%BF%83%E6%89%93%E4%B8%8D%E5%BC%80defender%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此内容为转载博客内容，转载信息如下：</p>
<blockquote>
<p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href="https://blog.csdn.net/u013546553/article/details/122156127">https://blog.csdn.net/u013546553/article/details/122156127</a></p>
</blockquote>
<span id="more"></span>
<p>博主仅仅使用到第一个问题便得到解决，后续命令真实性有待探究，在转载过程中，可能出现命令有误，因此推荐从原博客进行获取</p>
<div id="content_views" class="markdown_views prism-atom-one-dark">
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h1><a name="t0"></a><a id="windowsdefenderwin11Windows_0"></a>windows安全中心打不开defender的解决方法，适用于win11，理论上你可以由此方法修复所有Windows自带应用</h1> 
<h2><a name="t1"></a><a id="_1"></a>开端</h2> 
<p>因为我之前是<a href="https://blog.csdn.net/u013546553/article/details/121213366?spm=1001.2014.3001.5501">不重装系统修复的系统</a>方式恢复了我的用户文件，所以有点后遗症，一个表现就是<br> windows安全中心打不开，错误提示如下</p> 
<p><img src="https://img-blog.csdnimg.cn/e3cb77a573f245ec8506d5fd0005a75b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rex5aSc5ZCs6KGo,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述">虽然我不用defender杀毒，但是他打不开UI界面，但是本体还在运行，所以造成我用不了一些比较不和谐的东西，每次用的时候都要用360接管defender关闭实时防护，就很麻烦，所以必须修复这个问题。</p> 
<h2><a name="t2"></a><a id="_7"></a>解决方法</h2> 
<p>因为我知道问题的原因，是我手动恢复原来账户文件，肯定哪里账户SID或者路径没对上。但是我并不知道哪里没对上，所以我需要黑盒的方式进行排除。<br> 以下是我的修复之旅，这些方式将解决你打不开defender的问题，请务必看完༼ つ ◕_◕ ༽つ</p> 
<ol><li><strong>方法1 <em>首先当然是康康一般的修复方式，重装这个defender的UI程序</em></strong><br> 就很巧，搜索后发现这个安全中心打不开好像是个win11通病，很多人更新后也会打不开安全中心，其中这个UI管理程序的名字叫<strong>Microsoft.SecHealthUI</strong>，于是开始了修复<br> 右键开始菜单选择**Windows终端（管理员）**打开<br> <img src="https://img-blog.csdnimg.cn/e802f887ac944a138b344da33f2102ad.png" alt="在这里插入图片描述"><br> 其他方式也行，只要是powershell的管理员就行了，输入以下命令</li></ol> 
<pre class="prettyprint"><code class="prism language-rust has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token class-name">Get</span><span class="token operator">-</span><span class="token class-name">AppxPackage</span> <span class="token class-name">Microsoft</span><span class="token punctuation">.</span><span class="token class-name">SecHealthUI</span> <span class="token operator">-</span><span class="token class-name">AllUsers</span>
<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre> 
<p><img src="https://img-blog.csdnimg.cn/fd5b02da020d419aaad6bc4a1751697f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rex5aSc5ZCs6KGo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br> 获取到详细的安装路径之后复制这个红框路径<strong>xxxxx</strong>填入以下命令的xxxxx执行</p> 
<pre class="prettyprint"><code class="prism language-rust has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token class-name">Get</span><span class="token operator">-</span><span class="token class-name">AppXPackage</span> <span class="token operator">*</span><span class="token class-name">Microsoft</span><span class="token punctuation">.</span><span class="token class-name">SecHealthUI</span><span class="token operator">*</span> <span class="token operator">-</span><span class="token class-name">AllUsers</span> <span class="token operator">|</span> <span class="token class-name">Foreach</span> <span class="token punctuation">&#123;<!-- --></span><span class="token class-name">Add</span><span class="token operator">-</span><span class="token class-name">AppxPackage</span> <span class="token operator">-</span><span class="token class-name">DisableDevelopmentMode</span> <span class="token operator">-</span><span class="token class-name">Register</span> “xxxxx\<span class="token class-name">AppXManifest</span><span class="token punctuation">.</span>xml”<span class="token punctuation">&#125;</span>
<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre> 
<p>再执行</p> 
<pre class="prettyprint"><code class="prism language-rust has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token class-name">Get</span><span class="token operator">-</span><span class="token class-name">AppxPackage</span> <span class="token class-name">Microsoft</span><span class="token punctuation">.</span><span class="token class-name">SecHealthUI</span> <span class="token operator">-</span><span class="token class-name">AllUsers</span> <span class="token operator">|</span> <span class="token class-name">Reset</span><span class="token operator">-</span><span class="token class-name">AppxPackage</span>
<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li></ul></pre> 
<p>此时看看安全中心能不能打开，如果不能继续往下看，我就是不行的</p> 
<ol start="2"><li><strong>方法2 <em>defender本体在运行，Microsoft.SecHealthUI也重装了，还有问题只能说明是哪里配置出问题了</em></strong><br> 首先打开win+R 输入gpedit.msc 打开组策略确保defender没被禁用，检查计算机配置-管理模板-Windows组件-Microsoft defender防病毒，如下图，红框内的内容都保证是未配置。<br> <img src="https://img-blog.csdnimg.cn/901502de759c4830b4ec7c193713ad03.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rex5aSc5ZCs6KGo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">确认组策略没问题后，我们需要排除注册表文件的配置是不是正确的，但是我没有微软的文档，也没有时间去看，那我们还是只能通过黑盒的方式进行排除，最简单的方式就是右键开始菜单，选择计算机管理，添加一个新的administrators组用户门之后登录该账户打开安全中心看看能不能正常打开，如果可以正常打开，直接跳过以下powershell命令：</li></ol> 
<pre class="prettyprint"><code class="prism language-rust has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">依次执行
sfc <span class="token operator">/</span>scannow
<span class="token constant">DISM</span><span class="token punctuation">.</span>exe <span class="token operator">/</span><span class="token class-name">Online</span> <span class="token operator">/</span><span class="token class-name">Cleanup</span><span class="token operator">-</span>image <span class="token operator">/</span><span class="token class-name">Scanhealth</span>
<span class="token constant">DISM</span><span class="token punctuation">.</span>exe <span class="token operator">/</span><span class="token class-name">Online</span> <span class="token operator">/</span><span class="token class-name">Cleanup</span><span class="token operator">-</span>image <span class="token operator">/</span><span class="token class-name">Restorehealth</span>
sfc <span class="token operator">/</span>scannow
<span class="token class-name">Get</span><span class="token operator">-</span><span class="token class-name">AppXPackage</span> <span class="token operator">-</span><span class="token class-name">AllUsers</span> <span class="token operator">|</span> <span class="token class-name">Foreach</span> <span class="token punctuation">&#123;<!-- --></span><span class="token class-name">Add</span><span class="token operator">-</span><span class="token class-name">AppxPackage</span> <span class="token operator">-</span><span class="token class-name">DisableDevelopmentMode</span> <span class="token operator">-</span><span class="token class-name">Register</span> “$<span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">.</span><span class="token class-name">InstallLocation</span><span class="token punctuation">)</span>\<span class="token class-name">AppXManifest</span><span class="token punctuation">.</span>xml”<span class="token punctuation">&#125;</span>
<span class="token class-name">Get</span><span class="token operator">-</span><span class="token class-name">AppxPackage</span> <span class="token class-name">Microsoft</span><span class="token punctuation">.</span><span class="token class-name">SecHealthUI</span> <span class="token operator">-</span><span class="token class-name">AllUsers</span> <span class="token operator">|</span> <span class="token class-name">Reset</span><span class="token operator">-</span><span class="token class-name">AppxPackage</span>
<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li></ul></pre> 
<p><em>或者执行命令后也无法正常打开，那么你需要重新再新建一个administrators组的用户，如果也不行，那么很不幸需要<a href="https://blog.csdn.net/u013546553/article/details/121213366?spm=1001.2014.3001.5501">不重装系统修复的系统</a>了。。。</em></p> 
<p>可以正常打开Windows安全中心后，就是改好我们原来用户的<a href="https://so.csdn.net/so/search?q=%E6%B3%A8%E5%86%8C%E8%A1%A8&amp;spm=1001.2101.3001.7020" target="_blank" class="hl hl-1" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%B3%A8%E5%86%8C%E8%A1%A8&amp;spm=1001.2101.3001.7020&quot;}" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%B3%A8%E5%86%8C%E8%A1%A8&amp;spm=1001.2101.3001.7020&quot;}" data-tit="注册表" data-pretit="注册表">注册表</a>文件就行了，事实上这个时候我们已经修复好了打不开defender的的问题，但是我是想修复我原来的用户，所以继续</p> 
<p>注册表文件我们用黑盒的方式，把你新建账户的与Microsoft.SecHealthUI有关的注册表信息临摹一遍<br> 到你原来的账户就行了，所以你需要改以下注册表内容，我并不知道是那条生效了，所以就将SID不一致的部分全改了，这里用RegWorkshop修改注册表会比较好操作<br> 搜索Microsoft.SecHealthUI<br> <img src="https://img-blog.csdnimg.cn/c186f25047da4237bdfc0312f6f44ee4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rex5aSc5ZCs6KGo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">然后就是临摹了，将搜索到的路径内包含SID最大值目录内的内容（也就是没问题的新用户的SID）不覆盖复制到你要修复的用户SID下（要修复的用户SID在HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList下查看，逐个查看ProfileImagePath内地址，与你要修复的用户名字对上了的就是了，如果是administrator就是500那个了），如果没有要修复的用户SID目录就手动新建，遇到权限问题更改所有者到当前用户就可以了，修改完之后再改回去。<br> <img src="https://img-blog.csdnimg.cn/f14332087ae247c991aceff39436cd91.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rex5aSc5ZCs6KGo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="红框内就是SID了"></p> 
<p>这是我修复后搜索的，我记得我修复的时候好像就改了2，3个目录之后就可以了。应该工作量不大。<br> 修改完后重启，<br> 之后将C:\Users\新的用户名\AppData\Local\Packages\Microsoft.SecHealthUI_xxxxxx内容复制到要修复的对应用户目录下（不知道需不需要，应该会自动生成，但是我当时复制了）<br> 然后重复<strong>方法1</strong>的命令就可以打开了。<br> <img src="https://img-blog.csdnimg.cn/2f84e2294a294a2bb70cdd6ff5c47cc3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rex5aSc5ZCs6KGo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
                </div>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>windows终端配置代理</title>
    <url>/OLD_BLOG/2022/05/05/windows%E7%BB%88%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于学校校园网过于优秀，在使用命令行往 <code>GitHub</code>上提交仓库代码的时候往往会因为<code>time out</code>而无法提交。所以配置一下<code>Windows</code>下的命令行代理。</p>
<span id="more"></span>



<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><ul>
<li>一台<code>Windows</code>电脑</li>
<li>一个可以使用的科学上网工具(如<code>trojan</code>or其他)</li>
<li><code>proxychains-windows</code></li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="下载proxychains-windows"><a href="#下载proxychains-windows" class="headerlink" title="下载proxychains-windows"></a>下载<code>proxychains-windows</code></h2><p>代码仓库地址：<a href="https://github.com/shunf4/proxychains-windows/releases">https://github.com/shunf4/proxychains-windows/releases</a></p>
<p>选择适合自己的进行解压即可</p>
<h2 id="配置proxychains-windows"><a href="#配置proxychains-windows" class="headerlink" title="配置proxychains-windows"></a>配置<code>proxychains-windows</code></h2><p>在博客更新时， <code>proxychains-windows</code>更新到了 <code>0.68</code>版本</p>
<p>因此博客内容根据此进行更新</p>
<p>将下载到的压缩包进行解压，并且放到一个固定的位置</p>
<p>在系统环境变量中的 <code>Path</code>一栏中添加你的固定地址，如：<code>C:/proxychains/</code></p>
<p>之后添加一个系统变量：变量名称为： <code>PROXYCHAINS_CONF_FILE</code>，变量值为你的配置文件地址，例如：<code>E:\proxychains\proxychains.conf</code></p>
<p>之后打开文件夹，修改其中的 <code>proxychains.conf</code>文件，将最后一行的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line">socks5 localhost [端口号，对应着你的科学上网工具的入站地址]</span><br></pre></td></tr></table></figure>

<p>之后找到行数大约为 <code>210</code>行的代码配置，将 <code>400</code>变成 <code>200</code>（降低它的提示内容，使其仅报错<code>error</code>的内容）</p>
<p>最后将程序更名为一个你喜欢的名称：例如更改名称为 <code>proxychains.exe</code></p>
<h2 id="尝试使用"><a href="#尝试使用" class="headerlink" title="尝试使用"></a>尝试使用</h2><p>打开终端（需要提前先配置好环境变量，否则需要重新打开进行加载）</p>
<p>输入 <code>proxychains curl google.com</code></p>
<p>查看结果，如果显示<code>301</code>等非<code>404</code>信息，则证明配置完成，在后续使用过程中可以在前面加入 <code>proxychains</code>进行使用代理</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>由于要在<code>pycharm</code>中进行使用，可能会更新不需要前缀进行访问的代码，或如果有需要可以留下评论，后续可能更新</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/shunf4/proxychains-windows/blob/master/README_zh-Hans.md">官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
        <category>日常</category>
      </categories>
      <tags>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建树莓派</title>
    <url>/OLD_BLOG/2021/07/28/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章只是记录一下自己从零开始搭建树莓派的辛酸历程，对自己出现以及产生的问题做了个汇总。其中内部有些资源是查到了大佬的解决方法之后懂得了了解的，相关问题的源链接会放在文章底。<br><strong>本篇文章搬运于自己CSDN</strong></p>
<span id="more"></span>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="树莓派wifi配置（linux系统）"><a href="#树莓派wifi配置（linux系统）" class="headerlink" title="树莓派wifi配置（linux系统）"></a>树莓派wifi配置（linux系统）</h3><p>本方法运用于树莓派没有相关hdmi接口只能使用vnc进行链接的方法<br>将树莓派上的tf卡拔下来，插到电脑上<br>使用管理员权限打开<code>/rootfs/etc/wpa_supplicant</code><br>然后使用文本编辑器打开其中的wpa_supplicant.conf文件（没有的需要自己创建）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">country=CN</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">	ssid=<span class="string">&quot;wifi名称&quot;</span></span><br><span class="line">	psk=<span class="string">&quot;wifi密码&quot;</span></span><br><span class="line">	<span class="comment">#自己wifi的加密方式（一般有密码的是下面这个）</span></span><br><span class="line">	key_mgmt=WPA-PSK</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#如果有其他的可以设置下面的，没有可以删掉</span></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=“wifi名称”</span><br><span class="line">        psk=<span class="string">&quot;wifi密码“</span></span><br><span class="line"><span class="string">        key_mgmt=WPA-PSK</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">#wifi没有密码：</span></span><br><span class="line"><span class="string">network=&#123;</span></span><br><span class="line"><span class="string">    ssid=&quot;</span>testing<span class="string">&quot;</span></span><br><span class="line"><span class="string">    key_mgmt=NONE</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">#你的WIFI是隐藏wifi:</span></span><br><span class="line"><span class="string">network=&#123;</span></span><br><span class="line"><span class="string">    ssid=&quot;</span>yourHiddenSSID<span class="string">&quot;</span></span><br><span class="line"><span class="string">    scan_ssid=1</span></span><br><span class="line"><span class="string">    psk=&quot;</span>Your_wifi_password<span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>之后保存文件之后将tf卡插入回树莓派启动之后便可以发现你的树莓派连接到wifi了</p>
<h3 id="树莓派换源"><a href="#树莓派换源" class="headerlink" title="树莓派换源"></a>树莓派换源</h3><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>由于身处国内，所以要从外网get资料并不是那么容易，因此我们需要将树莓派进行换源，达到下载相关软件包的速度快捷。<br>使用命令：<br><code>lsb_release -a</code>    查询自己的树莓派属于哪个版本</p>
<p><img src="https://img-blog.csdnimg.cn/20210203094734646.png" alt="版本对应"></p>
<p>发现自己版本属于buster版本<br>之后使用以下命令<br><code>sudo nano /etc/apt/source.list</code><br>然后将里面的源进行注释掉，之后找到相关对应版本的国内源（清华啥的），之后进行替换即可。<br>之后运行下面的命令将相关包进行更新<br><code>sudo apt update </code>    从源获取相关的更新包<br><code>sudo apt upgrade</code>    进行更新</p>
<p>PS：其中nano为文本编辑器，我不知道怎么从外面复制内容到这个编辑器里面，所以一般我直接采用将tf卡直接插到电脑上进行修改（需要电脑系统是linux，windows系统不支持树莓派的系统盘格式）</p>
<h3 id="会出现的问题"><a href="#会出现的问题" class="headerlink" title="会出现的问题"></a>会出现的问题</h3><p>如果你的源版本与你的树莓派系统版本不对应的话，则会出现依赖错误，导致你后面安装啥也安装不了<br><img src="https://img-blog.csdnimg.cn/20210203095054961.png" alt="血泪史"></p>
<h2 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h2><p>孩子只是一个萌新小白，对于自身发现的问题以及相关问题在网上搜了好久也没找到，所以自力更生，防止自己以后忘记，留个备注，如有错误还望多多海涵～</p>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="linux查询你的wifi名称及密码"><a href="#linux查询你的wifi名称及密码" class="headerlink" title="linux查询你的wifi名称及密码"></a>linux查询你的wifi名称及密码</h3><p>命令如下：<br><code>cd /etc/NetworkManager/system-connections</code><br><code>ls</code><br><code>sudo cat 你想查询的wifi名称</code><br>PS：网上教程，原问题搜不到了，这个方法没查出来过wifi密码，有待改进</p>
<h2 id="后续更新"><a href="#后续更新" class="headerlink" title="后续更新"></a>后续更新</h2><h3 id="2021-03-05更新"><a href="#2021-03-05更新" class="headerlink" title="2021/03/05更新"></a>2021/03/05更新</h3><p>现在访问使用树莓派更新会面临着更新系统的问题，然后也是官方源，感觉好慢因此<br>终端中输入下面这个命令进入树莓派系统源的地方</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources<span class="meta">.list</span>.d/raspi<span class="meta">.list</span></span><br></pre></td></tr></table></figure>
<p>将上面的那个注释掉，并且加入下面的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/raspberrypi/</span> buster main ui</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意<br>以上源适用于buster版本的树莓派系统，系统不符可能会造成依赖问题</p>
</blockquote>
<h2 id="相关原问题以及解答"><a href="#相关原问题以及解答" class="headerlink" title="相关原问题以及解答"></a>相关原问题以及解答</h2><p>树莓派换源以及依赖问题：<a href="https://blog.csdn.net/fightingboom/article/details/106879019?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-7&spm=1001.2101.3001.4242">点我</a><br>树莓派wifi配置：<a href="https://blog.csdn.net/bona020/article/details/79038914">点我</a><br>有一个讲的比较好的<a href="https://blog.csdn.net/weixin_45985341/article/details/113780422?spm=1001.2014.3001.5501">here</a><br>镜像源推荐<a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">清华源</a></p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github action对gitee进行同步</title>
    <url>/OLD_BLOG/2021/07/18/%E4%BD%BF%E7%94%A8github%20action%E5%AF%B9gitee%E8%BF%9B%E8%A1%8C%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近发现github action可以做好多的事情，尝试使用这个东西来将自己的两个仓库内容进行同步  </p>
<span id="more"></span>
<p>即使可以在本地的配置文件，将仓库同时关注到本地仓库上，但是如果更换仓库或者更换设备之后，就得重新配置，这不够懒，因此不符合我的想法，因此制作一个文章来记录一下相关操作  </p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/ssgeek/p/15009012.html">使用github action实现github到gitee的代码同步</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p><strong>先鸽着，等我下次换到linux上在写</strong>，如有急用可以看上面的，大概看了一下，问题不大</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>Github Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>使用opencv对图像进行缩放</title>
    <url>/OLD_BLOG/2021/07/28/%E4%BD%BF%E7%94%A8opencv%E5%AF%B9%E5%9B%BE%E5%83%8F%E8%BF%9B%E8%A1%8C%E7%BC%A9%E6%94%BE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>尝试根据b站大佬的相关视频，扩展自己的知识面以及知识水平</p>
<span id="more"></span>

<h1 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h1><p><a href="https://www.bilibili.com/video/BV1QJ411W7SS?p=25">b站视频</a></p>
<p><a href="https://blog.csdn.net/qq_40317204/article/details/105614120">最近临域插值</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/110754637">相关介绍</a></p>
<p><a href="https://www.cnblogs.com/sycy/p/4743620.html">双线性插值</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="现阶段图片缩放类型及相关方法"><a href="#现阶段图片缩放类型及相关方法" class="headerlink" title="现阶段图片缩放类型及相关方法"></a>现阶段图片缩放类型及相关方法</h2><h3 id="最近临域插值"><a href="#最近临域插值" class="headerlink" title="最近临域插值"></a>最近临域插值</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>假设原图像为10x20的图片，而想要将其缩放成为5x10的图片</p>
<p>使用目标图像的点，去表示原图像的点</p>
<p>​        （1,2） —&gt;        （2,4）</p>
<p>如何使用目标图像的点去推断原图像的点</p>
<p><code>newX = x*(原图像的行/目标图像的行)</code></p>
<p><code>newY = y*(原图像的列/目标图像的列)</code></p>
<p>注：如出现小数，需要取整</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>目标各像素点的灰度值代替源图像中与其最邻近像素的灰度值。</p>
<h4 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><ul>
<li>算法简单</li>
<li>相比于其他方法可以更好的去实现</li>
<li>容易出现色块现象</li>
<li>会破坏原图像的渐变关系</li>
</ul>
<h3 id="双线性插值"><a href="#双线性插值" class="headerlink" title="双线性插值"></a>双线性插值</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p><img src="https://user-images.githubusercontent.com/40520292/127262583-c546b29e-f01d-4063-bbf2-a2e90beea45f.png" alt="image"></p>
<p><code>A1 = 20%上面的点 +80%下面的点</code></p>
<p><code>B1 = 30%左面的点 +70%右边的点</code></p>
<p><code>1最终点 = A1*30% + A2*70%</code></p>
<p> <code>2最终点 = B1*20% + B2*80%</code></p>
<h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>双线性插值，又称为双线性内插。在数学上，双线性插值是有两个变量的插值函数的线性插值扩展，其核心思想是在两个方向分别进行一次线性插值</p>
<h4 id="优缺点分析-1"><a href="#优缺点分析-1" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><ul>
<li>内插值法计算量大</li>
<li>图像质量高，不会出现不连续的现象</li>
<li>具有低通滤波性质，可能会使得图像在一定程度上变得模糊</li>
</ul>
<h2 id="使用双线性插值对图像进行缩放处理"><a href="#使用双线性插值对图像进行缩放处理" class="headerlink" title="使用双线性插值对图像进行缩放处理"></a>使用双线性插值对图像进行缩放处理</h2><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;YT.jpg&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">imgInfo = img.shape     <span class="comment"># 获取图片信息</span></span><br><span class="line"><span class="built_in">print</span>(imgInfo)</span><br><span class="line">height = imgInfo[<span class="number">0</span>]     <span class="comment"># 图片高度</span></span><br><span class="line">weight = imgInfo[<span class="number">1</span>]     <span class="comment"># 图片宽度</span></span><br><span class="line">mode = imgInfo[<span class="number">2</span>]      <span class="comment"># 图片的组成方式</span></span><br><span class="line"><span class="comment"># 缩放:放大或者缩小     等比例或者非等比例</span></span><br><span class="line">dstHeight = <span class="built_in">int</span>(height*<span class="number">0.5</span>)</span><br><span class="line">dstWeight = <span class="built_in">int</span>(weight*<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片缩放类型： 最近临域插值    双线性插值（默认）   像素关系重采样     立方插值</span></span><br><span class="line">dst = cv2.resize(img, (dstWeight, dstHeight))</span><br><span class="line">cv2.imshow(<span class="string">&#x27;img&#x27;</span>, dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(3648, 2736, 3)</span><br></pre></td></tr></table></figure>

<p>原图：</p>
<p><img src="https://user-images.githubusercontent.com/40520292/127262602-7abc7bc3-10d8-4410-a75a-223a1e88590f.png" alt="image">  </p>
<p>运行结果：</p>
<p><img src="https://user-images.githubusercontent.com/40520292/127262621-e7cc2d88-e168-46e7-aba0-cffd88ed90c6.png" alt="image">  </p>
<h2 id="最近临域插值法实现照片缩放"><a href="#最近临域插值法实现照片缩放" class="headerlink" title="最近临域插值法实现照片缩放"></a>最近临域插值法实现照片缩放</h2><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol>
<li>先获取当前图片的信息</li>
<li>使用numpy创建一个空白模板</li>
<li>重新加载对应的图片</li>
</ol>
<h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">效果<span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;YT.jpg&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">imgHeight = imgInfo[<span class="number">0</span>]</span><br><span class="line">imgWeight = imgInfo[<span class="number">1</span>]</span><br><span class="line">dstHeight = <span class="built_in">int</span>(imgHeight / <span class="number">2</span>)</span><br><span class="line">dstWeight = <span class="built_in">int</span>(imgWeight/<span class="number">2</span>)</span><br><span class="line">dstImg = np.zeros((dstHeight, dstWeight, <span class="number">3</span>), np.uint8)   <span class="comment"># 0-255</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, dstHeight):       <span class="comment"># 对应的是行信息</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, dstWeight):   <span class="comment"># 对应的是列信息</span></span><br><span class="line">        iNew = <span class="built_in">int</span>(i*(imgHeight*<span class="number">1.0</span>/dstHeight))</span><br><span class="line">        jNew = <span class="built_in">int</span>(j*(imgWeight*<span class="number">1.0</span>/dstWeight))</span><br><span class="line">        dstImg[i, j] = img[iNew, jNew]</span><br><span class="line">cv2.imshow(<span class="string">&#x27;dst&#x27;</span>, dstImg)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p>原图：</p>
<p><img src="https://user-images.githubusercontent.com/40520292/127262608-6f5eda7e-a080-4c99-9db9-5c33fd90ac6c.png" alt="image">  </p>
<p>缩放后图片：</p>
<p><img src="https://user-images.githubusercontent.com/40520292/127262628-e988e823-6060-4d9c-94b2-26a6c13394e9.png" alt="image"></p>
]]></content>
      <categories>
        <category>study</category>
        <category>视觉</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>使用插件向ESP8266上传文件</title>
    <url>/OLD_BLOG/2021/11/01/%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E5%90%91ESP8266%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于想使用Esp8266实现一个小的服务器，基本的、在arduino中编写的界面并不能实现我们所需要的界面美观以及相关UI、JS的实现，因需要使用到esp8266的存储系统，来进一步提升界面的美观性以及实用性。</p>
<span id="more"></span>



<h1 id="转载文章参考"><a href="#转载文章参考" class="headerlink" title="转载文章参考"></a>转载文章参考</h1><p><strong>本篇文章转载自太极创客的<a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/upload-files/">3-3-2 通过Arduino IDE向闪存文件系统上传文件</a>，在此著名转载。同时不受博客尾部的著作声明影响</strong></p>
<p>太极创客文章版权声明：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20211101171324698.png" alt="image-20211101171324698"></p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://github.com/esp8266/arduino-esp8266fs-plugin/releases">插件的官方仓库</a></p>
<p><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/spiffs/upload-files/">太极创客对其的讲解说明</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>基本按照太极创客的步骤来就好，以下内容来自太极创客部分</p>
<h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><h5 id="1-下载-Arduino-ESP8266闪存文件插件程序"><a href="#1-下载-Arduino-ESP8266闪存文件插件程序" class="headerlink" title="1. 下载 Arduino-ESP8266闪存文件插件程序"></a>1. 下载 Arduino-ESP8266闪存文件插件程序</h5><p>您有两种方法可以下载该插件程序。</p>
<p><strong>第一种</strong>方法是通过<a href="https://github.com/esp8266/arduino-esp8266fs-plugin/releases">点击此链接进入 Arduino-ESP8266官方GitHub页面下载</a>。详情请见以下截图：</p>
<p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266fs-download.jpg" alt="esp8266fs下载页面">esp8266fs下载页面</p>
<p>由于GitHub网站服务器在国外，有些朋友登录该网站会有些困难。如果是这样的话，那么您也可以<a href="http://www.taichi-maker.com/homepage/download/#esp8266fs">点击此链接进入太极创客网站下载页面去下载该插件</a>。</p>
<h5 id="2-确定Arduino-IDE项目文件夹位置"><a href="#2-确定Arduino-IDE项目文件夹位置" class="headerlink" title="2. 确定Arduino IDE项目文件夹位置"></a>2. 确定Arduino IDE项目文件夹位置</h5><p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/Arduino-ide-preferences.jpg" alt="Arduino-ide-首选项菜单项">Arduino-ide-首选项菜单项</p>
<p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/Arduino-Project-Folder.jpg" alt="Arduino-IDE-项目文件夹位置">Arduino-IDE-项目文件夹位置</p>
<h5 id="3-通过资源管理器打开Arduino-IDE项目文件夹并建立tools文件夹"><a href="#3-通过资源管理器打开Arduino-IDE项目文件夹并建立tools文件夹" class="headerlink" title="3. 通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹"></a>3. 通过资源管理器打开Arduino IDE项目文件夹并建立tools文件夹</h5><p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266fs-tools-folder.jpg" alt="在项目文件夹中建立名称为tools的文件夹">在项目文件夹中建立名称为tools的文件夹</p>
<h5 id="4-解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中"><a href="#4-解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中" class="headerlink" title="4. 解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中"></a>4. 解压缩esp8266fs插件压缩包，并将解压缩后的文件内容粘贴到项目文件夹中</h5><p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266fs-unzip.jpg" alt="esp8266fs解压缩">esp8266fs解压缩</p>
<p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266fs-unzipped.jpg" alt="解压缩后可找到esp8266fs文件夹">解压缩后可找到esp8266fs文件夹</p>
<p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266fs-paste.jpg" alt="将esp8266fs文件夹粘贴到tools文件夹里">将esp8266fs文件夹粘贴到tools文件夹里</p>
<h5 id="5-重新启动Arduino-IDE"><a href="#5-重新启动Arduino-IDE" class="headerlink" title="5. 重新启动Arduino IDE"></a>5. 重新启动Arduino IDE</h5><p>为了让ESP8266FS闪存文件上传插件生效，我们需要重新启动Arduino IDE</p>
<p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/Arduino-ide-logo.jpg" alt="Arduino IDE 启动">Arduino IDE 启动</p>
<h5 id="5-检查“工具”菜单确认插件安装"><a href="#5-检查“工具”菜单确认插件安装" class="headerlink" title="5. 检查“工具”菜单确认插件安装"></a>5. 检查“工具”菜单确认插件安装</h5><p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-data-upload-menu.jpg" alt="ESP8266 data upload 菜单项">ESP8266 data upload 菜单项</p>
<h5 id="6-根据上传的文件总大小来设置闪存大小"><a href="#6-根据上传的文件总大小来设置闪存大小" class="headerlink" title="6. 根据上传的文件总大小来设置闪存大小"></a>6. 根据上传的文件总大小来设置闪存大小</h5><p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-flash-size-settings.jpg" alt="设置esp8266闪存大小">设置esp8266闪存大小</p>
<h5 id="7-将需要上传的文件保存在程序路径下的data文件夹中"><a href="#7-将需要上传的文件保存在程序路径下的data文件夹中" class="headerlink" title="7. 将需要上传的文件保存在程序路径下的data文件夹中"></a>7. 将需要上传的文件保存在程序路径下的data文件夹中</h5><p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-flash-data-storage.jpg" alt="将需要上传到esp8266闪存文件系统的文件保存在data目录中">将需要上传到esp8266闪存文件系统的文件保存在data目录中</p>
<h5 id="8-将需要上传的文件保存在程序路径下的data文件夹中"><a href="#8-将需要上传的文件保存在程序路径下的data文件夹中" class="headerlink" title="8. 将需要上传的文件保存在程序路径下的data文件夹中"></a>8. 将需要上传的文件保存在程序路径下的data文件夹中</h5><p><img src="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-flash-data-upload.jpg" alt="通过ESP8266 Sketch Data Upload可以将data文件夹里的文件上传">通过ESP8266 Sketch Data Upload可以将data文件夹里的文件上传</p>
<p>假如您不确定具体文件如何存储，请点击以下链接下载示例程序压缩包。<br><a href="http://www.taichi-maker.com/wp-content/uploads/2020/02/esp8266-data-upload.zip">文件上传示例程序</a></p>
]]></content>
      <categories>
        <category>study</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>删除Hadoop的远程文件</title>
    <url>/OLD_BLOG/2021/10/17/%E5%88%A0%E9%99%A4Hadoop%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如何删除Hadoop上面的文件及文件夹</p>
<span id="more"></span>

<p><code>Permission denied: user=dr.who, access=WRITE, inode=&quot;/&quot;:hadoop:supergroup:drwxr-xr-x</code></p>
<p>发现如下问题，打算去搜一下官方文档，顺便水一下2333</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hadoop.apache.org/docs/r1.0.4/cn/hdfs_shell.html">Hadoop shell命令</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>使用方法：<code>hadoop fs -rm URI [URI …]</code></p>
<p>删除指定的文件。只删除非空目录和文件。请参考rmr命令了解递归删除。<br>示例：</p>
<ul>
<li><code>hadoop fs -rm hdfs://host:port/file /user/hadoop/emptydir</code></li>
<li>或者是<code>bin/hadoop fs -rm /所需要删除的文件夹</code></li>
</ul>
<p>返回值：</p>
<p>成功返回0，失败返回-1。</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>无</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Hadoop</tag>
        <tag>water</tag>
      </tags>
  </entry>
  <entry>
    <title>图片仿射变换</title>
    <url>/OLD_BLOG/2021/08/18/%E5%9B%BE%E5%83%8F%E7%9A%84%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想跟着b站大佬，去学习一些相关知识</p>
<p>使用opencv对图像进行仿射变换</p>
<span id="more"></span>

<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="什么是仿射变换"><a href="#什么是仿射变换" class="headerlink" title="什么是仿射变换"></a>什么是仿射变换</h2><p>通过将原图片上的三个点经过相关变换去映射到目标图片的三个点的变化，属于线性变换<br>仿射变换保持了二维图像的“平直性”和“平行性”  </p>
<p>其中：三个点分别为：</p>
<ul>
<li>左上角</li>
<li>左下角</li>
<li>右下角</li>
</ul>
<h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;YT.jpg&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;src&quot;</span>, cv2.WINDOW_FREERATIO)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;src&#x27;</span>, img)</span><br><span class="line">imgInfo = img.shape</span><br><span class="line">height = imgInfo[<span class="number">0</span>]</span><br><span class="line">weight = imgInfo[<span class="number">1</span>]</span><br><span class="line">matSrc = np.float32([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, weight-<span class="number">1</span>], [height-<span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line">matDst = np.float32([[<span class="number">100</span>, <span class="number">100</span>], [<span class="number">300</span>, height], [weight-<span class="number">300</span>, <span class="number">100</span>]])</span><br><span class="line">matAffine = cv2.getAffineTransform(matSrc, matDst)</span><br><span class="line"><span class="comment"># 得到的是一个矩阵的组合</span></span><br><span class="line">dst = cv2.warpAffine(img, matAffine, (weight, height))</span><br><span class="line">cv2.namedWindow(<span class="string">&quot;dst&quot;</span>, cv2.WINDOW_FREERATIO)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;dst&#x27;</span>, dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h3><p><img src="https://user-images.githubusercontent.com/40520292/129829784-50082f62-fa96-4522-8ed2-50e67d11ba08.png" alt="image"></p>
<h3 id="运行结果图"><a href="#运行结果图" class="headerlink" title="运行结果图"></a>运行结果图</h3><p><img src="https://user-images.githubusercontent.com/40520292/129829800-2cfedcba-ca76-41cb-9563-3aa00d9aa0e7.png" alt="image"></p>
]]></content>
      <categories>
        <category>study</category>
        <category>视觉</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据蒙题系列</title>
    <url>/OLD_BLOG/2021/12/05/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%92%99%E9%A2%98%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>快考试了，尝试记录一波题型，可能有用，可能无用</p>
<span id="more"></span>

<h1 id="大数据可能出现题型汇总"><a href="#大数据可能出现题型汇总" class="headerlink" title="大数据可能出现题型汇总"></a>大数据可能出现题型汇总</h1><h2 id="spark系列"><a href="#spark系列" class="headerlink" title="spark系列"></a>spark系列</h2><h3 id="spark词频统计"><a href="#spark词频统计" class="headerlink" title="spark词频统计"></a>spark词频统计</h3><p>参考内容：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/70452602">知乎</a></li>
<li><a href="https://note.youdao.com/ynoteshare/index.html?id=bf5430bb2e441e0fc851c38ea8568c67&type=note&_time=1638684340393">老师教程（实验四）</a></li>
</ul>
<p>前提准备：</p>
<p>在自己的HDFS服务器中创建<code>/1900301538/spark/input/wordcount.txt</code>文件</p>
<p>文件内容随意，只要是一个个单词就行，也可以使用其余文献资料，例如</p>
<p>wordcount.txt</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hello world</span></span><br><span class="line"><span class="attribute">hello hadoop</span></span><br><span class="line"><span class="attribute">hello mapreduce</span></span><br><span class="line"><span class="attribute">hello spark</span></span><br></pre></td></tr></table></figure>



<p>代码如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> text = sc.textFile(<span class="string">&quot;hdfs://hadoop01:9000/1900301538/spark/input/wordcount.txt&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> counts = text.flatMap(line =&gt; line.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="keyword">var</span> wordcount = counts.map(counts =&gt; (counts, <span class="number">1</span>))</span><br><span class="line">wordcount = wordcount.reduceByKey(_ + _)</span><br><span class="line">wordcount.foreach(println)</span><br><span class="line">wordcount.saveAsTextFile(<span class="string">&quot;hdfs://hadoop01:9000/1900301538/spark/output&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> text = sc.textFile(<span class="string">&quot;hdfs://hadoop01:9000/1900301538/spark/input/wordcount.txt&quot;</span>)</span><br><span class="line"><span class="comment">//读取hadoop01的文件到text</span></span><br><span class="line"><span class="keyword">val</span> counts = text.flatMap(line =&gt; line.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="comment">//将凡是相隔一个空格的字符对其进行分割</span></span><br><span class="line"><span class="keyword">var</span> wordcount = counts.map(counts =&gt; (counts, <span class="number">1</span>))</span><br><span class="line"><span class="comment">//将其创建成为（key，1）的格式</span></span><br><span class="line">wordcount = wordcount.reduceByKey(_ + _)</span><br><span class="line"><span class="comment">//将上述所创建的map进行合并</span></span><br><span class="line">wordcount.foreach(println)</span><br><span class="line"><span class="comment">//终端中输出查看</span></span><br><span class="line">wordcount.saveAsTextFile(<span class="string">&quot;hdfs://hadoop01:9000/1900301538/spark/output&quot;</span>)</span><br><span class="line"><span class="comment">//将其输出到指定目录下进行保存</span></span><br></pre></td></tr></table></figure>



<p>运行结果如下：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name">spark</span><span class="punctuation">,</span><span class="number">1</span>)</span><br><span class="line">(<span class="name">hadoop</span><span class="punctuation">,</span><span class="number">1</span>)</span><br><span class="line">(<span class="name">mapreduce</span><span class="punctuation">,</span><span class="number">1</span>)</span><br><span class="line">(<span class="name">hello</span><span class="punctuation">,</span><span class="number">4</span>)</span><br><span class="line">(<span class="name">world</span><span class="punctuation">,</span><span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<h3 id="spark-计算pi值"><a href="#spark-计算pi值" class="headerlink" title="spark 计算pi值"></a>spark 计算pi值</h3><p>参考文章：</p>
<ul>
<li><a href="https://note.youdao.com/ynoteshare/index.html?id=bf5430bb2e441e0fc851c38ea8568c67&type=note&_time=1638684340393">老师教程（实验四）</a></li>
</ul>
<p>代码如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">NUM_SAMPLES</span> = <span class="number">100000</span></span><br><span class="line"><span class="keyword">val</span> count = sc.parallelize(<span class="number">1</span> to <span class="type">NUM_SAMPLES</span>).filter &#123; _ =&gt;</span><br><span class="line">  <span class="keyword">val</span> x = math.random</span><br><span class="line">  <span class="keyword">val</span> y = math.random</span><br><span class="line">  x*x + y*y &lt; <span class="number">1</span></span><br><span class="line">&#125;.count()</span><br><span class="line">println(<span class="string">s&quot;Pi is roughly <span class="subst">$&#123;4.0 * count / NUM_SAMPLES&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">NUM_SAMPLES</span> = <span class="number">100000</span></span><br><span class="line"><span class="comment">//定义一个随机值，越大越好</span></span><br><span class="line"><span class="keyword">val</span> count = sc.parallelize(<span class="number">1</span> to <span class="type">NUM_SAMPLES</span>).filter &#123; _ =&gt;</span><br><span class="line">    <span class="comment">//进行一个for循环？大概</span></span><br><span class="line">  <span class="keyword">val</span> x = math.random</span><br><span class="line">    <span class="comment">//定义一个x随机数</span></span><br><span class="line">  <span class="keyword">val</span> y = math.random</span><br><span class="line"><span class="comment">//定义一个y随机数</span></span><br><span class="line">  x*x + y*y &lt; <span class="number">1</span></span><br><span class="line">    <span class="comment">//使其相乘并相加小于1</span></span><br><span class="line">&#125;.count()</span><br><span class="line"><span class="comment">//记1</span></span><br><span class="line">println(<span class="string">s&quot;Pi is roughly <span class="subst">$&#123;4.0 * count / NUM_SAMPLES&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">//输出结果</span></span><br></pre></td></tr></table></figure>



<h2 id="MapReduce系列"><a href="#MapReduce系列" class="headerlink" title="MapReduce系列"></a>MapReduce系列</h2><p>资料来源：</p>
<ul>
<li><a href="https://www.cnblogs.com/xia520pi/archive/2012/06/04/2534533.html#_label0">[Hadoop集群（第9期）_MapReduce初级案例]</a></li>
</ul>
<h3 id="数据去重"><a href="#数据去重" class="headerlink" title="数据去重"></a>数据去重</h3><p>前提准备：</p>
<p>创建文件</p>
<p>a.txt</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">1</span> a</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">2</span> b</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">3</span> c</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">4</span> d</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">5</span> a</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">6</span> b</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">7</span> c</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">3</span> c</span><br></pre></td></tr></table></figure>

<p>b.txt</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">1</span> b</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">2</span> a</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">3</span> b</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">4</span> d</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">5</span> a</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">6</span> c</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">7</span> d</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">3</span> c</span><br></pre></td></tr></table></figure>



<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hadoopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Remove_same</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HDFS</span> <span class="operator">=</span> <span class="string">&quot;hdfs://hadoop01:9000/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map将输入中的value复制到输出数据的key上，并直接输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Map</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object,Text,Text,Text&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Text line=<span class="keyword">new</span> <span class="title class_">Text</span>();<span class="comment">//每行数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//实现map函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key,Text value,Context context)</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">throws</span> IOException,InterruptedException&#123;</span><br><span class="line"></span><br><span class="line">            line=value;</span><br><span class="line"></span><br><span class="line">            context.write(line, <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//reduce将输入中的key复制到输出数据的key上，并直接输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,Text,Text,Text&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实现reduce函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key,Iterable&lt;Text&gt; values,Context context)</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">throws</span> IOException,InterruptedException&#123;</span><br><span class="line"></span><br><span class="line">            context.write(key, <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;hadoop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, HDFS);</span><br><span class="line">        conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>, org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;fs.file.impl&quot;</span>, org.apache.hadoop.fs.LocalFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;dfs.client.use.datanode.hostname&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Tools</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tools</span>(HDFS, conf);</span><br><span class="line">        <span class="keyword">if</span> (tool.exists(<span class="string">&quot;/1900301538/Remove_same&quot;</span>))</span><br><span class="line">            tool.rmr(<span class="string">&quot;/1900301538/Remove_same&quot;</span>);</span><br><span class="line">        tool.mkdirs(<span class="string">&quot;/1900301538/Remove_same&quot;</span>);</span><br><span class="line">        tool.mkdirs(<span class="string">&quot;/1900301538/Remove_same/input&quot;</span>);</span><br><span class="line">        tool.copyFile(<span class="string">&quot;D:\\li\\a.txt&quot;</span>,<span class="string">&quot;/1900301538/Remove_same/input/a.txt&quot;</span>);</span><br><span class="line">        tool.copyFile(<span class="string">&quot;D:\\li\\b.txt&quot;</span>,<span class="string">&quot;/1900301538/Remove_same/input/b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Job job = new Job(conf, &quot;数据去重&quot;);</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;数据去重&quot;</span>);</span><br><span class="line"><span class="comment">//        job.setJarByClass(Dedup.class);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置Map、Combine和Reduce处理类</span></span><br><span class="line"></span><br><span class="line">        job.setMapperClass(Map.class);</span><br><span class="line"></span><br><span class="line">        job.setCombinerClass(Reduce.class);</span><br><span class="line"></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置输出类型</span></span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line"></span><br><span class="line">        job.setOutputValueClass(Text.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置输入和输出目录</span></span><br><span class="line"></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/1900301538/Remove_same/input/&quot;</span>));</span><br><span class="line"></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/1900301538/Remove_same/output/&quot;</span>));</span><br><span class="line">        tool.cat(<span class="string">&quot;/1900301538/Remove_same/output/part-r-00000&quot;</span>);</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">1</span> a	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">1</span> b	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">2</span> a	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">2</span> b	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">3</span> b	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">3</span> c	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">4</span> d	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">5</span> a	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">6</span> b	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">6</span> c	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">7</span> c	</span><br><span class="line"><span class="attribute">2012</span>-<span class="number">3</span>-<span class="number">7</span> d	</span><br></pre></td></tr></table></figure>



<h3 id="求平均成绩"><a href="#求平均成绩" class="headerlink" title="求平均成绩"></a>求平均成绩</h3><p>前提准备：</p>
<p>database.txt</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">小明 95</span><br><span class="line">小红 81</span><br><span class="line">小新 89</span><br><span class="line">小丽 85</span><br></pre></td></tr></table></figure>

<p>python.txt</p>
<figure class="highlight plaintext"><figcaption><span>82</span></figcaption><table><tr><td class="code"><pre><span class="line">小红 83</span><br><span class="line">小新 94</span><br><span class="line">小丽 91</span><br></pre></td></tr></table></figure>

<p>c++.txt</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">小明 92</span><br><span class="line">小红 87</span><br><span class="line">小新 82</span><br><span class="line">小丽 90</span><br></pre></td></tr></table></figure>



<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hadoopdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">average_s</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HDFS</span> <span class="operator">=</span> <span class="string">&quot;hdfs://hadoop01:9000/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Map</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text, Text, IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现map函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将输入的纯文本文件的数据转化成String</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line">            <span class="comment">// 将输入的数据首先按行进行分割</span></span><br><span class="line">            <span class="type">StringTokenizer</span> <span class="variable">tokenizerArticle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(line, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="comment">// 分别对每一行进行处理</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (tokenizerArticle.hasMoreElements()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 每行按空格划分</span></span><br><span class="line"></span><br><span class="line">                <span class="type">StringTokenizer</span> <span class="variable">tokenizerLine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(tokenizerArticle.nextToken());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">strName</span> <span class="operator">=</span> tokenizerLine.nextToken();<span class="comment">// 学生姓名部分</span></span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">strScore</span> <span class="operator">=</span> tokenizerLine.nextToken();<span class="comment">// 成绩部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>(strName);</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">scoreInt</span> <span class="operator">=</span> Integer.parseInt(strScore);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输出姓名和成绩</span></span><br><span class="line"></span><br><span class="line">                context.write(name, <span class="keyword">new</span> <span class="title class_">IntWritable</span>(scoreInt));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span></span><br><span class="line"></span><br><span class="line">            <span class="title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现reduce函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span><br><span class="line"><span class="params"></span></span><br><span class="line"><span class="params">                           Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line"></span><br><span class="line">                sum += value.get();<span class="comment">// 计算总分</span></span><br><span class="line"></span><br><span class="line">                count++;<span class="comment">// 统计总的科目数</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">average</span> <span class="operator">=</span> sum / count;<span class="comment">// 计算平均成绩</span></span><br><span class="line"></span><br><span class="line">            context.write(key, <span class="keyword">new</span> <span class="title class_">IntWritable</span>(average));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;hadoop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, HDFS);</span><br><span class="line">        conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>, org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;fs.file.impl&quot;</span>, org.apache.hadoop.fs.LocalFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;dfs.client.use.datanode.hostname&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Tools</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tools</span>(HDFS, conf);</span><br><span class="line">        <span class="keyword">if</span> (tool.exists(<span class="string">&quot;/1900301538/average_s&quot;</span>))</span><br><span class="line">            tool.rmr(<span class="string">&quot;/1900301538/average_s&quot;</span>);</span><br><span class="line">        tool.mkdirs(<span class="string">&quot;/1900301538/average_s&quot;</span>);</span><br><span class="line">        tool.mkdirs(<span class="string">&quot;/1900301538/average_s/input&quot;</span>);</span><br><span class="line">        tool.copyFile(<span class="string">&quot;D:\\li\\python.txt&quot;</span>,<span class="string">&quot;/1900301538/average_s/input/python.txt&quot;</span>);</span><br><span class="line">        tool.copyFile(<span class="string">&quot;D:\\li\\c++.txt&quot;</span>,<span class="string">&quot;/1900301538/average_s/input/c++.txt&quot;</span>);</span><br><span class="line">        tool.copyFile(<span class="string">&quot;D:\\li\\database.txt&quot;</span>,<span class="string">&quot;/1900301538/average_s/input/database.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;求平均&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Map、Combine和Reduce处理类</span></span><br><span class="line"></span><br><span class="line">        job.setMapperClass(Map.class);</span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置输出类型</span></span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置输入和输出目录</span></span><br><span class="line"></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/1900301538/average_s/input/&quot;</span>));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/1900301538/average_s/output/&quot;</span>));</span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">        tool.cat(<span class="string">&quot;/1900301538/average_s/output/part-r-00000&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>输出结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">小丽	88</span><br><span class="line">小新	88</span><br><span class="line">小明	89</span><br><span class="line">小红	83</span><br></pre></td></tr></table></figure>



<h3 id="多表关联"><a href="#多表关联" class="headerlink" title="多表关联"></a>多表关联</h3><p>准备文件：</p>
<p>factory.txt</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">factoryname</span>                　　　　addressed</span><br><span class="line"><span class="attribute">Beijing</span> Red Star                　　　　<span class="number">1</span></span><br><span class="line"><span class="attribute">Shenzhen</span> Thunder            　　　　<span class="number">3</span></span><br><span class="line"><span class="attribute">Guangzhou</span> Honda            　　　　<span class="number">2</span></span><br><span class="line"><span class="attribute">Beijing</span> Rising                   　　　　<span class="number">1</span></span><br><span class="line"><span class="attribute">Guangzhou</span> Development Bank      <span class="number">2</span></span><br><span class="line"><span class="attribute">Tencent</span>                　　　　　　　　<span class="number">3</span></span><br><span class="line"><span class="attribute">Back</span> of Beijing                　　　　 <span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>address.txt</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">addressID </span>   <span class="keyword">addressname</span></span><br><span class="line"><span class="keyword"></span><span class="number">1</span>        　　　　<span class="keyword">Beijing</span></span><br><span class="line"><span class="keyword"></span><span class="number">2</span>        　　　　Guangzhou</span><br><span class="line"><span class="number">3</span>        　　　　<span class="keyword">Shenzhen</span></span><br><span class="line"><span class="keyword"></span><span class="number">4</span>        　　　　Xian</span><br></pre></td></tr></table></figure>



<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hadoopdemo;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factory_where</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HDFS</span> <span class="operator">=</span> <span class="string">&quot;hdfs://hadoop01:9000/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 在map中先区分输入行属于左表还是右表，然后对两列值进行分割，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 保存连接列在key值，剩余列和左右表标志在value中，最后输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Map</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, Text&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现map函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();<span class="comment">// 每行文件</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">relationtype</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();<span class="comment">// 左右表标识</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输入文件首行，不处理</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (line.contains(<span class="string">&quot;factoryname&quot;</span>) == <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">                    || line.contains(<span class="string">&quot;addressed&quot;</span>) == <span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输入的一行预处理文本</span></span><br><span class="line"></span><br><span class="line">            <span class="type">StringTokenizer</span> <span class="variable">itr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(line);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">mapkey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">mapvalue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 先读取一个单词</span></span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> itr.nextToken();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断该地址ID就把存到&quot;values[0]&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (token.charAt(<span class="number">0</span>) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; token.charAt(<span class="number">0</span>) &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    mapkey = token;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        relationtype = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                        relationtype = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 存工厂名</span></span><br><span class="line"></span><br><span class="line">                mapvalue += token + <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">                i++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出左右表</span></span><br><span class="line"></span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(mapkey), <span class="keyword">new</span> <span class="title class_">Text</span>(relationtype + <span class="string">&quot;+&quot;</span>+ mapvalue));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * reduce解析map输出，将value中数据按照左右表分别保存，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * 然后求出笛卡尔积，并输出。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Text, Text, Text&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现reduce函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 输出表头</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == time) &#123;</span><br><span class="line"></span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;factoryname&quot;</span>), <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;addressname&quot;</span>));</span><br><span class="line"></span><br><span class="line">                time++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">factorynum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String[] factory = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">addressnum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String[] address = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">ite</span> <span class="operator">=</span> values.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (ite.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">record</span> <span class="operator">=</span> ite.next().toString();</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> record.length();</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == len) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 取得左右表标识</span></span><br><span class="line"></span><br><span class="line">                <span class="type">char</span> <span class="variable">relationtype</span> <span class="operator">=</span> record.charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 左表</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&#x27;1&#x27;</span> == relationtype) &#123;</span><br><span class="line"></span><br><span class="line">                    factory[factorynum] = record.substring(i);</span><br><span class="line"></span><br><span class="line">                    factorynum++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 右表</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&#x27;2&#x27;</span> == relationtype) &#123;</span><br><span class="line"></span><br><span class="line">                    address[addressnum] = record.substring(i);</span><br><span class="line"></span><br><span class="line">                    addressnum++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 求笛卡尔积</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != factorynum &amp;&amp; <span class="number">0</span> != addressnum) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>; m &lt; factorynum; m++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; addressnum; n++) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 输出结果</span></span><br><span class="line"></span><br><span class="line">                        context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(factory[m]),</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">Text</span>(address[n]));</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;hadoop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, HDFS);</span><br><span class="line">        conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>, org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;fs.file.impl&quot;</span>, org.apache.hadoop.fs.LocalFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;dfs.client.use.datanode.hostname&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Tools</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tools</span>(HDFS, conf);</span><br><span class="line">        <span class="keyword">if</span> (tool.exists(<span class="string">&quot;/1900301538/Factory_where&quot;</span>))</span><br><span class="line">            tool.rmr(<span class="string">&quot;/1900301538/Factory_where&quot;</span>);</span><br><span class="line">        tool.mkdirs(<span class="string">&quot;/1900301538/Factory_where&quot;</span>);</span><br><span class="line">        tool.mkdirs(<span class="string">&quot;/1900301538/Factory_where/input&quot;</span>);</span><br><span class="line">        tool.copyFile(<span class="string">&quot;D:\\li\\factory.txt&quot;</span>,<span class="string">&quot;/1900301538/Factory_where/input/factory.txt&quot;</span>);</span><br><span class="line">        tool.copyFile(<span class="string">&quot;D:\\li\\address.txt&quot;</span>,<span class="string">&quot;/1900301538/Factory_where/input/address.txt&quot;</span>);</span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;公司位置汇总&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Map和Reduce处理类</span></span><br><span class="line"></span><br><span class="line">        job.setMapperClass(Map.class);</span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置输出类型</span></span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(Text.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置输入和输出目录</span></span><br><span class="line"></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/1900301538/Factory_where/input/&quot;</span>));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/1900301538/Factory_where/output/&quot;</span>));</span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">        tool.cat(<span class="string">&quot;/1900301538/Factory_where/output/part-r-00000&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>输出结果：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">factoryname	<span class="keyword">addressname</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Back </span>of <span class="keyword">Beijing </span>	　　　　<span class="keyword">Beijing </span></span><br><span class="line"><span class="keyword">Beijing </span>Rising 	　　　　<span class="keyword">Beijing </span></span><br><span class="line"><span class="keyword">Beijing </span>Red Star 	　　　　<span class="keyword">Beijing </span></span><br><span class="line">Guangzhou Development <span class="keyword">Bank </span>	　　　　Guangzhou </span><br><span class="line">Guangzhou Honda 	　　　　Guangzhou </span><br><span class="line">Tencent 	　　　　<span class="keyword">Shenzhen </span></span><br><span class="line"><span class="keyword">Shenzhen </span>Thunder 	　　　　<span class="keyword">Shenzhen </span></span><br></pre></td></tr></table></figure>



<h3 id="单表关联（爷孙表）"><a href="#单表关联（爷孙表）" class="headerlink" title="单表关联（爷孙表）"></a>单表关联（爷孙表）</h3><p>需要文件：</p>
<p>c_p.txt</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">child        parent</span><br><span class="line">Tom        Lucy</span><br><span class="line">Tom        <span class="keyword">Jack</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Jone </span>       Lucy</span><br><span class="line"><span class="keyword">Jone </span>       <span class="keyword">Jack</span></span><br><span class="line"><span class="keyword"></span>Lucy        Mary</span><br><span class="line">Lucy        <span class="keyword">Ben</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Jack </span>       Alice</span><br><span class="line"><span class="keyword">Jack </span>       <span class="keyword">Jesse</span></span><br><span class="line"><span class="keyword"></span>Terry        Alice</span><br><span class="line">Terry        <span class="keyword">Jesse</span></span><br><span class="line"><span class="keyword"></span>Philip        Terry</span><br><span class="line">Philip        Alma</span><br><span class="line">Mark        Terry</span><br><span class="line">Mark        Alma</span><br></pre></td></tr></table></figure>



<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hadoopdemo;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">c_p</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HDFS</span> <span class="operator">=</span> <span class="string">&quot;hdfs://hadoop01:9000/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * map将输出分割child和parent，然后正序输出一次作为右表，</span></span><br><span class="line"><span class="comment">     * 反序输出一次作为左表，需要注意的是在输出的value中必须</span></span><br><span class="line"><span class="comment">     * 加上左右表的区别标识。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Map</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, Text&gt; &#123;</span><br><span class="line">        <span class="comment">// 实现map函数</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">childname</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">// 孩子名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">parentname</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">// 父母名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">relationtype</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">// 左右表标识</span></span><br><span class="line">            <span class="comment">// 输入的一行预处理文本</span></span><br><span class="line"></span><br><span class="line">            StringTokenizer itr=<span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(value.toString());</span><br><span class="line"></span><br><span class="line">            String[] values=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(itr.hasMoreTokens())&#123;</span><br><span class="line"></span><br><span class="line">                values[i]=itr.nextToken();</span><br><span class="line"></span><br><span class="line">                i++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (values[<span class="number">0</span>].compareTo(<span class="string">&quot;child&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                childname = values[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                parentname = values[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输出左表</span></span><br><span class="line"></span><br><span class="line">                relationtype = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(values[<span class="number">1</span>]), <span class="keyword">new</span> <span class="title class_">Text</span>(relationtype +</span><br><span class="line"></span><br><span class="line">                        <span class="string">&quot;+&quot;</span>+ childname + <span class="string">&quot;+&quot;</span> + parentname));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输出右表</span></span><br><span class="line"></span><br><span class="line">                relationtype = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"></span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(values[<span class="number">0</span>]), <span class="keyword">new</span> <span class="title class_">Text</span>(relationtype +</span><br><span class="line"></span><br><span class="line">                        <span class="string">&quot;+&quot;</span>+ childname + <span class="string">&quot;+&quot;</span> + parentname));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Text, Text, Text&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现reduce函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出表头</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == time) &#123;</span><br><span class="line"></span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;grandchild&quot;</span>), <span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;grandparent&quot;</span>));</span><br><span class="line"></span><br><span class="line">                time++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">grandchildnum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String[] grandchild = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">grandparentnum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            String[] grandparent = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">ite</span> <span class="operator">=</span> values.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (ite.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">record</span> <span class="operator">=</span> ite.next().toString();</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> record.length();</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == len) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 取得左右表标识</span></span><br><span class="line"></span><br><span class="line">                <span class="type">char</span> <span class="variable">relationtype</span> <span class="operator">=</span> record.charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 定义孩子和父母变量</span></span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">childname</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">parentname</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取value-list中value的child</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (record.charAt(i) != <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    childname += record.charAt(i);</span><br><span class="line"></span><br><span class="line">                    i++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                i = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取value-list中value的parent</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line"></span><br><span class="line">                    parentname += record.charAt(i);</span><br><span class="line"></span><br><span class="line">                    i++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 左表，取出child放入grandchildren</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&#x27;1&#x27;</span> == relationtype) &#123;</span><br><span class="line"></span><br><span class="line">                    grandchild[grandchildnum] = childname;</span><br><span class="line"></span><br><span class="line">                    grandchildnum++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 右表，取出parent放入grandparent</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&#x27;2&#x27;</span> == relationtype) &#123;</span><br><span class="line"></span><br><span class="line">                    grandparent[grandparentnum] = parentname;</span><br><span class="line"></span><br><span class="line">                    grandparentnum++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// grandchild和grandparent数组求笛卡尔儿积</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != grandchildnum &amp;&amp; <span class="number">0</span> != grandparentnum) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>; m &lt; grandchildnum; m++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; grandparentnum; n++) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 输出结果</span></span><br><span class="line"></span><br><span class="line">                        context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(grandchild[m]), <span class="keyword">new</span> <span class="title class_">Text</span>(grandparent[n]));</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>, <span class="string">&quot;hadoop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, HDFS);</span><br><span class="line">        conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>, org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;fs.file.impl&quot;</span>, org.apache.hadoop.fs.LocalFileSystem.class.getName());</span><br><span class="line">        conf.set(<span class="string">&quot;dfs.client.use.datanode.hostname&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Tools</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tools</span>(HDFS, conf);</span><br><span class="line">        <span class="keyword">if</span> (tool.exists(<span class="string">&quot;/1900301538/c_p&quot;</span>))</span><br><span class="line">            tool.rmr(<span class="string">&quot;/1900301538/c_p&quot;</span>);</span><br><span class="line">        tool.mkdirs(<span class="string">&quot;/1900301538/c_p&quot;</span>);</span><br><span class="line">        tool.mkdirs(<span class="string">&quot;/1900301538/c_p/input&quot;</span>);</span><br><span class="line">        tool.copyFile(<span class="string">&quot;D:\\li\\c_p.txt&quot;</span>,<span class="string">&quot;/1900301538/c_p/input/c_p.txt&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;爷孙关系&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Map和Reduce处理类</span></span><br><span class="line"></span><br><span class="line">        job.setMapperClass(Map.class);</span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置输出类型</span></span><br><span class="line"></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line"></span><br><span class="line">        job.setOutputValueClass(Text.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置输入和输出目录</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/1900301538/c_p/input/&quot;</span>));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/1900301538/c_p/output/&quot;</span>));</span><br><span class="line">        job.waitForCompletion(<span class="literal">true</span>);</span><br><span class="line">        tool.cat(<span class="string">&quot;/1900301538/c_p/output/part-r-00000&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">grandchild	grandparent</span><br><span class="line">Tom	Alice</span><br><span class="line">Tom	<span class="keyword">Jesse</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Jone	</span>Alice</span><br><span class="line"><span class="keyword">Jone	</span><span class="keyword">Jesse</span></span><br><span class="line"><span class="keyword"></span>Tom	<span class="keyword">Ben</span></span><br><span class="line"><span class="keyword"></span>Tom	Mary</span><br><span class="line"><span class="keyword">Jone	</span><span class="keyword">Ben</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Jone	</span>Mary</span><br><span class="line">Philip	Alice</span><br><span class="line">Philip	<span class="keyword">Jesse</span></span><br><span class="line"><span class="keyword"></span>Mark	Alice</span><br><span class="line">Mark	<span class="keyword">Jesse</span></span><br></pre></td></tr></table></figure>



<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>如有其余问题，请留言</p>
]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现linux终端代理</title>
    <url>/OLD_BLOG/2021/09/13/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0linux%E7%9A%84%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于部分终端命令需要从github上进行下载，然而限于国内网速过慢，因此探寻一高方法，可以让终端去使用代理</p>
<span id="more"></span>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://v2raytech.com/linux-cmd-set-proxy/">Linux终端设置代理</a></p>
<p><a href="https://www.dailiproxy.com/proxy-vpn/">代理与VPN的区别</a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="代理与VPN的区别"><a href="#代理与VPN的区别" class="headerlink" title="代理与VPN的区别"></a>代理与VPN的区别</h2><h3 id="匿名性"><a href="#匿名性" class="headerlink" title="匿名性"></a>匿名性</h3><p>代理和VPN的操作非常相似。它们都位于请求的中间，都隐藏了您的IP地址，并且都将信息转发给您。主要区别在于VPN需要隧道过程，该过程建立了到您和VPN服务器的直接且不可穿透的连接。代理只是一个开放的端口，你可以连接，没有隧道，也不是不能通过的。</p>
<p>其次，代理往往是任何人都可以连接到的单个IP地址。如果它是公共代理服务器，那么由于没有密码和身份验证，因此很多人都可以连接到它，并且通常可以在网络上使用它。一般来说，公共代理并不安全，因此不应使用。</p>
<p>从技术上讲，<a href="https://www.dailiproxy.com/private-proxy/">付费的私人代理</a>仍然可以被多个人访问，但是如果您为单个精英代理付费，则只有您（和您的提供者）才能访问它。VPN始终需要登录和身份验证，并且将通过VPN服务器为您分配IP地址。</p>
<h2 id="安全性和隐私性"><a href="#安全性和隐私性" class="headerlink" title="安全性和隐私性"></a>安全性和隐私性</h2><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>代理被称为超级安全和私有的，因为它们隐藏了您的IP地址。这是事实，但并没有那么简单。代理技术将始终完成替换IP地址的基本工作-“代理”本身就是您要连接的另一个IP地址，它向网站显示了自己的IP地址，而不是您的IP地址。</p>
<p>但是，代理有多种类型，每种代理都有特定的安全性和私密性的优缺点。</p>
<ul>
<li>免费代理。这些宣传匿名性，但实际上并没有提供。免费代理及其提供者通常会记录您的活动日志，为更复杂的网站隐藏您的IP地址时做得很糟糕，而且速度缓慢。他们还可以在您的计算机上安装恶意软件并跟踪您输入的信息（例如信用卡和登录信息），因此它们实际上根本不是安全的或私有的。</li>
<li>精英私人代理人。您将支付这些费用，并伴随这些钱获得合法隐私的机会。好的代理提供商不会（尽管可以）保留您的活动日志，无论您访问哪个网站，都确保您的IP地址保持隐藏状态，并且可靠。</li>
</ul>
<p>这是两种主要类型，但是还有另一个需要考虑的技术因素。代理通常以三种主要格式出售：HTTP，HTTPS和SOCKS。当涉及到安全性时，这些功能分别具有不同的功能。</p>
<ul>
<li><p><strong>这是最基本的</strong>，因此也是最不安全的。大多数私有提供商默认提供HTTP代理，尽管它们会很好地隐藏您的IP地址或地理位置，但建议您不要信任它们以获得银行帐户密码之类的超敏感信息。</p>
</li>
<li><p><strong>这是HTTP的更安全版本</strong>，您会在URL中看到许多带有HTTPS的挂锁站点。这已成为安全站点的代名词。HTTPS代理通常更昂贵且更难找到，但可以提供更高的安全性。</p>
</li>
<li><p><strong>从技术上讲，这是一种不同的协议</strong>，可以实现完全安全的交易。SOCKS通常是VPN的基础技术，因此，如果您购买SOCKS代理，您将拥有VPN的安全功能，而无需整个网络。</p>
</li>
</ul>
<h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><p><strong>VPN比代理更安全，更私有</strong>。从技术角度来看，它们本质上是封闭的系统，您只能在获得许可的情况下访问它们。</p>
<p>由于采用了隧道方法，因此计算机上的所有流量都是隐藏的且不公开的，这意味着政府和广告商（您最大的两点担心）将无法查看您正在浏览，下载或在线进行的操作。</p>
<h2 id="终端如何设置代理（环境变量方案）"><a href="#终端如何设置代理（环境变量方案）" class="headerlink" title="终端如何设置代理（环境变量方案）"></a>终端如何设置代理（环境变量方案）</h2><p>Windows/Mac系统浏览器能上外网的秘密是客户端默认设置了http、https、socks5代理(或者PAC自动代理)，对应到Linux终端/命令行则是两个重要的环境变量：http_proxy、https_proxy(GNOME环境会设置all_proxy环境变量)。</p>
<p>SS/SSR/V2ray等客户端，默认会监听一个socks5端口，例如1080，因此让Linux终端命令走代理的方法便是设置这两个环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;socks5://127.0.0.1:1080&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;socks5://127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure>

<p>设置好这两个环境变量后，许多软件，例如<code>curl</code>、<code>wget</code>，默认会读取变量的值，发现设置了就走代理，因此可以访问外网。</p>
<p>但并不是所有软件都遵循约定，例如<code>git</code>就不认这两个环境变量。<code>git</code>有自己的一套，需要单独设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span> </span><br><span class="line">git config --global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果不想软件走代理，unset这两个环境变量就可以了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br></pre></td></tr></table></figure>

<p>使用环境变量的话</p>
<p>优点：</p>
<ul>
<li>是比较简单，容易实现</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>环境变量的更改是全局性的，设置之后所有的命令都会走代理，如果需要访问其他东西，就会比较麻烦</p>
</li>
<li><p>并且有部分软件会不承认这两个环境变量，因此即使设置了也不起作用</p>
</li>
</ul>
<h2 id="终端如何设置代理（proxychains方案）"><a href="#终端如何设置代理（proxychains方案）" class="headerlink" title="终端如何设置代理（proxychains方案）"></a>终端如何设置代理（proxychains方案）</h2><p>本节以Ubuntu系统介绍使用<code>proxychains</code>克服环境变量方案的两个缺点，实现按需、所有软件都能走代理。</p>
<p>首先安装<code>proxychains</code>：<code>sudo apt install -y proxychains</code>。</p>
<p>然后编辑 <code>/etc/proxychains.conf</code> 文件，在最后的**[ProxyList]**一节中增加代理设置，例如：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">socks5</span> <span class="number">127.0.0.1</span> <span class="number">1080</span></span><br></pre></td></tr></table></figure>

<p>接下来，所有希望走代理的命令，前面增加<code>proxychains</code>即可，例如：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git克隆</span></span><br><span class="line">proxychains git <span class="keyword">clone</span> <span class="title">https</span>://github.com/hijkpw/scripts</span><br><span class="line"><span class="comment"># composer更新</span></span><br><span class="line">proxychains composer update -vv</span><br></pre></td></tr></table></figure>

<p>需要连外网的命令比较少，并且可以让所有软件都走代理，因此<code>proxychains</code>是推荐方式。</p>
<p><strong>请注意：本文所提到的所有127.0.0.1:1080均是代理设置的转发，如果使用过程中有更改自己相关的代理端口，相关设置的端口信息也应该进行更改</strong></p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>如何撰写文献综述</title>
    <url>/OLD_BLOG/2022/05/07/%E5%A6%82%E4%BD%95%E6%92%B0%E5%86%99%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="好像密码不正确呢？再试试吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ef57d1f2025b507f519375679325eb8b7a4e0beb1eaa726c7b4d99f060c223ed"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">输入正确密码查看正确文章</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/OLD_BLOG/lib/hbe.js"></script><link href="/OLD_BLOG/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>有密码</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>安装pyspark</title>
    <url>/OLD_BLOG/2022/06/23/%E5%AE%89%E8%A3%85pyspark/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>听说spark为了支持python全面研发出一款专门调用api的工具叫做<code>pyspark</code>，因此，本着学习的目的，尝试安装一下<code>pyspark</code></p>
<span id="more"></span>



<h2 id="已有基础"><a href="#已有基础" class="headerlink" title="已有基础"></a>已有基础</h2><ul>
<li>ubuntu 18.04</li>
<li>anaconda 4.20</li>
<li>python 3.8</li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p><a href="https://spark.apache.org/docs/latest/api/python/getting_started/install.html?highlight=installed#:~:text=Python%203.7%20and%20above.">官网中强调</a>了，要想安装<code>pyspark</code>则最先确保自身的<code>python</code>版本要大于等于<code>3.7</code>，因此，在开始本次教程之前，需要确保自身的<code>python&gt;=3.7</code></p>
<p>在官网中提出了多种方式去安装 <code>pyspark</code>，其中本文将使用<code>conda</code>的方式去进行安装</p>
<h2 id="创建并进入conda虚拟环境"><a href="#创建并进入conda虚拟环境" class="headerlink" title="创建并进入conda虚拟环境"></a>创建并进入conda虚拟环境</h2><p>使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name pyspark python=3.8</span><br><span class="line">conda activate pyspark</span><br></pre></td></tr></table></figure>

<p>创建一个名为<code>pyspark</code> ，<code>python</code>版本为<code>3.8</code>的环境，并进入到环境当中</p>
<h2 id="安装-JAVA"><a href="#安装-JAVA" class="headerlink" title="安装 JAVA"></a>安装 <code>JAVA</code></h2><p>由于在运行过程中，<code>spark</code>使用的是<code>java</code>语言，因此需要安装<code>java</code>环境</p>
<p>安装教程在另一篇博文中有写，请参考：<a href="https://zhycarge.github.io/2021/09/23/Hadoop%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%90%AD%E5%BB%BA/#:~:text=%E4%B9%8B%E5%90%8E%E5%A6%82%E4%B8%8B%E6%98%BE%E7%A4%BA%EF%BC%9A-,%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEJava,-%E5%AE%89%E8%A3%85openjdk%2D8">安装及配置java模块进行安装</a></p>
<h2 id="安装pyspark"><a href="#安装pyspark" class="headerlink" title="安装pyspark"></a>安装<code>pyspark</code></h2><p>输入命令：</p>
<p><code>conda install  pyspark </code></p>
<p>进行安装</p>
<h2 id="使用-pyspark"><a href="#使用-pyspark" class="headerlink" title="使用 pyspark"></a>使用 <code>pyspark</code></h2><p>直接终端输入 <code>pyspark</code>即可看到如下界面：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220623202503071.png" alt="image-20220623202503071"></p>
<p>使用 <code>exit()</code>便可退出</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="测试demo"><a href="#测试demo" class="headerlink" title="测试demo"></a>测试demo</h2><p>有待更新</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://spark.apache.org/docs/latest/api/python/user_guide/python_packaging.html#using-conda">官网【使用conda安装pyspark】</a></li>
<li><a href="https://spark.apache.org/docs/latest/api/python/getting_started/install.html">官网【安装pyspark】</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>pyspark</tag>
      </tags>
  </entry>
  <entry>
    <title>如何简单的安装arduino以及esp8266相关库</title>
    <url>/OLD_BLOG/2021/07/21/%E5%A6%82%E4%BD%95%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%89%E8%A3%85arduino%E4%BB%A5%E5%8F%8Aesp8266%E7%9B%B8%E5%85%B3%E5%BA%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这就是一个很简单的安装教程，相信我，很简单。。。</p>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ul>
<li>首先<a href="https://www.jianshu.com/p/0bc77e7078e2">安装arduino</a>【安装教程参考部分便好】</li>
<li>其次需要<a href="https://zhycarge.github.io/2021/07/14/esp8266%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#more">安装esp8266相关库</a>  </li>
<li>如果正常流程安装不了库文件，可以采用我们库进行安装，<a href="https://zhycarge.github.io/2021/07/16/arduino%E5%AE%89%E8%A3%85%E5%BA%93/">点我查看</a></li>
<li>之后我们需要<a href="https://zhycarge.github.io/2021/07/14/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8esp8266/#more">尝试编译一次代码</a>【只需要检查相关库是否存在，不需要烧录到芯片】<h1 id="相关资料参考"><a href="#相关资料参考" class="headerlink" title="相关资料参考"></a>相关资料参考</h1><img src="https://user-images.githubusercontent.com/40520292/126493721-63adff26-bfb1-46ff-8530-5d811b197a9b.png" alt="image"></li>
</ul>
<p>【arduino安装包位置】  </p>
<p><img src="https://user-images.githubusercontent.com/40520292/126493844-f6e941db-8bde-4446-b138-1acc9c04b07f.png" alt="image"><br>【esp8266相关库文件位置】</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>ESP8266</tag>
      </tags>
  </entry>
  <entry>
    <title>实现linux下内网穿透</title>
    <url>/OLD_BLOG/2021/12/20/%E5%AE%9E%E7%8E%B0linux%E4%B8%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了更加方便添加信息，因此使用内网穿透对数据进行访问以及保存</p>
<span id="more"></span>


<h2 id="所需"><a href="#所需" class="headerlink" title="所需"></a>所需</h2><ul>
<li>解压工具<code>tar</code></li>
<li>软件<code>frp</code><ul>
<li>当前版本为<code>0.38.0</code></li>
</ul>
</li>
<li>一台外网主机<ul>
<li>阿里云轻量级服务器</li>
</ul>
</li>
<li>一台本地主机<ul>
<li>需要进行内网穿透的</li>
</ul>
</li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>访问<a href="https://github.com/fatedier/frp/releases">官网</a>进行下载适合你自己的压缩包并通过sftp上传到服务端和客户端中</p>
<p>在本地通过<code>tar -zxvf 文件名</code>进行解压</p>
<p>解压之后，你能在本地找到一个叫做<code>frp_0.38.0_linux_amd64</code>的文件夹，<code>cd</code>进入到目录下，找到如下文件：</p>
<ul>
<li><code>frpc</code>客户端服务</li>
<li><code>frpc.ini</code>客户端配置文件</li>
<li><code>frps</code>服务器端服务</li>
<li><code>frps.ini</code>服务端配置文件</li>
</ul>
<h2 id="配置客户端（内网主机）配置"><a href="#配置客户端（内网主机）配置" class="headerlink" title="配置客户端（内网主机）配置"></a>配置客户端（内网主机）配置</h2><p>首先进入到<code>frpc.ini</code>中，修改客户端端（内网主机）的配置</p>
<p><code>vim frpc.ini</code></p>
<p>将内容修改成如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 0.0.0.0	<span class="comment">#修改此内容，为你外网主机的IP地址</span></span><br><span class="line">server_port = 7000		<span class="comment"># 通信端口号，与外网主机的端口号一致，不要被占用</span></span><br><span class="line"></span><br><span class="line">[web01]		<span class="comment"># 你的项目服务名，不要太简单，可能会重复</span></span><br><span class="line"><span class="built_in">type</span> = http	<span class="comment"># 协议内容为http，可选ssh、https、utp</span></span><br><span class="line">local_ip = 127.0.0.1	<span class="comment"># 内网ip地址，可以使用域名,可以是内网的其他机器</span></span><br><span class="line">local_port = 80		<span class="comment"># 内网机器端口号</span></span><br><span class="line">custom_domains = 你的域名	<span class="comment"># 通过绑定域名或者输入外网ip地址来达到监听</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>退出之后输入 <code>sudo ./frpc -c frpc.ini</code>进行启动</p>
<blockquote>
<p>启动的时候会一直占用前端界面，因此可以使用其他工具将其置到后端Eg：<code>tmux</code></p>
</blockquote>
<h2 id="配置服务器端（外网主机）配置"><a href="#配置服务器端（外网主机）配置" class="headerlink" title="配置服务器端（外网主机）配置"></a>配置服务器端（外网主机）配置</h2><p>与上文一样，将文件拷贝过来，使用vim修改<code>frps.ini</code></p>
<p>配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000	<span class="comment"># 监听端口 需要确保一定是安全组打开的！！！！</span></span><br><span class="line">vhost_http_port = 80	<span class="comment"># 响应http请求的端口</span></span><br><span class="line"></span><br><span class="line">[web01]	<span class="comment"># 服务名称</span></span><br><span class="line"><span class="built_in">type</span> = http	<span class="comment"># 协议</span></span><br></pre></td></tr></table></figure>

<p>保存退出之后输入<code>sudo ./frps -c frps.ini</code></p>
<blockquote>
<p>与上文一样，启动的时候会一直占用前端界面，因此可以使用其他工具将其置到后端Eg：<code>tmux</code></p>
</blockquote>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>至此，配置结束，通过访问再客户端输入的那个域名来对内网机器进行访问</p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="https://gofrp.org/docs/overview/">Frp官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理实验前言</title>
    <url>/OLD_BLOG/2022/04/17/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C%E5%89%8D%E8%A8%80/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用数字图像处理实验代码之前需要看的</p>
<span id="more"></span>



<h1 id="需要准备"><a href="#需要准备" class="headerlink" title="需要准备"></a>需要准备</h1><p>在进行之后的所有项目之前，你需要安装或配置如下内容：</p>
<p><strong>全项目需要</strong></p>
<ul>
<li>python 3.8环境</li>
<li><code>anconda</code>(可选)【能够有效的区分项目代码，配置请自行百度】</li>
</ul>
<p><strong>实验过程中需要</strong></p>
<ul>
<li><code>opencv-python</code></li>
<li><code>matplotlib</code></li>
<li><code>skimage</code></li>
<li><code>flask</code>(可选) 【如果不安装，需要对实验二的代码进行修改】</li>
<li><code>numpy</code></li>
<li><code>os</code></li>
</ul>
<h1 id="实验教科书"><a href="#实验教科书" class="headerlink" title="实验教科书"></a>实验教科书</h1><p>如下：</p>
<p><a href="http://stings.oss-cn-hangzhou.aliyuncs.com/%E6%9D%8E%E4%BF%8A-%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6.doc">数字图像处理实验教科书下载</a></p>
<h1 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h1><p><a href="https://github.com/ZHYCarge/DIP_exercise">Github</a></p>
<p><a href="https://gitee.com/zhycarge/DIP_exercise">Gitee</a>【由于使用的是<a href="https://zhycarge.github.io/2022/04/17/GitHub%20Action%E6%95%99%E7%A8%8B/#:~:text=%E9%85%8D%E7%BD%AEAction%20%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5GitHub%E4%B8%8EGitee%E4%BB%93%E5%BA%93">Github Action进行自动同步</a>，因此会比Github的仓库有延迟】</p>
]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理笔记（更新中）</title>
    <url>/OLD_BLOG/2022/04/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E5%89%8D%E8%A8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里仅记录一下对于学习机器图像处理第四版冈萨雷斯的一个个人笔记</p>
<span id="more"></span>


<h2 id="相关文献"><a href="#相关文献" class="headerlink" title="相关文献"></a>相关文献</h2><ul>
<li><p><a href="https://blog.csdn.net/weixin_37625243/article/details/102556940">别人的读书笔记</a></p>
</li>
<li><p><a href="https://blog.csdn.net/Clover_pofu/article/details/104987717">邻域邻接关系</a></p>
</li>
<li><p><a href="https://blog.csdn.net/dta0502/article/details/92642634">https://blog.csdn.net/dta0502/article/details/92642634</a>)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理笔记——第五章</title>
    <url>/OLD_BLOG/2022/05/20/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0(%E7%AC%AC%E4%BA%94%E7%AB%A0)/</url>
    <content><![CDATA[<h1 id="图像复原与重建"><a href="#图像复原与重建" class="headerlink" title="图像复原与重建"></a>图像复原与重建</h1><span id="more"></span>



<blockquote>
<p>请注意：文章中的[^123]标码，代表数字图像处理——冈萨雷斯版图书的指定页码部分</p>
</blockquote>
<h2 id="复原与重建相关关系"><a href="#复原与重建相关关系" class="headerlink" title="复原与重建相关关系"></a>复原与重建相关关系</h2><p>图像增强主要为主观处理，图像复原很大程度为客观处理</p>
<p>图像复原是利用退化现象的先验知识来复原已经退化的图像，因此主要是对退化建模并且应用逆过程来复原图像</p>
<h2 id="图像退化-复原的一个模型"><a href="#图像退化-复原的一个模型" class="headerlink" title="图像退化/复原的一个模型"></a>图像退化/复原的一个模型</h2><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220520160201551.png" alt="image-20220520160201551"></p>
<h2 id="常见的复原算法"><a href="#常见的复原算法" class="headerlink" title="常见的复原算法"></a>常见的复原算法</h2><h3 id="只存在噪声的复原——空间滤波"><a href="#只存在噪声的复原——空间滤波" class="headerlink" title="只存在噪声的复原——空间滤波"></a>只存在噪声的复原——空间滤波</h3><h4 id="均值滤波器"><a href="#均值滤波器" class="headerlink" title="均值滤波器"></a>均值滤波器</h4><h5 id="算术平均滤波器-227"><a href="#算术平均滤波器-227" class="headerlink" title="算术平均滤波器[^227]"></a>算术平均滤波器[^227]</h5><p>使用大小$m*n$的一个空间核来实现，核的所有系数都是 $1/mn$均值滤波平滑图像中的局部变化，会降低图像中的噪声，但会模糊图像</p>
<h5 id="几何均值滤波器-227"><a href="#几何均值滤波器-227" class="headerlink" title="几何均值滤波器[^227]"></a>几何均值滤波器[^227]</h5><p>几何均值滤波器实现的平滑可与算数平均滤波器相比，但损失的图像细节会更少</p>
<h5 id="谐波平均滤波器"><a href="#谐波平均滤波器" class="headerlink" title="谐波平均滤波器"></a>谐波平均滤波器</h5><p>其滤波器既能处理盐粒噪声，又能处理类似于高斯噪声的其他噪声，但是不能处理胡椒噪声</p>
<h5 id="反谐波平均滤波器-227"><a href="#反谐波平均滤波器-227" class="headerlink" title="反谐波平均滤波器[^227]"></a>反谐波平均滤波器[^227]</h5><p>适用于降低或消除椒盐噪声，$Q$为正值时可以消除胡椒噪声，$Q$为负值时，可以消除椒盐噪声，但是</p>
<p><strong>不可以同时消除以上两种噪声</strong></p>
<p>$Q=0$时，反谐波平均滤波器简化为算术平均滤波器</p>
<p>$Q=-1$时，简化为谐波平均滤波器</p>
<h3 id="统计排序滤波器"><a href="#统计排序滤波器" class="headerlink" title="统计排序滤波器"></a>统计排序滤波器</h3><p>统计排序滤波器为空间滤波器，基于滤波器所围邻域中的像素值的顺序，结果决定了滤波器的响应。</p>
<h4 id="中值滤波器-229"><a href="#中值滤波器-229" class="headerlink" title="中值滤波器[^229]"></a>中值滤波器[^229]</h4><p>使用预定义的像素邻域的灰度中值来代替像素的值</p>
<p>可以有效的降低某些随机噪声，并且模糊度要小得多，对于单极或双极冲激噪声，中值滤波器效果更好</p>
<h4 id="最大值滤波器和最小值滤波器-230"><a href="#最大值滤波器和最小值滤波器-230" class="headerlink" title="最大值滤波器和最小值滤波器[^230]"></a>最大值滤波器和最小值滤波器[^230]</h4><p>最常使用的统计排序滤波器，但不是唯一使用的滤波器。</p>
<p>最大值滤波器可以找到图像中的最亮点或者用于削弱与明亮区域相邻的暗色区域</p>
<p>最大值滤波器可以降低胡椒噪声；</p>
<p>最小值滤波器可以找到图像中最暗点，或者用于削弱与暗色区域相邻的明亮区域</p>
<p>可以降低椒盐噪声</p>
<h4 id="中点滤波器-230"><a href="#中点滤波器-230" class="headerlink" title="中点滤波器[^230]"></a>中点滤波器[^230]</h4><p>统计排序滤波器和平均滤波器的结合，最适合用于处理随机分布的噪声，如：高斯噪声、均匀噪声</p>
<h4 id="修正阿尔法均值滤波器-230"><a href="#修正阿尔法均值滤波器-230" class="headerlink" title="修正阿尔法均值滤波器[^230]"></a>修正阿尔法均值滤波器[^230]</h4><p>适合处理多种混合噪声，如高斯噪声和椒盐噪声</p>
<h3 id="自适应滤波器"><a href="#自适应滤波器" class="headerlink" title="自适应滤波器"></a>自适应滤波器</h3><p>自适应滤波器的性能要优于前面讨论的所有滤波器，但增大了其复杂度</p>
<h4 id="自适应局部降噪滤波器-233"><a href="#自适应局部降噪滤波器-233" class="headerlink" title="自适应局部降噪滤波器[^233]"></a>自适应局部降噪滤波器[^233]</h4><p>均值为计算平均值区域上的平均灰度</p>
<p>方差是该区域上的图像对比度</p>
<h4 id="自适应中值滤波器-234"><a href="#自适应中值滤波器-234" class="headerlink" title="自适应中值滤波器[^234]"></a>自适应中值滤波器[^234]</h4><p>若椒盐噪声的空间密度较低，则使用中值滤波器滤波效果性能更好。</p>
<p>自适应中值滤波器可以处理更大概率的噪声</p>
<p>优点：可以在保留图像细节的同时平滑非冲激噪声</p>
<h2 id="使用频率域滤波器降低周期噪声"><a href="#使用频率域滤波器降低周期噪声" class="headerlink" title="使用频率域滤波器降低周期噪声"></a>使用频率域滤波器降低周期噪声</h2><p>频率域技术可以有效分析并滤除周期噪声</p>
<h3 id="陷波滤波深入介绍-236"><a href="#陷波滤波深入介绍-236" class="headerlink" title="陷波滤波深入介绍[^236]"></a>陷波滤波深入介绍[^236]</h3><h3 id="最优陷波滤波-239"><a href="#最优陷波滤波-239" class="headerlink" title="最优陷波滤波[^239]"></a>最优陷波滤波[^239]</h3><h3 id="线性位置不变退化-243"><a href="#线性位置不变退化-243" class="headerlink" title="线性位置不变退化[^243]"></a>线性位置不变退化[^243]</h3><h2 id="估计退化函数"><a href="#估计退化函数" class="headerlink" title="估计退化函数"></a>估计退化函数</h2><p>估计图像复原中退化函数主要有三种：</p>
<ul>
<li>观察法</li>
<li>试验法</li>
<li>数学建模法</li>
</ul>
<h3 id="采取观察法估计退化函数-245"><a href="#采取观察法估计退化函数-245" class="headerlink" title="采取观察法估计退化函数[^245]"></a>采取观察法估计退化函数[^245]</h3><p>应用：复原一幅具有历史价值的老照片</p>
<h3 id="采取试验法估计退化函数-245"><a href="#采取试验法估计退化函数-245" class="headerlink" title="采取试验法估计退化函数[^245]"></a>采取试验法估计退化函数[^245]</h3><h3 id="采用建模法估计退化函数-245"><a href="#采用建模法估计退化函数-245" class="headerlink" title="采用建模法估计退化函数[^245]"></a>采用建模法估计退化函数[^245]</h3><h2 id="逆滤波"><a href="#逆滤波" class="headerlink" title="逆滤波"></a>逆滤波</h2><p>直接逆滤波的性能一般较差，一般改进之后进行运算</p>
<h2 id="最小均方误差（维纳）滤波"><a href="#最小均方误差（维纳）滤波" class="headerlink" title="最小均方误差（维纳）滤波"></a>最小均方误差（维纳）滤波</h2><p>此算法基础：将图像和噪声视为随机变量</p>
<h2 id="约束最小二乘方滤波-252"><a href="#约束最小二乘方滤波-252" class="headerlink" title="约束最小二乘方滤波[^252]"></a>约束最小二乘方滤波[^252]</h2><h2 id="几何均值滤波-255"><a href="#几何均值滤波-255" class="headerlink" title="几何均值滤波[^255]"></a>几何均值滤波[^255]</h2><h2 id="由投影重建图像"><a href="#由投影重建图像" class="headerlink" title="由投影重建图像"></a>由投影重建图像</h2>]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理笔记——第一章</title>
    <url>/OLD_BLOG/2022/04/08/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><span id="more"></span>

<h2 id="什么是数字图像处理"><a href="#什么是数字图像处理" class="headerlink" title="什么是数字图像处理"></a>什么是数字图像处理</h2><ul>
<li><p>图片强度和灰度的定义</p>
<p>一幅图像可以定义为一个二维函数 $f(x,y)$ ，其中x和y是空间（平面坐标），任意一对空间坐标(x,y)处的幅值 $f$ 称为图像在该点的强度或者灰度。</p>
</li>
</ul>
<!--more-->

<ul>
<li><p>什么是数字图像</p>
<p>当上文中的x,y和灰度值 $f$都是有限的离散量时，我们称该图像为数字图像</p>
</li>
<li><p>什么是数字图像处理</p>
<p>借助数字计算机来处理数字图像</p>
</li>
<li><p>数字图像处理的分级</p>
<p>分为三种：低级处理、中级处理、高级处理</p>
<ul>
<li><p>低级处理</p>
<p>涉及初级操作、如降低噪声的图像预处理、对比度增强和图像锐化。</p>
<p>特点：输入输出都是图像</p>
</li>
<li><p>中级处理</p>
<p>涉及诸多任务，如分割，将这些目标简化为适合计算机进行处理的形式的描述，以及各个目标的分类（识别）</p>
<p>特点：输入是图像，输出是这些图像中提取的特征（如边缘、轮廓和各个目标的标识等）来进行表征</p>
</li>
<li><p>高级处理</p>
<p>涉及”理解“在连续体远端位置识别的一组目标，以及执行通常人类与视觉相关的认知功能</p>
<p>特点：输入的是数据，输出的是对此物体的认知</p>
</li>
</ul>
</li>
<li><p>数字图像处理的界定</p>
<p>此书将数字图像处理界定为其输入和输出都是图像处理，包含从图像中提取特征的处理，直至包含各个目标的识别</p>
</li>
</ul>
<h2 id="数字图像处理技术的应用实例"><a href="#数字图像处理技术的应用实例" class="headerlink" title="数字图像处理技术的应用实例"></a>数字图像处理技术的应用实例</h2><ul>
<li><p>伽马射线成像</p>
<p>核医学和天文观测</p>
</li>
<li><p>X射线成像</p>
<p>医学诊断、工业、天文学</p>
</li>
<li><p>紫外波段成像</p>
<p>平板印刷术、工业检测、显微方法、激光、生物成像和天文观测等</p>
</li>
<li><p>可见光和红外波段成像</p>
<p>光学显微镜、遥感、天文学、工业、执法等</p>
</li>
<li><p>微波波段成像</p>
<p>雷达</p>
</li>
<li><p>无线电波段成像</p>
<p>医学和天文学</p>
</li>
<li><p>其他成像方式</p>
<p>声波成像、电子显微、合成图像</p>
</li>
</ul>
<h2 id="数字图像处理的基本步骤"><a href="#数字图像处理的基本步骤" class="headerlink" title="数字图像处理的基本步骤"></a>数字图像处理的基本步骤</h2><p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220407163119491.png" alt="image-20220407163119491"></p>
<ul>
<li><p>图像获取</p>
<p>获取图像，并包括图像预处理，如缩放等</p>
</li>
<li><p>图像增强</p>
<p>对图像进行某种操作，让结果在<strong>特定</strong><a href="%E6%9C%80%E5%88%9D%E9%98%B6%E6%AE%B5%E7%9A%84%E5%A2%9E%E5%BC%BA%E6%8A%80%E6%9C%AF%EF%BC%8C%E6%98%AF%E9%9D%A2%E5%90%91%E9%97%AE%E9%A2%98%E5%BB%BA%E7%AB%8B%E7%9A%84">^1</a>应用中比原图像更合适的过程</p>
</li>
<li><p>图像复原</p>
<p>改进图像外观的一个领域</p>
</li>
<li><p>彩色图像处理</p>
</li>
<li><p>小波</p>
<p>以不同分辨率来表示图像的基础，此书中用来描述图像数据压缩和金字塔表示</p>
</li>
<li><p>形态学处理</p>
<p>提取图像中用于表示和描述形状成分的处理工具</p>
</li>
<li><p>分割</p>
<p>将一幅图片划分为各个组成部分或目标</p>
</li>
<li><p>特征提取</p>
<p>包含特征检测和特征描述</p>
<ul>
<li>特征检测：寻找一幅图像的特征、区域和边界</li>
<li>特征描述：对检测到的特征进行规定以及量化</li>
</ul>
</li>
<li><p>图像模式分类</p>
<p>根据目标特征描述子对目标赋予标记的过程</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p>计算机视觉的最终目的</p>
<p>计算机视觉的最终目标是使用计算机来模拟人的视觉，包括理解并根据视觉输入采取行动等</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理笔记——第六章</title>
    <url>/OLD_BLOG/2022/05/19/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="彩色图像处理"><a href="#彩色图像处理" class="headerlink" title="彩色图像处理"></a>彩色图像处理</h1><span id="more"></span>

<h2 id="彩色模型"><a href="#彩色模型" class="headerlink" title="彩色模型"></a>彩色模型</h2><ul>
<li><p>目的、作用</p>
<p>使用某种标准来方便的规定颜色</p>
</li>
<li><p>本质规定</p>
<ul>
<li>坐标系</li>
<li>坐标系内子空间</li>
</ul>
</li>
<li><p>面向</p>
<ul>
<li><p>面向应用的</p>
<ul>
<li><p>HSI（色调、饱和度、亮度）</p>
<p>针对人们描述和解释颜色的方式</p>
</li>
</ul>
</li>
<li><p>面向硬件的</p>
<ul>
<li>RGB（红、绿、蓝）模型</li>
<li>CMY（青色、深红色、黄色）</li>
<li>CMYK（青色、深红色、黄色、黑色）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="GRB色彩模型"><a href="#GRB色彩模型" class="headerlink" title="GRB色彩模型"></a>GRB色彩模型</h3><p>以红、绿、蓝三种光谱成分表示，根据笛卡尔坐标系建立</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519150532414.png" alt="image-20220519150532414"></p>
<p>其中，每个像素所用的比特数称为像素深度</p>
<p>术语全彩图像通常用于表达一幅24比特的RGB彩色图像</p>
<p>对于数字图像，立方体值域已被标定为图像中比特数表示的数字</p>
<p>若原色为8比特，则值域为[0,255]</p>
<h3 id="CMY与CMYK彩色模型"><a href="#CMY与CMYK彩色模型" class="headerlink" title="CMY与CMYK彩色模型"></a>CMY与CMYK彩色模型</h3><p>青色、深红色、黄色是二次元色，为颜料颜色。大多数在纸上淀积色彩的设备，都会要求进行RGB-&gt;CMY的转换，或直接输入CMY数据，转换方式如下：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519151131011.png" alt="image-20220519151131011"></p>
<p>式子中将所有的彩色值统一归化到区间[0,1]之间，并且RGB值可以用$1-CMY$值来获得</p>
<p>在实际过程中，CMY所对应的颜色并不是纯色的，组合颜色会产生模糊的棕色，因此引用黑色（用K来表示）</p>
<p>提出 CMYK彩色模型。其转换模型如下（CMK转换为CMYK）：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519151443907.png" alt="image-20220519151443907"></p>
<h3 id="HSI色彩模型"><a href="#HSI色彩模型" class="headerlink" title="HSI色彩模型"></a>HSI色彩模型</h3><p>上述彩色系统适合硬件实现，但并不能很好的描述人类实际解释的颜色，并且并不会认为彩色图像是由3副原色图像合成的单幅图像。</p>
<p>通常观察物体时，会用色调、饱和度、亮度来表述这个物体，因此HSI模型会分离彩色图像中亮度成分和所携带的色彩的信息，会更自然和直观的彩色描述来开放图像处理算法的有用工具。RGB对图像彩色生成是理想的，但对于颜色描述有许多局限性。下图为基于彩色三角形和圆形的HSI模型：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519151902509.png" alt="image-20220519151902509"></p>
<h4 id="RGB到HSI的彩色变换"><a href="#RGB到HSI的彩色变换" class="headerlink" title="RGB到HSI的彩色变换"></a>RGB到HSI的彩色变换</h4><p>公式内容，详见书P288</p>
<h2 id="假彩色图像处理"><a href="#假彩色图像处理" class="headerlink" title="假彩色图像处理"></a>假彩色图像处理</h2><p>假彩色图像处理指按照规定的准则对灰度值赋予颜色的处理.</p>
<ul>
<li><p>假彩色</p>
<ul>
<li><p>介绍</p>
<p>用于区分对单色图像赋予彩色的处理或对真彩色图像赋予彩色的处理</p>
</li>
<li><p>主要应用</p>
<p>可视化和解释单幅图像或一序列图像中的灰度事件</p>
</li>
</ul>
</li>
</ul>
<h3 id="灰度分层和彩色编码"><a href="#灰度分层和彩色编码" class="headerlink" title="灰度分层和彩色编码"></a>灰度分层和彩色编码</h3><p>灰度分层和彩色编码技术是假彩色图像处理最简单、最早期的例子。</p>
<p>分层方法是先平行于图像坐标平面放置一个平面，然后让每个平面”切割“相交的区域</p>
<p>下图显示用 $f(x,y)=I_i$处的一个平面将图像灰度函数切割为两部分的例子：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519152728656.png" alt="image-20220519152728656"></p>
<p>灰度级在该平面上的像素编码为一种颜色，灰度级在平面下的一种像素编码为另一种颜色。平面上的灰度级本身可以赋予两种颜色的任意一种，也可以赋予第三种颜色来突出这一级别的像素。</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519153049962.png" alt="image-20220519153049962"></p>
<h3 id="灰度到彩色的变换"><a href="#灰度到彩色的变换" class="headerlink" title="灰度到彩色的变换"></a>灰度到彩色的变换</h3><p>通过对输入像素的灰度执行三个独立的变换，然后将三个结果分别输入彩色显示器中的红色、绿色和蓝色通道，通过这种方法来生成一幅合成图像，图像颜色由变换函数的性质调控</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519153259571.png" alt="image-20220519153259571"></p>
<p>此处使用灰度级分段线性函数来产生颜色</p>
<h2 id="全彩色图像处理基础"><a href="#全彩色图像处理基础" class="headerlink" title="全彩色图像处理基础"></a>全彩色图像处理基础</h2><p>分类如下：</p>
<ul>
<li><p>分别处理每幅图像的灰度分量图像，然后将处理后端各幅分量图像合成一幅彩色图像</p>
</li>
<li><p>直接处理彩色像素</p>
<p>因为全彩色图像至少有三个分量，因此彩色像素是向量</p>
<p>在RGB系统中，每个彩色点都可以使用RGB坐标系从原点延伸到该点的一个向量来解释：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519153742654.png" alt="image-20220519153742654"></p>
</li>
</ul>
<p>一对空间坐标$(x,y)$确定了所有三幅分量图像中的同一个像素位置：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519153900803.png" alt="image-20220519153900803"></p>
<p>在式（6.37）描述了一个向量，其分量为空间变量x与y，由于可能会混淆，因此可以引入一个因子来让我们处理彩色图像，使用标准的灰度图像处理方法但单独处理彩色图像中的每幅分量图像，在处理完成之后需要使用直接处理彩色点元素的方法，当这些点有两个及以上的成分时，称其为<strong>体素</strong>；在指一幅以上的二维图像时，会交替使用术语向量、点和体素。</p>
<p>每幅分量图像处理等价于基于向量的处理，需满足：</p>
<ul>
<li>处理必须同时适用于向量和标量</li>
<li>对向量（体素）的每个分量的运算，必须独立于其他分量</li>
</ul>
]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理笔记——第二章</title>
    <url>/OLD_BLOG/2022/05/12/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="第二章-数字图像基础"><a href="#第二章-数字图像基础" class="headerlink" title="第二章 数字图像基础"></a>第二章 数字图像基础</h1><span id="more"></span>

<h2 id="人眼的结构"><a href="#人眼的结构" class="headerlink" title="人眼的结构"></a>人眼的结构</h2><ul>
<li><p>光感受器</p>
<p>分为锥状体和杆状体</p>
<ul>
<li><p>锥状体</p>
<p>600-700万个，主要分布在视网膜中央凹的中间部分，对颜色高度敏感，每个锥状体都连接到了自身的神经末梢，锥状体视觉被称为明视觉或者亮视觉</p>
</li>
<li><p>7500-15000万个，分布面积大，并且几个杆状体连接一个神经末梢，捕获视野内整体图像，没有色觉，对低光照度敏感，暗视觉或微光视觉</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220407165148457.png" alt="image-20220407165148457"></p>
<h2 id="人眼图像的形成"><a href="#人眼图像的形成" class="headerlink" title="人眼图像的形成"></a>人眼图像的形成</h2><p>晶状体和成 像区域（视网膜）之间的距离是固定的,正确聚焦的焦距是通过改变晶状体的形状得到的。在远离或 接近目标时’睫状体中的纤维通过分别压扁或加厚晶状体来实现聚焦</p>
<p>视网膜图像主要聚焦在中央凹区域。然后’光感受器的相对激励作用产生感知,把辐射能量转换为最终由大脑解码的电脉冲</p>
<h2 id="亮度适应和识别"><a href="#亮度适应和识别" class="headerlink" title="亮度适应和识别"></a>亮度适应和识别</h2><ul>
<li>两种现象表明感知亮度不是实际灰度的简单函数<ul>
<li>“上冲”或“下冲”现象——又称马赫带效应</li>
<li>同时对比：一个区域的感知亮度并不只是取决于其灰度</li>
</ul>
</li>
</ul>
<h2 id="图像获取及感知"><a href="#图像获取及感知" class="headerlink" title="图像获取及感知"></a>图像获取及感知</h2><ul>
<li><p>常用成像传感器配置有哪些</p>
<ul>
<li>单个成像传感器</li>
<li>条带传感器</li>
<li>阵列传感器</li>
</ul>
</li>
<li><p>成像原理</p>
<p>组合输入电能和传感器对正被检测能量类型的响应，将入射能量转换为电压</p>
</li>
</ul>
<h2 id="一个简单的成像模型"><a href="#一个简单的成像模型" class="headerlink" title="一个简单的成像模型"></a>一个简单的成像模型</h2><p>用形如 $f(x,y)$的二维函数来表示图像。在空间坐标(x,y)处的 $f$的值是一个标量，其物理意义由图像源决定，其值与物理源辐射的能量成正比。因此 $f(x,y)$值一定非负的和有限的，即<br>$$<br>0\leq f(x,y)&lt;∞<br>$$<br>函数 $f(x,y)$由两个分量表示：1. 入射到被观察场景的光源照射量 2. 被场景中物体反射的照射量  被称为入射分量和反射分量，并用 $i(x,y)$与 $r(x,y)$进行表示。这两个函数的乘积形成 $f(x,y)$即<br>$$<br>f(x,y) = i(x,y)r(x,y)<br>$$<br>其中 $0\leq i(x,y) &lt;∞$ ， $0\leq r(x,y)\leq1$</p>
<p>于是，反射分量被限制在0（全吸收）和1（全反射）之间。 $i(x,y)$的性质取决于照射源，而 $r(x,y)$的性质取决于被成像物体的特性。</p>
<h2 id="图像取样以及量化"><a href="#图像取样以及量化" class="headerlink" title="图像取样以及量化"></a>图像取样以及量化</h2><ul>
<li><p>取样和量化的基本概念</p>
<p>对坐标值进行数字化称为取样，对幅度值进行数字化称为量化</p>
</li>
<li><p>灰度分辨率</p>
<ul>
<li><p>指在灰度级中可分辨的最小变化</p>
<p>最常用是8bit，还有16bit，32nit</p>
</li>
<li><p>通常是量化灰度时所用的比特数</p>
<p>灰度被量化为256级的图像，灰度分辨率为8bit</p>
</li>
</ul>
</li>
<li><p>伪轮廓</p>
<p>恒定灰度区域内有一组不易察觉的精细脊状结构，因为数字图像平滑区域中的灰度级不足引起的</p>
</li>
<li><p>对比度</p>
<p>一幅图像中最高和最低灰度级间的灰度差。当图像中像素可感知的数值有高的动态范围时，认为该图像有高的对比度</p>
</li>
</ul>
<h3 id="图像内插"><a href="#图像内插" class="headerlink" title="图像内插"></a>图像内插</h3><p>在图像放大、缩小、旋转和几何校正等任务中使用</p>
<p>内插是用已知数据来估计未知位置的值的过程</p>
<ul>
<li><p>最邻近内插</p>
<p>将原图像中最邻近的灰度赋给每个新位置</p>
<p>方法简单，但是会产生人为失真（直边失真）</p>
</li>
<li><p>双线性内插</p>
<p>使用四个最邻近的灰度来计算给定位置的灰度。令 (x,y)表示待赋灰度值的位置的坐标，令 $v(x,y)$表示灰度值。所赋值由如下公式可得：<br>$$<br>v(x,y) =ax+by+cxy+d<br>$$<br>4个系数可用点(x,y)的4个最邻近点写出的4个未知方程求出</p>
<p>结果比最邻近要好，但计算量大</p>
</li>
<li><p>双三次内插</p>
<p>包括16个最邻近点。赋给点(x,y)的灰度值由如下公式得到：<br>$$<br>v(x,y) = \sum_{i=1}^3 \sum_{j=0}^3 a_{ij}x^iy^j<br>$$<br>其中，式子中16个系数可用点(x,y)的16个最近临点写出的16个未知方程求出</p>
<p>保留细节方面强于双线性内插</p>
</li>
</ul>
<h2 id="像素间的一些基本关系"><a href="#像素间的一些基本关系" class="headerlink" title="像素间的一些基本关系"></a>像素间的一些基本关系</h2><ul>
<li><p>邻域</p>
<p>坐标(x,y)处的像素$p$有两个水平相邻像素和2个垂直的相邻像素，坐标为：</p>
</li>
</ul>
<p>$$<br>(x+1,y),(x-1,y)(x,y+1),(x,y-1)<br>$$</p>
<p>​        这组像素称为$p$的 4邻域用 $N_4(p)$来表示。（黄色部分为邻域部分）</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220407200147083.png" alt="image-20220407200147083"></p>
<p>​        $p$的4个对角的相邻像素坐标为：<br>$$<br>(x+1,y+1),(x+1,y-1),(x-1,y+1),(x-1,y-1)<br>$$<br>​        用 $N_D(P)$来表示。（黄色部分为邻域部分）</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220407200509195.png" alt="image-20220407200509195"></p>
<p>这些相邻像素和4邻域合称为$p$的8邻域，用 $N_8(P)$来表示。点$p$的相邻像素的图像位置集称为$p$的邻域。（黄色部分为邻域部分）</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220407200220881.png" alt="image-20220407200220881"></p>
<p>​        如果一个邻域包含$p$，那么称该邻域为闭邻域，否则称其为开邻域</p>
<ul>
<li><p>邻接</p>
<p>令 $V$是用于定义邻接的灰度值集合。在二值图像中，指值为1的像素的邻接时， $V={1}$ 在灰度图像中，这一概念相同，但集合 $V$通常包含更多元素</p>
<ul>
<li><p>4邻接</p>
<p>$q$在集合 $N_4(P)$中时，值在$V$中的两个像素 $p$和 $q$是4邻接的</p>
</li>
<li><p>8邻接</p>
<p>$q$在集合 $N_8(P)$中时，值在 $V$中的两个像素 $p$和 $q$时8邻接的</p>
</li>
<li><p>$m$邻接（混合邻接）</p>
<p>若 $q$在 $N_4(P)$中  或者  $q$在 $N_D(P)$中，且集合 $N_4(p) \bigcap N_4(q) $中没有值在 $V$中的像素，那么值在 $V$中的两个像素 $p$和 $q$是 $m$邻接的</p>
<p>目的：消除8邻接时可能导致的歧义性</p>
</li>
</ul>
<p>邻接例子解释（不一定对，仅为自己所参考）：</p>
</li>
</ul>
<details><summary>点我查看详情</summary>




<p>若集合 $V$为 $V={1,2,3,4}$，点 $P=1$，则点 $P$的四邻域如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220408152430538.png" alt="image-20220408152430538"></p>
<p>则黄色所示区域为点 $P=1$的4邻域，根据书中描述所示，若点 $q=2$，并且处于上图所示的黄色区域中，则称p、q是4连接的，例图如下（若点 $p$像素值为1，点 $q$像素值为2，并且点 $q$在点 $q$的右侧）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220408152823623.png" alt="image-20220408152823623"></p>
<p>​    </p>
<p>8邻接：</p>
<p>例图如下（黄色区域为点 $p$的8邻域区域；若点 $p$像素值为1，点 $q$像素值为2，并且点 $q$在点 $q$的右上侧）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220408153056155.png" alt="image-20220408153056155"></p>
<p>混合邻接：</p>
<p>由描述可进行推导：定义集合 $V$ 为 $V={1，2}$，点 $p=1，q=1，r=2$，若点 $p$在点 $q$的8邻域中，并且且在集合 $N_4(p) \bigcap N_4(q) $中，没有 ${1、2}$这两个像素值，则说点 $p$和点 $q$是 m邻接的.</p>
<p><strong>请注意：m邻接和前面的4邻接与8邻接并不冲突，p、q可以是4邻接的同时也是m邻接</strong></p>
<p>例图如下（<a href="https://blog.csdn.net/Clover_pofu/article/details/104987717">例图原帖</a>）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220409212434289.png" alt="image-20220409212434289"></p>
<p>那么：</p>
<ul>
<li><p>图(a)中，p和q是m邻接、8邻接的。q和r是m邻接、4邻接的。p和r不邻接。</p>
</li>
<li><p>图(b)中，p和q是m邻接、4邻接的。q和r是m邻接、4邻接的。p和r是8邻接、但不是m邻接的</p>
<p>（因为p和r的4邻域交集中，有个q是属于V的）。</p>
</li>
<li><p>图(c )中，p和q是m邻接、4邻接的。r没有和p或q邻接。</p>
</li>
<li><p>图(d)中，p和q是m邻接、8邻接的。q和r是m邻接、8邻接的。p和r不邻接。</p>
</li>
<li><p>图(e)中，p和q是m邻接、8邻接的。q和r是m邻接、8邻接的。p和r不邻接。</p>
</li>
<li><p>图(f)中，p和q是m邻接、4邻接的。q和r是m邻接、4邻接的。p和r不邻接。</p>
</li>
</ul>
</details>

<ul>
<li><p>连通 （部分内容参考<a href="https://blog.csdn.net/u010622874/article/details/51719556">博文</a>）</p>
<p>令 $S$表示图像中像素的一个子集。如果完全由 $S$中的所有像素组成的两个像素 $p$和 $q$之间存在一个通路，那么称 $p$和 $q$在 $S$中是连通的。</p>
<ul>
<li><p>连通分量</p>
<p>对于 $S$中的任何像素 $p$，在 $S$中连通到该像素的像素集称为 $S$的连通分量</p>
</li>
<li><p>连通集</p>
<p>若 $S$只有一个连通分量，则集合 $S$称为连通集</p>
</li>
<li><p>4连通</p>
<p>对于具有值$V$的像素$p$和$q$，如果$q$在集合$N_4(p)$中，则称这两个像素是4连通的</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220409213514647.png" alt="image-20220409213514647"></p>
</li>
<li><p>8连通</p>
<p>对于具有值$V$的像素$p$和$q$，如果$q$在集合$N_8(p)$中，则称这两个像素是8连通的</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/20160620111237931" alt="这里写图片描述"></p>
</li>
<li><p>m连通</p>
<p>若 $q$在 $N_4(P)$中  或者  $q$在 $N_D(P)$中，且集合 $N_4(p) \bigcap N_4(q) $中没有值在 $V$中的像素，则称两个像素是m连通的</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/20160620111248197" alt="这里写图片描述"></p>
</li>
</ul>
</li>
<li><p>区域&amp;边界</p>
<p>若集合 $R$是一个连通集，则称 $R$为图像上的一个区域。</p>
<p>两个区域 $R_i$和 $R_j$联合形成一个连通集时，称$R_i$和 $R_j$为邻接区域。</p>
<p>不邻接的区域称为不相交区域</p>
<p><strong>注意：为了使定义有意义，因此在使用过程中需要指定邻接的类型</strong></p>
</li>
</ul>
<h3 id="距离测度"><a href="#距离测度" class="headerlink" title="距离测度"></a>距离测度</h3><p>对于坐标为 $p(x,y),q(u,v),s(w,z)$的三个像素点，如果</p>
<ol>
<li>$D(p,q)\geq0$ 【若出现 $D(p,q)=0$则当前仅当 $p=q$】</li>
<li>$D(p,q)=D(q,p)$</li>
<li>$D(p,s)\leq D(p,q)+D(q,s)$</li>
</ol>
<p>则 $D$是一个距离函数或者是距离测度。</p>
<ul>
<li>欧几里得距离($D_e$)</li>
</ul>
<p>​         $p$和 $q$之间的欧几里得距离定义为<br>$$<br>D_e(p,q)=\sqrt{(x-u)^2+(y-u)^2}<br>$$<br>​        对于这个距离测度，到点 $(x,y)$的距离小于等于 $r$的像素,是中心在  $(x,y)$,半径为 $r$的圆盘</p>
<ul>
<li>城市街区距离( $D_4$)</li>
</ul>
<p>​        $p$和 $q$之间的距离 $D_4$(城市街区距离)定义为<br>$$<br>D_4(p,q)=|x-u|+|y-v|<br>$$<br>​        此时,到 $(x,y)$的距离 $D_4$小于等于 $d$的像素形成的一个中心为 $(x,y)$的菱形.</p>
<p>​        例如到 $(x,y)$的距离$D_4$小于等于2的像素形成如下恒定距离的轮廓:</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220408220312968.png" alt="image-20220408220312968"></p>
<p>​        其中, $D_4=1$的像素是 $(x,y)$的4邻域.</p>
<ul>
<li><p>棋盘距离($D_8$)</p>
<p>定义为:<br>$$<br>D_8(p,q)=max(|x-u|,|y-v|)<br>$$<br>此时,到 $(x,y)$的距离 $D_8$小于等于 $d$的像素形成一个中心为 $(x,y)$的方形.例如到中心点的距离 $D_8$小于等于2的像素形成如下恒定距离的轮廓:</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220408220844199.png" alt="image-20220408220844199"></p>
<p>其中 $D_8=1$的像素是位于点 $(x,y)$的像素的8邻域.</p>
</li>
</ul>
<h2 id="数学工具"><a href="#数学工具" class="headerlink" title="数学工具"></a>数学工具</h2><h3 id="对应元素运算和矩阵运算"><a href="#对应元素运算和矩阵运算" class="headerlink" title="对应元素运算和矩阵运算"></a>对应元素运算和矩阵运算</h3><p>图像可以等效地视为矩阵。两幅图像的阵列相乘是图像矩阵的点乘；矩阵相乘是两个图像矩阵的相乘。</p>
<details>
    <summary>矩阵运算</summary>



<p>以 $\begin{bmatrix} a_{11} &amp; a_{12}\a_{21} &amp; a_{22} \end{bmatrix}$与 $\begin{bmatrix} b_{11} &amp; b_{12}\b_{21} &amp; b_{22} \end{bmatrix}$作为图像(矩阵)为例：</p>
<p>两幅图像对应元素的积（用符号 $\otimes$或者 $\odot$ 表示）：<br>$$<br>\begin{bmatrix} a_{11} &amp; a_{12}\a_{21} &amp; a_{22} \end{bmatrix} \otimes \begin{bmatrix} b_{11} &amp; b_{12}\b_{21} &amp; b_{22} \end{bmatrix} = \begin{bmatrix} a_{11}b_{11} &amp; a_{12}b_{12} \ a_{21}b_{21} &amp; a_{22}b_{22} \end{bmatrix}<br>$$</p>
<p>因此，对应元素的积是由一对对应像素相乘得到的。图像的矩阵乘积使用如下的矩阵乘法规则得到的：<br>$$<br>\begin{bmatrix} a_{11} &amp; a_{12}\a_{21} &amp; a_{22} \end{bmatrix}  \begin{bmatrix} b_{11} &amp; b_{12}\b_{21} &amp; b_{22} \end{bmatrix} = \begin{bmatrix} a_{11}b_{11}+a_{12}b_{21} &amp; a_{11}b_{12}+a_{12}b_{22} \ a_{21}b_{11}+a_{22}b_{21} &amp; a_{21}b_{12}+a_{22}b_{22} \end{bmatrix}<br>$$</p>
</details>



<h3 id="线性运算和非线性运算"><a href="#线性运算和非线性运算" class="headerlink" title="线性运算和非线性运算"></a>线性运算和非线性运算</h3><p>考虑一般算子 $\H$ ,该算子对给定的一幅输入图像 $f(x,y)$ 产生一幅输出图像 $g(x,y)$：<br>$$<br>\digamma[af_1(x,y)+bf_2(x,y)] = a\digamma[f_1(x,y)]+b\digamma[f_2(x,y)] = ag_1(x,y)+bg_2(x,y)<br>$$<br>则称算子 $\H$是一个线性算子。</p>
<ul>
<li><p>加性</p>
<p>两个输入求和的线性运算的输出，与分别对应输入进行运算并求和得到的结果相同</p>
</li>
<li><p>同质性</p>
<p>输入乘以常数的先行原酸的输出，与原始输入乘以该常数的运算的输出相同</p>
</li>
</ul>
<p>对于不满足上式的运算式称为非线性运算。</p>
<h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p>图像间的算术操作是阵列操作，在相应像素对之间执行加减乘除。</p>
<p>应用：</p>
<ul>
<li>图像相加（平均）降低噪声</li>
<li>图像相减比较图像</li>
</ul>
<h3 id="集合运算与逻辑运算"><a href="#集合运算与逻辑运算" class="headerlink" title="集合运算与逻辑运算"></a>集合运算与逻辑运算</h3><h3 id="空间运算"><a href="#空间运算" class="headerlink" title="空间运算"></a>空间运算</h3><ul>
<li><p>单像素运算</p>
<p>数字图像处理中最简单的运算，使用变换函数 $T$ $s= T(z)$来改变图像中各个像素的灰度。</p>
<p>$z$是原图像的灰度值， $s$是处理后的图像对应部分的像素值</p>
</li>
<li><p>邻域运算</p>
</li>
<li><p>几何空间变换（橡皮膜变换，坐标空间变换+灰度内插）</p>
<p>仿射变换：对一组坐标点做尺度，旋转，平移或偏移</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/20191015170531697.png" alt="在这里插入图片描述"></p>
<p>仿射变换图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHYCarge/photo/image-20220409230145651.png" alt="image-20220409230145651"></p>
</li>
</ul>
<h3 id="向量与矩阵运算"><a href="#向量与矩阵运算" class="headerlink" title="向量与矩阵运算"></a>向量与矩阵运算</h3><h3 id="图像变换"><a href="#图像变换" class="headerlink" title="图像变换"></a>图像变换</h3><h3 id="图像灰度和随机变量"><a href="#图像灰度和随机变量" class="headerlink" title="图像灰度和随机变量"></a>图像灰度和随机变量</h3>]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理笔记——第三章</title>
    <url>/OLD_BLOG/2022/05/12/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="第三章-灰度变换与空间滤波"><a href="#第三章-灰度变换与空间滤波" class="headerlink" title="第三章 灰度变换与空间滤波"></a>第三章 灰度变换与空间滤波</h1><span id="more"></span>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="灰度变换和空间滤波基础"><a href="#灰度变换和空间滤波基础" class="headerlink" title="灰度变换和空间滤波基础"></a>灰度变换和空间滤波基础</h3><p>空间域处理基于表达式<br>$$<br>g(x,y)=T[f(x,y)]<br>$$<br>其中， $f(x,y)$是输入图像， $g(x,y)$是输出图像， $T$是在点 $(x,y)$的一个领域上定义针对 $f$的算子</p>
<p>灰度变换函数：<br>$$<br>s=T(r)<br>$$<br>简单起见，使用 $s$或者 $r$ 分别表示$g$和 $f$在任意点 $(x,y)$的灰度</p>
<h2 id="一些基本的灰度变换函数"><a href="#一些基本的灰度变换函数" class="headerlink" title="一些基本的灰度变换函数"></a>一些基本的灰度变换函数</h2><h3 id="图像反转"><a href="#图像反转" class="headerlink" title="图像反转"></a>图像反转</h3><p>灰度级在区间 $[0,L-1]$的反转图像形式为<br>$$<br>s = L-1-r<br>$$<br>使用这种方式反转图像的灰度级，会有一种类似于照片底片的结果。</p>
<p>可用于增强图像暗色区域的白色或者灰色细节，若暗色区域的尺寸很大这种增强效果会更好</p>
<h3 id="对数变换"><a href="#对数变换" class="headerlink" title="对数变换"></a>对数变换</h3><p>对数变换的通式为<br>$$<br>s = clog(1+r)<br>$$<br>c是一个常数，并且 $r\geq0 $</p>
<p>此变换会将输入中范围较窄的低灰度值映射为输出中范围较宽的灰度级，输入中的高灰度值则会被映射为输出中范围较窄的灰度级，使用此方法来扩展图像中的暗像素值。反对数变换的作用与此相反</p>
<h3 id="幂律-伽马-变换"><a href="#幂律-伽马-变换" class="headerlink" title="幂律(伽马)变换"></a>幂律(伽马)变换</h3><p>通过压缩或者扩展图像的灰度级来增强图像对比度</p>
<p>表达式为：<br>$$<br>s=cr^\gamma<br>$$<br>其中$c$ 和 $\gamma$ 均为正常数，若考虑到偏移情况，即输入为0的时候的一个可度量输出，有时公式也会为：$s=c(r+\epsilon)^\gamma$但偏移往往会是校准问题，因此可忽略不计</p>
<h3 id="分段线性变换函数"><a href="#分段线性变换函数" class="headerlink" title="分段线性变换函数"></a>分段线性变换函数</h3><p>与前面函数相比的优点为：其形式可以任意复杂；缺点是会要求用户输入很多参数。</p>
<ul>
<li><p>对比度拉伸</p>
<p>通过扩展图像的灰度级范围，使其覆盖记录介质或者显示设备的整个理想灰度范围</p>
</li>
<li><p>灰度级分层：突出图像中特定灰度范围的亮度</p>
<p>突出图像的特定灰度区间，有如下两种基本方法的变体：</p>
<ul>
<li>将感兴趣范围内所有的灰度值显示为一个值（如白色），其他灰度值显示另外一个值（如黑色），产生一幅二值图像</li>
<li>使期望的灰度范围变亮（或变暗），但保持图像的其他灰度级不变</li>
</ul>
</li>
<li><p>比特平面分层</p>
<p>像素值是由比特组成的整数。如在256级灰度图像中，图像值是由8比特组成的，其中平面1包含图像中所有像素的最低有效比特，平面8则包含所有像素最高有效比特。</p>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220503153448475.png" alt="image-20220503153448475"></p>
<p>将图像分解成各个比特平面对分析图像每个比特的相对重要性使有用的，可以确定量化图像所用比特的充分性。</p>
<p>突出特定比特。四个高阶比特平面包含视觉上重要的大多数数据，低阶比特平面贡献了更精细的灰度细节。原图像中任意一个像素的值可以由比特平面中对应的二进制像素值来重建，可以用于减少存储量</p>
</li>
</ul>
<h2 id="直方图处理"><a href="#直方图处理" class="headerlink" title="直方图处理"></a>直方图处理</h2><p>令 $r_k , k=0,1,2，……,L-1$表示一副 $L$级回复数字图像 $f(x,y)$的灰度。 $f$的非归一化直方图定义为<br>$$<br>h(r_k)=n_k \ \ \ \  k=0,1,2,……,L-1<br>$$<br>其中， $n_k$是 $f$中灰度为 $r_k$的像素的数量。类似的， $f$的归一化直方图定义为<br>$$<br>p(r_k) = \frac{h(r_k)}{MN} = \frac{n_k}{MN}<br>$$<br>其中， MN分别是图像的行和列。多数情况下处理的是归一化直方图，简称为直方图或者图像直方图</p>
<p>若像素占据整个灰度级范围并且均匀分布的图像，将具有高对比度的外观和多种灰色调。</p>
<h3 id="直方图基本灰度特征"><a href="#直方图基本灰度特征" class="headerlink" title="直方图基本灰度特征"></a>直方图基本灰度特征</h3><p>Q：直方图相同的图像，是否为同一个图像？</p>
<p>A：是同一个图像</p>
<h4 id="四个直方图灰度级特征"><a href="#四个直方图灰度级特征" class="headerlink" title="四个直方图灰度级特征"></a>四个直方图灰度级特征</h4><ul>
<li><p>暗图像</p>
<p>大多数直方图容器集中在灰度级比较低的区域</p>
</li>
<li><p>亮图像</p>
<p>大多数直方图容器集中在灰度级的高端</p>
</li>
<li><p>低对比度图像</p>
<p>直方图容器基本位于灰度级的中间，对于单色图像来讲，意味着暗淡的灰色外观</p>
</li>
<li><p>高对比度的图像</p>
<p>直方图容器覆盖了较宽的灰度级，并且像素分布较为均匀，容器高度基本相同</p>
</li>
</ul>
<p>图片如下：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519174659940.png" alt="image-20220519174659940"></p>
<p>直觉上，我们可以得到如下内容：</p>
<p><strong>像素占据整个灰度级范围并且均匀分布的图像，将具有高对比度的外观和多种灰色调</strong></p>
<h3 id="累计直方图CDF"><a href="#累计直方图CDF" class="headerlink" title="累计直方图CDF"></a>累计直方图CDF</h3><p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519174414505.png" alt="image-20220519174414505"></p>
<h3 id="直方图均衡化【相关知识点：书P87】"><a href="#直方图均衡化【相关知识点：书P87】" class="headerlink" title="直方图均衡化【相关知识点：书P87】"></a>直方图均衡化【相关知识点：书P87】</h3><p><del>假设灰度值最初是连续的，令变量 $r$表示待处理的图像灰度。 $r \in [0,L-1]$ ， $r=0$表示黑色， $r=L-1$表示白色。对于这些满足条件的 r，重点关注如下形式的灰度映射：</del><br>$$<br>s = T(r), \ \ \ 0\leq r \leq L-1<br>$$</p>
<h4 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h4><p> 一幅大小为(64*64)的灰度图像，共有8个灰度级，其灰度级分布见下表，现要求对其进行均衡化处理</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>运算</strong></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>列出原始灰度级f</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>2</td>
<td>列出原始直方图</td>
<td>0.12</td>
<td>0.01</td>
<td>0.14</td>
<td>0.09</td>
<td>0.44</td>
<td>0.09</td>
<td>0.08</td>
<td>0.03</td>
</tr>
<tr>
<td>3</td>
<td>累计直方图</td>
<td>0.12</td>
<td>0.13</td>
<td>0.27</td>
<td>0.36</td>
<td>0.8</td>
<td>0.89</td>
<td>0.97</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td>累计直方图*7</td>
<td>0.84</td>
<td>0.91</td>
<td>1.89</td>
<td>2.52</td>
<td>5.6</td>
<td>6.23</td>
<td>6.79</td>
<td>7</td>
</tr>
<tr>
<td>4</td>
<td>四舍五入取整g</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>6</td>
<td>6</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>5</td>
<td>确定映射关系f-&gt;g</td>
<td>0-&gt;1</td>
<td>1-&gt;1</td>
<td>2-&gt;2</td>
<td>3-&gt;3</td>
<td>4-&gt;6</td>
<td>5-&gt;6</td>
<td>6-&gt;7</td>
<td>7-&gt;7</td>
</tr>
<tr>
<td>6</td>
<td>新直方图$n_k/n$</td>
<td>0</td>
<td>0.13</td>
<td>0.14</td>
<td>0.09</td>
<td>0</td>
<td>0</td>
<td>0.53</td>
<td>0.11</td>
</tr>
</tbody></table>
<p><strong>解题思路：</strong></p>
<ul>
<li><p><code>累计直方图</code>：其为原始直方图相加得到：</p>
<table>
<thead>
<tr>
<th>列出原始直方图</th>
<th>0.12</th>
<th>0.01</th>
<th>0.14</th>
<th>0.09</th>
<th>0.44</th>
<th>0.09</th>
<th>0.08</th>
<th>0.03</th>
</tr>
</thead>
<tbody><tr>
<td>累计直方图</td>
<td>0.12</td>
<td>0.12+0.01</td>
<td>0.12+0.01+0.14</td>
<td>0.12+0.0.1+0.14+0.09</td>
<td>……</td>
<td>……</td>
<td>……</td>
<td>1</td>
</tr>
</tbody></table>
</li>
<li><p><code>累计直方图*7</code>：其为累计直方图值*7所得：</p>
<table>
<thead>
<tr>
<th>累计直方图</th>
<th>0.12</th>
<th>0.13</th>
<th>0.27</th>
<th>0.36</th>
<th>0.8</th>
<th>0.89</th>
<th>0.97</th>
<th>1</th>
</tr>
</thead>
<tbody><tr>
<td>累计直方图*7</td>
<td>0.12*7</td>
<td>0.13*7</td>
<td>……</td>
<td>……</td>
<td>……</td>
<td>……</td>
<td>……</td>
<td>7</td>
</tr>
</tbody></table>
</li>
<li><p><code>四舍五入取整g </code>：其为对<code>累计直方图*7</code>进行取整可得：</p>
<table>
<thead>
<tr>
<th>累计直方图*7</th>
<th>0.84</th>
<th>0.91</th>
<th>1.89</th>
<th>2.52</th>
<th>5.6</th>
<th>6.23</th>
<th>6.79</th>
<th>7</th>
</tr>
</thead>
<tbody><tr>
<td>四舍五入取整g</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>6</td>
<td>6</td>
<td>7</td>
<td>7</td>
</tr>
</tbody></table>
</li>
<li><p><code>确定映射关系f-&gt;g  </code>：则是对获得的g与最开始的 <code>列出原始灰度级f  </code>进行比较，看其与哪一个值进行对应：</p>
<table>
<thead>
<tr>
<th>列出原始灰度级f</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
</thead>
<tbody><tr>
<td>四舍五入取整g</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>6</td>
<td>6</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>确定映射关系f-&gt;g</td>
<td>0-&gt;1</td>
<td>1-&gt;1</td>
<td>2-&gt;2</td>
<td>3-&gt;3</td>
<td>4-&gt;6</td>
<td>5-&gt;6</td>
<td>6-&gt;7</td>
<td>7-&gt;7</td>
</tr>
</tbody></table>
</li>
<li><p>新直方图$n_k/n$：便是将所对应的映射关系进行对应的原始直方图数据进行重合累加：</p>
<table>
<thead>
<tr>
<th>列出原始灰度级f</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
</thead>
<tbody><tr>
<td>列出原始直方图</td>
<td>0.12</td>
<td>0.01</td>
<td>0.14</td>
<td>0.09</td>
<td>0.44</td>
<td>0.09</td>
<td>0.08</td>
<td>0.03</td>
</tr>
<tr>
<td>确定映射关系f-&gt;g</td>
<td>0-&gt;1</td>
<td>1-&gt;1</td>
<td>2-&gt;2</td>
<td>3-&gt;3</td>
<td>4-&gt;6</td>
<td>5-&gt;6</td>
<td>6-&gt;7</td>
<td>7-&gt;7</td>
</tr>
<tr>
<td>新直方图$n_k/n$</td>
<td>0</td>
<td>0.12+0.01</td>
<td>0.14</td>
<td>0.09</td>
<td>0</td>
<td>0</td>
<td>0.44+0.09</td>
<td>0.08+0.03</td>
</tr>
</tbody></table>
</li>
</ul>
<p>至此题目做完。</p>
<h3 id="直方图匹配化-规定化-【相关知识点书P92】"><a href="#直方图匹配化-规定化-【相关知识点书P92】" class="headerlink" title="直方图匹配化(规定化)【相关知识点书P92】"></a>直方图匹配化(规定化)【相关知识点书P92】</h3><h4 id="题目1-1"><a href="#题目1-1" class="headerlink" title="题目1"></a>题目1</h4><p>一幅大小为(64*64)的灰度图像，共有8个灰度级，其灰度级分布见下表，现要求对其按照给定的图像r的直方图进行匹配化处理</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>运算</strong></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>列出原始灰度级f</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>2</td>
<td>列出原始直方图PDF(f)</td>
<td>0.12</td>
<td>0.01</td>
<td>0.14</td>
<td>0.09</td>
<td>0.44</td>
<td>0.09</td>
<td>0.08</td>
<td>0.03</td>
</tr>
<tr>
<td>3</td>
<td>原始图像的累计直方图CDF(f)</td>
<td>0.12</td>
<td>0.13</td>
<td>0.27</td>
<td>0.36</td>
<td>0.8</td>
<td>0.89</td>
<td>0.97</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td>原始图像的累计直方图*7</td>
<td>0.84</td>
<td>0.91</td>
<td>1.89</td>
<td>2.52</td>
<td>5.6</td>
<td>6.23</td>
<td>6.79</td>
<td>7</td>
</tr>
<tr>
<td>5</td>
<td>原始图像的累计直方图四舍五入取整g</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>6</td>
<td>6</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>6</td>
<td>参考直方图PDF(r)</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.15</td>
<td>0.2</td>
<td>0.45</td>
<td>0.2</td>
<td>0</td>
</tr>
<tr>
<td>7</td>
<td>参考直方图CDF(r)</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.15</td>
<td>0.35</td>
<td>0.8</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td>参考直方图CDF(r)*7</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1.05</td>
<td>2.45</td>
<td>5.6</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>9</td>
<td>参考直方图CDF(r)*7，四舍五入取整</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>6</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>10</td>
<td>完成规定化需要的映射</td>
<td>0-3</td>
<td>1-3</td>
<td>2-4</td>
<td>3-4</td>
<td>4-5</td>
<td>5-5</td>
<td>6-6</td>
<td>7-6</td>
</tr>
<tr>
<td>11</td>
<td>新直方图</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.13</td>
<td>0.23</td>
<td>0.53</td>
<td>0.11</td>
<td>0</td>
</tr>
</tbody></table>
<p><strong>解题思路：</strong></p>
<p>序号1-9与上文基本一样，因此不在赘述；</p>
<ul>
<li><p><code>完成规定化需要的映射</code>  ：将 <code>原始图像的累计直方图四舍五入取整g  </code>与 <code>参考直方图CDF(r)*7，四舍五入取整 </code>进行对比，如果不存在一一对应关系则就近划分，将后续比对的值与 <code>列出原始灰度级f</code>进行对应，即：</p>
<table>
<thead>
<tr>
<th>列出原始灰度级f</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
</tr>
</thead>
<tbody><tr>
<td>原始图像的累计直方图四舍五入取整g</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>6</td>
<td>6</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>参考直方图CDF(r)*7，四舍五入取整</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>6</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>完成规定化需要的映射</td>
<td>0-3</td>
<td>1-3</td>
<td>2-4</td>
<td>3-4</td>
<td>4-5</td>
<td>5-5</td>
<td>6-6</td>
<td>7-6</td>
</tr>
</tbody></table>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220503162748957.png" alt="image-20220503162748957"></p>
<p>后续操作与上文一致，不在进行过多赘述。</p>
<h2 id="空间滤波基础"><a href="#空间滤波基础" class="headerlink" title="空间滤波基础"></a>空间滤波基础</h2><p>滤波：通过、修改或者抑制图像的规定频率分量。例如通过低频的滤波器为低通滤波器（模糊图像来平滑图像），可以直接对图像本身进行类似平滑处理。使用空间滤波器可以直接对图像本身进行类似的平滑处理。</p>
<p>空间滤波将每个像素值替换该像素何其邻域的函数值来修改图像。若是线性的，则为线性空间滤波器，否则为非线性滤波器</p>
<h3 id="线性空间滤波原理"><a href="#线性空间滤波原理" class="headerlink" title="线性空间滤波原理"></a>线性空间滤波原理</h3><p>线性空间滤波器在图像 $f$和滤波器核 $w$之间执行乘积之和运算，其中核是一个阵列，其大小代表了需要运算的邻域大小，其系数决定着该滤波器的性质。</p>
<p>下图是以 $3*3$核进行线性空间滤波的原理：</p>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/20191023162000652.png" alt="图片"></p>
<p>一般来讲，大小为 $m<em>n$的核对应大小为 $M</em>N$的图像的线性空间滤波器可以表示为：<br>$$<br>g(x,y) = \sum_{s=-a}^a \sum_{t=-b}^b w(s,t)f(x+s,y+t)<br>$$</p>
<h3 id="空间相关与卷积"><a href="#空间相关与卷积" class="headerlink" title="空间相关与卷积"></a>空间相关与卷积</h3><ul>
<li><p>相关</p>
<p>滤波器模板移过图像并计算每个位置的乘积之和</p>
</li>
<li><p>单位离散冲激</p>
<p>包含一个 <code>1</code>而其余项都是 <code>0</code>的函数</p>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517092647615.png" alt="image-20220517092647615"></p>
</li>
<li><p>卷积</p>
<p>预先将滤波器旋转180°，执行与相关相同的滑动乘积求和操作</p>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517092746134.png" alt="image-20220517092746134"></p>
</li>
</ul>
<blockquote>
<p>下面的内容直接给出公式，详情解释在第四版教材的P104-P105</p>
</blockquote>
<ul>
<li><p>冲激</p>
<p>坐标 $(x_0,y_0)$处的离散冲激强度（振幅）A 定义为：<br>$$<br>\delta(x-x_0,y-y_0)=\begin{cases}A,x_0=x 和 y_0 =y\0,其他\end{cases}<br>$$</p>
</li>
<li><p>卷积相关</p>
</li>
<li><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517094437043.png" alt="image-20220517094437043"></p>
</li>
<li><p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517094606855.png" alt="image-20220517094606855"></p>
</li>
</ul>
<h3 id="空间域滤波和频率域滤波的一些重要比较"><a href="#空间域滤波和频率域滤波的一些重要比较" class="headerlink" title="空间域滤波和频率域滤波的一些重要比较"></a>空间域滤波和频率域滤波的一些重要比较</h3><ul>
<li>卷积是空间域滤波的基础，它等效于频率域中的乘法，反之亦然</li>
<li>空间域中振幅为A的冲激，是频率域中值为A的一个常数，反之亦然</li>
</ul>
<h3 id="如何构建空间滤波器核"><a href="#如何构建空间滤波器核" class="headerlink" title="如何构建空间滤波器核"></a>如何构建空间滤波器核</h3><p>有三种方法可以对其进行构建</p>
<ul>
<li><p>根据数学性质</p>
<p>计算邻域平均值滤波器会模糊图像，计算平均值会类似于积分；计算图像局部导数的滤波器会锐化图像</p>
</li>
<li><p>对形状具有所需性质的二维空间函数进行取样</p>
<p>使用高斯函数样本可以构建加权平均滤波器</p>
</li>
<li><p>设计具有规定频率响应的空间滤波器</p>
<p>数字滤波器设计范畴</p>
</li>
</ul>
<h2 id="平滑（低通空间滤波器）"><a href="#平滑（低通空间滤波器）" class="headerlink" title="平滑（低通空间滤波器）"></a>平滑（低通空间滤波器）</h2><p>用于降低灰度的极具过渡，由于随机噪声通常由灰度的极具过渡组成，因此其最明显的一个应用便是降噪。</p>
<ul>
<li>应用<ul>
<li>减少图像之间的无关细节</li>
<li>平滑因灰度级数量级不足导致的伪轮廓</li>
</ul>
</li>
</ul>
<h3 id="盒式滤波器"><a href="#盒式滤波器" class="headerlink" title="盒式滤波器"></a>盒式滤波器</h3><p>最简单的可分离低通滤波器核是盒式核，其系数通常相同（通常为1）下图为一个大小为<code>3*3</code>的盒式滤波器</p>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517102327225.png" alt="image-20220517102327225"></p>
<p>一般来讲，其前面有一个归1化的系数，其值为1除以系数值之和（当所有系数为1时，值为 $1/mn$），有两个目的：</p>
<ul>
<li>一个恒定灰度区域的灰度平均值将等于滤波后的图像灰度值</li>
<li>采用这种方式归一化之后，可防止在滤波过程中引入偏差</li>
</ul>
<h3 id="低通高斯滤波器核"><a href="#低通高斯滤波器核" class="headerlink" title="低通高斯滤波器核"></a>低通高斯滤波器核</h3><p>有待添加</p>
<h3 id="统计排序（非线性）滤波器"><a href="#统计排序（非线性）滤波器" class="headerlink" title="统计排序（非线性）滤波器"></a>统计排序（非线性）滤波器</h3><p>以滤波器包围的图像区域中所包含的像素的排序为基础，使用统计排序结果决定的值代替中心像素的值</p>
<p>中值滤波器，将像素邻域内灰度的中值代替该像素的值，比相同尺寸的线性平滑滤波器的模糊程度低，对处理脉冲噪声（椒盐噪声）非常有效。主要功能是使拥有不同灰度的点看起来更接近其相邻点，用于去除相对于其邻域像素更亮或更暗且其区域小于 $m^2/2$（滤波器区域的一半）的孤立像素族</p>
<p>其为目前数字图像处理最有用的统计排序滤波器</p>
<h3 id="锐化（高通）空间滤波器"><a href="#锐化（高通）空间滤波器" class="headerlink" title="锐化（高通）空间滤波器"></a>锐化（高通）空间滤波器</h3><p>锐化作用时突出灰度中的过渡，</p>
<p>平滑通常为低通滤波，锐化通常为高通滤波</p>
<p>作用：</p>
<ul>
<li>突出灰度的过渡部分，可由空间微分实现</li>
<li>微分算子的响应程度与图像在用算子操作这一点的突变成正比</li>
<li>图像微分增强边缘和其他突变（如噪声），削弱灰度变换缓慢的区域</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/2019102416022050.png" alt="2019102416022050"></p>
<h3 id="使用二阶微分进行图像锐化——拉普拉斯"><a href="#使用二阶微分进行图像锐化——拉普拉斯" class="headerlink" title="使用二阶微分进行图像锐化——拉普拉斯"></a>使用二阶微分进行图像锐化——拉普拉斯</h3><p>定义一个二阶微分的离散公式，并基于此构造一个基于该公式的滤波器模板</p>
<ul>
<li><p>最简单的各项同性微分算子是线性的</p>
</li>
<li><p>二维图像函数 $f(x,y)$的拉普拉斯算子定义：</p>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517110732982.png" alt="image-20220517110732982"></p>
</li>
</ul>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517110748694.png" alt="image-20220517110748694"></p>
<p>因此，其对应的滤波模板为：</p>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517110757873.png" alt="image-20220517110757873"></p>
<ul>
<li><p>使用拉普拉斯算子对图像增强的基本方法</p>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517114147549.png" alt="image-20220517114147549"></p>
</li>
</ul>
<p>强调图像中灰度的突变，不强调灰度级缓慢变换的区域</p>
<p>由于在拉普拉斯图像中既有正值，又有负值，并且所有负值在显示时都修剪成0，所以图像大多都是黑色的</p>
<p>一个典型的标定拉普拉斯图像的方法是对其最小值加一个新的0代替最小值，然后将结果标定到整个灰度范围$[0-L-1]$中</p>
<h3 id="钝化掩蔽和高提升滤波"><a href="#钝化掩蔽和高提升滤波" class="headerlink" title="钝化掩蔽和高提升滤波"></a>钝化掩蔽和高提升滤波</h3><p>从原图像中减去一幅非锐化（平滑过的）版本</p>
<p>步骤如下：</p>
<ol>
<li>模糊原图像</li>
<li>从原图像中减去模糊图像（产生的差值图像称为模板）</li>
<li>将模板加到原图像上</li>
</ol>
<p><img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/image-20220517114643764.png" alt="image-20220517114643764"></p>
<p>如上图所示，式中包含一个权值$K，k\geq 0$</p>
<ul>
<li>当$k=1$时，为钝化掩蔽</li>
<li>当 $k&gt;1$时，这个过程为高提升滤波</li>
<li>若选择 $k&lt;1$时可以减少钝化模板的贡献</li>
</ul>
<p>钝化掩蔽原理如下图所示，其：</p>
<ul>
<li>强调了锐化后信号中出现灰度斜率变换的点</li>
<li>如果原图像有任何零值，或如果选择的k值大到足以使模板峰值大于原信号中的最小值时，最终的结果可能会存在负灰度。</li>
<li>负值将导致边缘周围有暗的晕轮。如果k足够大，将产生不好的结果。</li>
</ul>
<img src="https://fastly.jsdelivr.net/gh/ZHYCarge/photo/20191024152917362.png" alt="20191024152917362" style="zoom:67%;" />



<h3 id="使用一阶导数锐化图像——梯度"><a href="#使用一阶导数锐化图像——梯度" class="headerlink" title="使用一阶导数锐化图像——梯度"></a>使用一阶导数锐化图像——梯度</h3><p>图像 $f$在 $(x,y)$中的梯度被定义为二维列向量，其重要几何性质为指向了 $f$最大变换率的方向</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517172237793.png" alt="image-20220517172237793"></p>
<p>其中，</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517172549059.png" alt="image-20220517172549059"></p>
<p>以下的两个3*3的算子为 <code>slobe算子</code>（如下图），其中心系数为2是通过突出中心点来进行平滑处理，其所有核系数均为0，表明其灰度恒定区域的响应为0，因此可用于边缘增强</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517173334056.png" alt="image-20220517173334056"></p>
<h2 id="低通、高通、带阻和带通滤波器"><a href="#低通、高通、带阻和带通滤波器" class="headerlink" title="低通、高通、带阻和带通滤波器"></a>低通、高通、带阻和带通滤波器</h2><p>其传递函数如下图所示：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517173824668.png" alt="image-20220517173824668"></p>
<p>其所对应的相关空间核如下图所示：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517174039177.png" alt="image-20220517174039177"></p>
<h2 id="组合使用空间增强方法"><a href="#组合使用空间增强方法" class="headerlink" title="组合使用空间增强方法"></a>组合使用空间增强方法</h2><p>将多种图像增强方法结合起来，完成图像增强任务</p>
]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数字图像处理笔记——第四章</title>
    <url>/OLD_BLOG/2022/05/18/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="频率域滤波"><a href="#频率域滤波" class="headerlink" title="频率域滤波"></a>频率域滤波</h1><span id="more"></span>

<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>复数的定义为：<br>$$<br>C = R+jI<br>$$<br>其共轭复数为：<br>$$<br>C^* = R-jI<br>$$</p>
<h3 id="傅里叶级数"><a href="#傅里叶级数" class="headerlink" title="傅里叶级数"></a>傅里叶级数</h3><p>具有周期T的连续变量t的函数f(t)可被描述为乘以适当系数的正弦和/或余弦和</p>
<img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517175553626.png" alt="image-20220517175553626"  />

<p>其中，系数 $C_n$为：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517175855013.png" alt="image-20220517175855013"></p>
<h3 id="冲激函数及其取样（筛选）性质"><a href="#冲激函数及其取样（筛选）性质" class="headerlink" title="冲激函数及其取样（筛选）性质"></a>冲激函数及其取样（筛选）性质</h3><p>连续变量$t$在$t=0$处的单位冲激为$\delta (t)$，定义如下，且满足第二个式子。物理上把t看成时间，则一个冲激可理解为幅度无限、持续时间为0，拥有单位面积的尖峰信号</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517180131123.png" alt="image-20220517180131123"></p>
<p>其中，若将t解释为时间时，冲激就可以被是为幅度无限、持续时间为0，并且具有单位面积的尖峰信号。其具有关于积分的取样性质：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517202341057.png" alt="image-20220517202341057"></p>
<p>若假设， $f(t)$在 $t=0$处是连续的，位于任意一点的 $t_0$的冲激表示为 $ \delta(t-t_0)$,取样特性在冲激位置 $t_0$处得到函数值</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517202658701.png" alt="image-20220517202658701"></p>
<p>离散形式：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517204112997.png" alt="image-20220517204112997"></p>
<p>冲击串：无穷多个冲激 $\Delta T$的单位之和</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220517204304188.png" alt="image-20220517204304188"></p>
<h3 id="连续单变量函数的傅里叶变换"><a href="#连续单变量函数的傅里叶变换" class="headerlink" title="连续单变量函数的傅里叶变换"></a>连续单变量函数的傅里叶变换</h3><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519144754319.png" alt="image-20220519144754319" style="zoom:130%;" />

<p>其中，式（4.20）与式（4.21）共同构成傅里叶变换对，通常表示为：$f(t)\Leftrightarrow F(\mu)$</p>
<p>根据相关公式，我们可以将式（4.20）改写成为</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220519145244866.png" alt="image-20220519145244866"></p>
<h1 id="有待补充"><a href="#有待补充" class="headerlink" title="有待补充"></a>有待补充</h1>]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫简介</title>
    <url>/OLD_BLOG/2021/08/22/%E7%88%AC%E8%99%AB%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>网络爬虫（又称为网页蜘蛛，<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C/143243">网络</a>机器人，在<a href="https://baike.baidu.com/item/FOAF">FOAF</a>社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F/13831935">程序</a>或者<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC/1697005">脚本</a>。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p>
<p>​                                                                                    ——百度百科</p>
</blockquote>
<span id="more"></span>

<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="爬虫的相关分类"><a href="#爬虫的相关分类" class="headerlink" title="爬虫的相关分类"></a>爬虫的相关分类</h2><ul>
<li>通用爬虫</li>
</ul>
<p>抓取系统重要的组成部分，抓取的是一整张页面</p>
<ul>
<li>聚焦爬虫</li>
</ul>
<p>建立在通用爬虫基础之上，抓取页面中特定的局部内容</p>
<ul>
<li>增量式爬虫</li>
</ul>
<p>检测网站中数据更新的情况，只会抓取网站中最新出来的数据</p>
<h2 id="反爬机制"><a href="#反爬机制" class="headerlink" title="反爬机制"></a>反爬机制</h2><p>可以制定相关策略或者相关技术手段，可以防止爬虫程鑫进行网站数据的爬取</p>
<h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p>君子协议，规定了网站中哪些数据刻印被爬取而哪些数据不可被爬取</p>
<h2 id="常用请求头信息"><a href="#常用请求头信息" class="headerlink" title="常用请求头信息"></a>常用请求头信息</h2><ul>
<li>User-Agent：请求载体的身份标识</li>
<li>Connection：请求完毕之后，断开连接还是保持连接</li>
<li>Content-Type：服务器响应回客户端的数据类型</li>
</ul>
<h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><p>基于网络请求的模块，用于模拟浏览器发送请求</p>
<h2 id="使用步骤（requests模块使用）"><a href="#使用步骤（requests模块使用）" class="headerlink" title="使用步骤（requests模块使用）"></a>使用步骤（requests模块使用）</h2><ul>
<li>制定url</li>
<li>发起请求</li>
<li>获取响应数据</li>
<li>持久化存储数据</li>
</ul>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派配置mysql数据库</title>
    <url>/OLD_BLOG/2021/03/04/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想着使用树莓派搭建一个物资管理系统，首先第一步就是配置在树莓派上面mysql数据库，因此出此博客给自己一个记忆。</p>
<span id="more"></span>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>在树莓派中终端输入</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">sudo apt install mariadb-<span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p>然后稍等片刻便可将mysql安装完成。</p>
<h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>安装完成之后，在终端中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql_secure_installation</span><br></pre></td></tr></table></figure>
<ul>
<li>来启动mysql的安全安装命令<br>之后会出现如下提示：<br><img src="https://img-blog.csdnimg.cn/20210304191342117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIWUNhcmdl,size_16,color_FFFFFF,t_70" alt="提示"><br>由于设备初次安装mysql，因此没有密码，所以直接按回车便OK</li>
<li>之后会询问是否要创建root用户的密码，如下：<img src="https://img-blog.csdnimg.cn/20210304191550729.png" alt="密码"><br>输入Y进行密码创建<br><img src="https://img-blog.csdnimg.cn/20210304191628303.png" alt="创建密码"></li>
</ul>
<blockquote>
<p>注意：<br>请牢记这个密码，在以后的使用中会用到</p>
</blockquote>
<ul>
<li>之后会出现”Remove anonymous users?  : “询问是否要删除匿名用户。建议选择Y</li>
<li>然后会出现<img src="https://img-blog.csdnimg.cn/20210304192025345.png" alt="出现"><br>提示是否禁止root用户远程登陆，为了自身数据库的安全来考虑，基本上是Y禁止。</li>
<li>之后会出现<img src="https://img-blog.csdnimg.cn/20210304192143440.png" alt="出现"><br>询问是否删除一个”test”的数据库，这个数据库用于测试使用，建议Y删除</li>
<li>之后会出现<img src="https://img-blog.csdnimg.cn/20210304192311798.png" alt="出现"><br>到这一步基本上配置已经完成了，所以询问是否重新加载权限表，输入Y进行重新加载</li>
</ul>
<p>设置完成，<br><img src="https://img-blog.csdnimg.cn/2021030419240983.png" alt="done"></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul>
<li>在终端中输入<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql -u root -p </span><br></pre></td></tr></table></figure>
来运行mysql。之后输入刚刚输入的密码来进行密码验证<br>看见如下内容则代表输入正确并且已经成功进入到mysql数据库中<br><img src="https://img-blog.csdnimg.cn/2021030419265794.png" alt="ok"></li>
<li>现在便可以使用mysql命令来创建一个名叫”manage”的数据库<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> manage;</span><br></pre></td></tr></table></figure>
之后弹出<br><img src="https://img-blog.csdnimg.cn/20210304200949519.png" alt="弹出"><br>表示数据库创建完成，接下来便是创建数据库用户</li>
<li>创建一个用户名为”ZHYCarge”的用户<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;ZHYCarge&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;YOURPASSWORD&#x27;</span>;</span><br></pre></td></tr></table></figure>
然后可以查询一下用户是否已经创建完成（可以跳过），可以输入<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host <span class="keyword">from</span> mysql.<span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<img src="https://img-blog.csdnimg.cn/2021030420151560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pIWUNhcmdl,size_16,color_FFFFFF,t_70" alt="查询"><br>发现已经创建完成</li>
<li>将刚刚创建的用户授予访问”manage”数据库的权限<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> manage.* <span class="keyword">TO</span> <span class="string">&#x27;ZHYCarge&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;YOURPASSWORD&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li>为了使刚才做过的那些配置生效，我们要刷新一下数据库的权限<br>输入<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES<span class="comment">;</span></span><br></pre></td></tr></table></figure></li>
<li>执行完成之后便可以输入quit退出mysql<br>这时候mysql的配置已经完成</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="php-mysql的配置"><a href="#php-mysql的配置" class="headerlink" title="php-mysql的配置"></a>php-mysql的配置</h3><p>因为可能需要使用到php，因此顺手配置一下php-mysql。<br>操作很简单，在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install php-mysql</span><br></pre></td></tr></table></figure>
<p>之后等待安装完成便可</p>
<h3 id="相关mysql的代码"><a href="#相关mysql的代码" class="headerlink" title="相关mysql的代码"></a>相关mysql的代码</h3><p>重启mysql</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service mysql restart</span></span><br></pre></td></tr></table></figure>
<p>关闭mysql</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">service mysql stop</span><br></pre></td></tr></table></figure>
<h3 id="使用navicat远程连接树莓派mysql"><a href="#使用navicat远程连接树莓派mysql" class="headerlink" title="使用navicat远程连接树莓派mysql"></a>使用navicat远程连接树莓派mysql</h3><p>因为用起来不太舒服，所以打算开一个图形界面，于是这边使用navicat的软件。肝不动了，所以贴个别的链接<br><a href="https://www.jianshu.com/p/cc6921d79767">navicat的链接</a><br>然后将之前设置的不允许外部访问要开启。</p>
<ul>
<li>所以首先进入mysql，输入<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>第一个位置,为数据库, 第二个位置,为表,所以 <em>.</em>,表示可以访问任意数据的任意表<br>‘root‘@’%’, root表示远端登录使用的用户名,%表示允许任意ip登录,可将指定ip替换掉%, root与%可以自定义<br>IDENTIFIED BY ‘root’ 这个root 是登录时的使用的密码</p>
</blockquote>
<p>之后可以查看以下修改是否成功，但是我查看不了，显示没有这个数据表，就很迷。命令如下：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> host,<span class="keyword">user</span>,<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<p>如果看到root的那行前面多了一个“%”则代表修改完成</p>
<ul>
<li>修改配置文件，输入：<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/mysql/mariadb.<span class="keyword">conf</span>.d/<span class="number">50</span>-server.<span class="keyword">cnf</span></span><br></pre></td></tr></table></figure>
将这里面的bind-address = 127.0.0.1加# 注释掉</li>
<li>之后重启服务<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">restart</span> mariadb.service</span><br></pre></td></tr></table></figure>
现在便是配置完毕了。<br>打开navicat，点击新建连接之后，输入相关信息之后便可以远程连接到你的数据库<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1>基本上mysql的配置已经完成，剩下的就是html的访问以及控制了<br>现在发现好像有些不同，emmm好像我配置的是mariadb，但是好像和mysql差不多？？？<br>相关代码<a href="https://blog.csdn.net/ZHYCarge/article/details/114397706">点我</a><h1 id="摘用"><a href="#摘用" class="headerlink" title="摘用"></a>摘用</h1><a href="https://www.jianshu.com/p/b89c275cf3cb">Mariadb设置允许远程链接
</a></li>
</ul>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用arduino远程更新esp8266代码</title>
    <url>/OLD_BLOG/2021/07/25/%E8%BF%9C%E7%A8%8B%E6%9B%B4%E6%96%B0esp8266%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于核心板与开发板不同，每一次烧录要进行步骤相当多。为了懒以及更加简化相关步骤，因此尝试使用OTA进行远程升级代码，此部分仅介绍arduino部分，OTA传输也可通过服务器进行</p>
<span id="more"></span>
<h1 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h1><ul>
<li><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-tips/esp8266-ota/">太极创客的相关示例操作</a><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1>第一次烧录的时候，需要使用tll或者相关方式去进行烧录，之后的话便可以通过网络来进行上传烧录<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2>这里以太极创客的示例代码为例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : OTA_Flash_Example</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment">作者/Author              : CYNO朔</span></span><br><span class="line"><span class="comment">日期/Date（YYYYMMDD）     : 20200713</span></span><br><span class="line"><span class="comment">程序目的/Purpose          : </span></span><br><span class="line"><span class="comment">本示例程序用于演示ESP8266的OTA功能。通过本程序，我们将启动ESP8266的OTA程序上传功能。</span></span><br><span class="line"><span class="comment">我们将无需使用连接线将ESP8266与电脑进行连接，而可以使用WiFi对ESP8266上传程序。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">如需了解本程序的详细说明，请参考以下链接：</span></span><br><span class="line"><span class="comment">http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-tips/esp8266-ota/</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">其它说明 / Other Description：</span></span><br><span class="line"><span class="comment">本程序为太极创客团队制作的免费视频教程《零基础入门学用物联网 》中一部分。该教程系统的</span></span><br><span class="line"><span class="comment">向您讲述ESP8266的物联网应用相关的软件和硬件知识。以下是该教程目录页：</span></span><br><span class="line"><span class="comment">http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/                    </span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ArduinoOTA.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Ticker.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 闪烁时间间隔(秒)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> blinkInterval = <span class="number">2</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置wifi接入信息(请根据您的WiFi信息进行修改)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;taichimaker&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line"> </span><br><span class="line">Ticker ticker;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">begin</span>(<span class="number">9600</span>);            </span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(<span class="literal">LED_BUILTIN</span>, <span class="literal">OUTPUT</span>);</span><br><span class="line"> </span><br><span class="line">  ticker.<span class="built_in">attach</span>(blinkInterval, tickerCount);  <span class="comment">// 设置Ticker对象</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">connectWifi</span>();</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// OTA设置并启动</span></span><br><span class="line">  ArduinoOTA.<span class="built_in">setHostname</span>(<span class="string">&quot;ZHYCarge&quot;</span>);  <span class="comment">//进行OTA名称的设置</span></span><br><span class="line">  ArduinoOTA.<span class="built_in">setPassword</span>(<span class="string">&quot;12345678&quot;</span>); <span class="comment">//设置密码，上传代码的时候会需要</span></span><br><span class="line">  ArduinoOTA.<span class="built_in">begin</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">&quot;OTA ready&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ArduinoOTA.<span class="built_in">handle</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在Tinker对象控制下，此函数将会定时执行。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tickerCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">digitalWrite</span>(<span class="literal">LED_BUILTIN</span>, !<span class="built_in">digitalRead</span>(<span class="literal">LED_BUILTIN</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectWifi</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//开始连接wifi</span></span><br><span class="line">  <span class="built_in">WiFi</span>.<span class="built_in">begin</span>(ssid, password);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//等待WiFi连接,连接成功打印IP</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">WiFi</span>.<span class="built_in">status</span>() != WL_CONNECTED) &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">Serial</span>.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="string">&quot;WiFi Connected!&quot;</span>);  </span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">print</span>(<span class="string">&quot;IP address:\t&quot;</span>);            </span><br><span class="line">  <span class="built_in">Serial</span>.<span class="built_in">println</span>(<span class="built_in">WiFi</span>.<span class="built_in">localIP</span>());          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="将项目编译上传"><a href="#将项目编译上传" class="headerlink" title="将项目编译上传"></a>将项目编译上传</h2>与正常烧录一样，将esp8266连接到设备，选择好相关端口并进行烧录，等待上传完成<br><img src="https://user-images.githubusercontent.com/40520292/126886534-1b6a9ac7-4e0b-4989-ba22-a8e3f9aba6d3.png" alt="image"><br>上传完成之后，esp8266芯片会自动重启，并指示灯会进行闪烁，我们需要手动将esp8266进行重启<br>通过串口监视器，我们发现esp8266已经连接上wifi并且OTA运行正常<br><img src="https://user-images.githubusercontent.com/40520292/126886612-854e0afa-024b-47f2-ab40-88da0cd9183f.png" alt="image"><br>之后我们可以打开端口选择界面，之后我们会发现在串口中多了一个网络串口的位置<br><img src="https://user-images.githubusercontent.com/40520292/126886638-90aa02b7-ee17-4089-986d-90c98ce12502.png" alt="image"><br>点击它之后尝试更改一些信息，例如将OTA的名称更改为<code>ZHYCarge_esp8266</code>并将密码更改为<code>88888888</code>,之后点击上传代码，然后会弹出需要我们输入开发板的密码来进行代码上传<br><img src="https://user-images.githubusercontent.com/40520292/126886745-0dbad5ae-7537-41fb-9d9c-c5977645f597.png" alt="image"><br>之后便会进行代码的上传<br><img src="https://user-images.githubusercontent.com/40520292/126886751-9904e6fa-1e34-43dc-9471-c5f381e10fab.png" alt="image"><br><img src="https://user-images.githubusercontent.com/40520292/126886754-ba57f5c0-575e-464f-aae4-31527fdf9ecd.png" alt="image"><br>之后，我们会发现相关信息已经进行了更改  </li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>可以仅在供电情况下，直接对代码进行上传处理，而不必需要经过相关插拔来实现</li>
<li>简化了上传过程</li>
<li>对于一些无法取下的项目而言，更加有效方便的操作esp8266<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2></li>
<li>如果项目代码过长，可能会导致相关程序卡死，造成不必要的影响</li>
<li>升级代码的时候，需要主机和esp8266连接到同一wifi下，否则可能烧录不成功<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2></li>
<li>由于使用了新的网络串口，因此之前的串口监视器已经失效了，但是我们可以使用putty来登录到开发板中进行查看相关输出  </li>
<li>可以考虑将OTA升级编辑成为一个中断，当中断开启时，便进入OTA升级界面</li>
</ul>
]]></content>
      <categories>
        <category>study</category>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>小知识合集</title>
    <url>/OLD_BLOG/2022/03/30/%E5%B0%8F%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录一下自己学习的一些小知识以及小技巧（由于过于零碎，因此不便单独创建博文）</p>
<span id="more"></span>    

<p>（目录请参考左栏中的目录显示，此处目录标识无法被获取到）</p>
<p>[TOC]</p>
<h1 id="About-Linux"><a href="#About-Linux" class="headerlink" title="About Linux"></a>About Linux</h1><h2 id="useradd-与-adduser区别"><a href="#useradd-与-adduser区别" class="headerlink" title="useradd 与 adduser区别"></a><code>useradd</code> 与 <code>adduser</code>区别</h2><p>useradd与adduser都是创建新的用户</p>
<p>在CentOs下useradd与adduser是没有区别的都是在创建用户，在home下自动创建目录，没有设置密码，需要使用passwd命令修改密码。</p>
<p>而在Ubuntu下useradd与adduser有所不同</p>
<p>1、useradd在使用该命令创建用户是不会在/home下自动创建与用户名同名的用户目录，而且不会自动选择shell版本，也没有设置密码，那么这个用户是不能登录的，需要使用passwd命令修改密码。</p>
<p>2、adduser在使用该命令创建用户是会在/home下自动创建与用户名同名的用户目录，系统shell版本，会在创建时会提示输入密码，更加友好。</p>
<p>userdel 删除用户，</p>
<p>userdel只能删除用户，并不会删除相关的目录文件。userdel -r 可以删除用户及相关目录。</p>
<p><a href="https://blog.csdn.net/qq_23934063/article/details/71427933">原帖地址</a></p>
<h2 id="修改用户使用的默认shell"><a href="#修改用户使用的默认shell" class="headerlink" title="修改用户使用的默认shell"></a>修改用户使用的默认shell</h2><p>首先使用命令 <code>cat /etc/shells</code>查看当前系统shell类型  </p>
<p>之后使用命令<code>chsh</code>进行修改  </p>
<p>eg:修改当前用户shell为zsh     <code>chsh -s /bin/zsh</code></p>
<p><a href="https://www.runoob.com/linux/linux-comm-chsh.html">原文链接</a></p>
<h2 id="Linux中的2-gt-amp-1"><a href="#Linux中的2-gt-amp-1" class="headerlink" title="Linux中的2&gt;&amp;1"></a>Linux中的<code>2&gt;&amp;1</code></h2><p>将执行内容重定向到文本中输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./test.sh  &gt; log.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><a href="https://zhuanlan.zhihu.com/p/47765176">原文链接</a></p>
<h1 id="About-Markdown"><a href="#About-Markdown" class="headerlink" title="About Markdown"></a>About Markdown</h1><h2 id="折叠文章内容"><a href="#折叠文章内容" class="headerlink" title="折叠文章内容"></a>折叠文章内容</h2><p>文本内容折叠：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>折叠文本<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  此处可书写文本</span><br><span class="line">  嗯，是可以书写文本的</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<details>   <summary>折叠文本</summary>   此处可书写文本   嗯，是可以书写文本的 </details>

<p>代码块内容折叠：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="variable">&lt;details&gt;</span></span><br><span class="line">  <span class="variable">&lt;summary&gt;</span>折叠代码块<span class="variable">&lt;/summary&gt;</span></span><br><span class="line">  <span class="variable">&lt;pre&gt;</span><span class="variable">&lt;code&gt;</span> </span><br><span class="line">     System.out.println(<span class="string">&quot;虽然可以折叠代码块&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;但是代码无法高亮&quot;</span>);</span><br><span class="line">  <span class="variable">&lt;/code&gt;</span><span class="variable">&lt;/pre&gt;</span></span><br><span class="line"><span class="variable">&lt;/details&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<details>
  <summary>折叠代码块</summary>
  <pre><code> 
     System.out.println("虽然可以折叠代码块");
     System.out.println("但是代码无法高亮");
  </code></pre>
</details>



<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>持续更新ing</p>
]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>青岛OJ系统的搭建</title>
    <url>/OLD_BLOG/2021/09/09/%E9%9D%92%E5%B2%9BOJ%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>实验室招新使用，想搭建一个属于实验室专属的OJ界面，方便进行管理以及相关统计。</p>
<p>使用青岛大学的OJ系统进行搭建，<a href="https://github.com/QingdaoU/OnlineJudgeDeploy/">相关github界面</a></p>
<p><strong>请注意：此OJ并<a href="https://github.com/QingdaoU/OnlineJudgeDeploy/issues/70">不支持arm架构</a>，因此需要在arm架构机器上使用的需要自行去寻找其他的OJ界面</strong></p>
<span id="more"></span>

<h1 id="相关资料引用"><a href="#相关资料引用" class="headerlink" title="相关资料引用"></a>相关资料引用</h1><p><a href="https://www.cnblogs.com/stargazerzzh/p/10420049.html">qduoj前端二次开发简略流程</a></p>
<p><a href="https://github.com/QingdaoU/OnlineJudgeDeploy/">OJ官网</a></p>
<p><a href="https://github.com/QingdaoU/OnlineJudgeFE">OJ二次开发官网</a></p>
<h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><h2 id="先配置基本环境"><a href="#先配置基本环境" class="headerlink" title="先配置基本环境"></a>先配置基本环境</h2><p>1.<code>sudo apt-get update &amp;&amp; sudo apt-get install -y vim python3-pip curl git</code></p>
<p>2.<code>pip3 install --upgrade pip</code></p>
<p>3.<code>pip3 install docker-compose</code></p>
<ul>
<li>第3步的安装与github的官方教程不同，由于该项目需要python3.5以上的支持，而pip仅支持python2.7(至少在我的配置下是这样)，因此安装使用pip3来进行安装</li>
<li>在fish下，<code>&amp;&amp;</code>命令无法被识别，因此需要提前切换到bash来进行安装</li>
</ul>
<h2 id="配置安装docker环境"><a href="#配置安装docker环境" class="headerlink" title="配置安装docker环境"></a>配置安装docker环境</h2><p>使用如下一键安装命令来进行docker的安装</p>
<ul>
<li>在国内环境下：</li>
</ul>
<p><code>sudo curl -sSL https://get.daocloud.io/docker | sh</code></p>
<ul>
<li>在国外环境下：</li>
</ul>
<p><code>sudo curl -sSL get.docker.com | sh</code></p>
<p>如需了解更多，请访问<a href="https://docs.docker.com/install/">Docker官网</a></p>
<h2 id="开始安装OJ系统"><a href="#开始安装OJ系统" class="headerlink" title="开始安装OJ系统"></a>开始安装OJ系统</h2><ol>
<li>选择一个具有合适的空间来进行安装（大概700-800mb）</li>
</ol>
<p>输入如下命令：</p>
<p><code>git clone -b 2.0 https://github.com/QingdaoU/OnlineJudgeDeploy.git &amp;&amp; cd OnlineJudgeDeploy</code></p>
<ol start="2">
<li>输入如下命令去进行自动配置<code>docker-compose up -d</code></li>
</ol>
<p>配置会根据网速来进行协调，大概会在15-30min，之后会自动配置成功</p>
<ul>
<li>请不要占用服务器或者主机的80端口以及443端口，网站会直接占用，否则会启动失败</li>
</ul>
<ol start="3">
<li>在浏览器中输入相关ip便可以直接访问成功</li>
</ol>
<h3 id="如何更改OJ的端口号"><a href="#如何更改OJ的端口号" class="headerlink" title="如何更改OJ的端口号"></a>如何更改OJ的端口号</h3><p>在进行第二步之前，进入到OJ的文件夹中，编辑<code>docker-compose.yml</code>尾部的<code>ports</code>的选项，例如将端口改为90</p>
<p><img src="https://user-images.githubusercontent.com/40520292/132656599-944bbcf8-999a-4507-aa1b-b80950f127e4.png" alt="image"></p>
<h2 id="后期的OJ配置"><a href="#后期的OJ配置" class="headerlink" title="后期的OJ配置"></a>后期的OJ配置</h2><p>因为一上来的OJ环境并不是那么可以让人使用的了，因此需要额外进行一些环境上的配置</p>
<h3 id="基础（这是后期的基础，因此都需要进行配置）"><a href="#基础（这是后期的基础，因此都需要进行配置）" class="headerlink" title="基础（这是后期的基础，因此都需要进行配置）"></a>基础（这是后期的基础，因此都需要进行配置）</h3><p><strong>请注意：安装时也需要配置nodejs的 v8.12.0的安装包，如果没有请自行寻找方式进行安装</strong></p>
<ol>
<li>由于此OJ系统前端都是自动渲染生成的，因此我们需要去Github上下载相关的前端源码</li>
</ol>
<p><code>git clone https://github.com/QingdaoU/OnlineJudgeFE.git</code> </p>
<ol start="2">
<li>安装修改的相关依赖</li>
</ol>
<p>然后我们进入到clone的文件夹中，执行<code>npm install</code></p>
<ol start="3">
<li>之后按照官方的文档进行编辑</li>
</ol>
<p><code>npm run build:dll</code></p>
<ol start="4">
<li>启动本地测试</li>
</ol>
<p><code>npm run dev</code></p>
<ol start="5">
<li>后续修改完成之后进行打包</li>
</ol>
<p><code>npm run build</code></p>
<ol start="6">
<li>让OJ加载修改后的前端文件</li>
</ol>
<p>首先我们需要进入到OJ的那个文件夹下，编辑其<code>docker-compose.yml</code></p>
<p>然后在<code>columes</code>选项中新增加一行，路径请根据实际进行自主修改</p>
<p><img src="https://user-images.githubusercontent.com/40520292/132656615-72b97c7f-d924-4ae2-8823-5a6090487c6f.png" alt="image"></p>
<ol start="7">
<li>之后运行自动配置命令<code>docker-compose up -d</code></li>
</ol>
<ul>
<li>可能在运行之后，会发现界面打不开的现象，那么便重新启动一下OJ系统所对应的docker服务便好</li>
</ul>
<h3 id="将语言更换为中文"><a href="#将语言更换为中文" class="headerlink" title="将语言更换为中文"></a>将语言更换为中文</h3><p>进入前端代码文件夹中，从<code>src/i18n/index.js</code>中修改locale的值为<code>zh-CN</code>，之后直接按照上面的内容打包即可</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>青岛OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Tensorflow环境</title>
    <url>/OLD_BLOG/2022/05/24/%E9%85%8D%E7%BD%AETensorflow%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于机器学习课程需要制作一款基于机器学习的程序代码，因此需要安装 <code>Tensorflow-gpu</code>来进行跑代码，众所周知， <code>Tensorflow</code>环境以难配而出名，因此本文作为记录，浅踩坑</p>
<span id="more"></span>

<ul>
<li><a href="#Linux">Linux配置</a></li>
<li><a href="#Windows">Windows配置</a></li>
</ul>
<h2 id="所需"><a href="#所需" class="headerlink" title="所需"></a>所需</h2><ul>
<li>一台支持GPU算力的机器</li>
<li><code>anconda</code>环境</li>
</ul>
<p>请注意：在执行下面代码的前提为：你要确定你电脑的<code>CUDA</code>版本信息，由于 <code>tensorflow</code>版本管理相当苛责，因此版本不对可能会<strong>导致无法运行</strong>.因此在开始整个教程前,你需要找好自己的配置文件</p>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="查找自己的CUDA版本"><a href="#查找自己的CUDA版本" class="headerlink" title="查找自己的CUDA版本"></a>查找自己的CUDA版本</h2><p>使用命令:<code>nvidia-smi</code></p>
<p>部分截图如下:</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524135128485.png" alt="image-20220524135128485"></p>
<p>如上对应的便是你的<code>CUDA</code>版本</p>
<h2 id="创建一个虚拟环境"><a href="#创建一个虚拟环境" class="headerlink" title="创建一个虚拟环境"></a>创建一个虚拟环境</h2><p><code>conda create --name 你的环境名称 python=3.7</code></p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524104957676.png" alt="image-20220524104957676"></p>
<p>输入<code>y</code>进行安装，出现如下提示代表安装完成，虚拟环境配置成功</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524105024850.png" alt="image-20220524105024850"></p>
<h2 id="进入虚拟环境"><a href="#进入虚拟环境" class="headerlink" title="进入虚拟环境"></a>进入虚拟环境</h2><p><code>conda activate 你的环境名称</code></p>
<p>当前面括号内显示的是你的环境名称，则代表进入成功</p>
<h2 id="安装-cudatoolkit"><a href="#安装-cudatoolkit" class="headerlink" title="安装 cudatoolkit"></a>安装 <code>cudatoolkit</code></h2><p>根据自己的GPU对应的<code>CUDA</code>进行配置，具体对应关系详见： <a href="https://tensorflow.google.cn/install/source_windows#gpu">对应关系</a></p>
<p>这里以我电脑为例，安装 <code>cudatoolkit=10.1</code>(这里图文版本对应不匹配,原因看<a href="#cudnn%E5%8C%85%E9%97%AE%E9%A2%98">其他-&gt;cudnn包问题</a>):</p>
<p><code>conda install cudatoolkit=10.1</code></p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524105959190.png" alt="image-20220524105959190"></p>
<p>出现以下信息表示安装完成</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524112427875.png" alt="image-20220524112427875"></p>
<h2 id="安装-cudnn"><a href="#安装-cudnn" class="headerlink" title="安装 cudnn"></a>安装 <code>cudnn</code></h2><p>也是要从官网上查询相关安装指南，具体对应关系详见： <a href="https://tensorflow.google.cn/install/source_windows#gpu">对应关系</a></p>
<p>这里以我电脑为例，安装 <code>cudnn=7.6</code></p>
<p><code>conda install cudnn=7.6</code></p>
<p>安装结果如下:</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524121940510.png" alt="image-20220524121940510"></p>
<h2 id="安装-Tensorflow-gpu-2-3"><a href="#安装-Tensorflow-gpu-2-3" class="headerlink" title="安装 Tensorflow-gpu=2.3"></a>安装 <code>Tensorflow-gpu=2.3</code></h2><p>输入命令:</p>
<p><code>pip install tensorflow-gpu==2.3.0</code></p>
<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>与Linux安装方式基本相同,这里不在进行多余赘述,仅加入在windows下如何判断自己的<code>CUDA</code>版本</p>
<h2 id="判断自己的CUDA版本"><a href="#判断自己的CUDA版本" class="headerlink" title="判断自己的CUDA版本"></a>判断自己的<code>CUDA</code>版本</h2><p>在桌面右键,打开 <code>NVIDIA控制面板</code>,点击左下角的 <code>系统信息</code></p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524111959441.png" alt="image-20220524111959441"></p>
<p>点击 <code>组件</code>然后看 <code>3D设置</code>中的 <code>NVCUDA64.DLL</code> 后面的 <code>产品名称</code>中<code>CUDA</code>版本便为你的版本信息,如下图所示,我的<code>CUDA</code>版本便是<code>11.1.70</code></p>
<p>寻找的时候对应的便是 <code>11.1</code>(其实个人实践可以向下兼容2333)</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524112056943.png" alt="image-20220524112056943"></p>
<p>剩余的配置过程与Linux一致,直接参考Linux便可</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Conda更换镜像-转载"><a href="#Conda更换镜像-转载" class="headerlink" title="Conda更换镜像|转载|"></a>Conda更换镜像|<a href="https://blog.csdn.net/qq_45688354/article/details/108014189">转载</a>|</h2><p>在国内访问相关国外网站使用原本的资源会显得很慢（尤其在学校实验室中），因此可以通过换源或者使用”科学”的方式进行访问，<strong>这里不对第二种方式进行讨论</strong>，仅讨论如何更换镜像源</p>
<blockquote>
<p>由于我使用的是科学方式,因此对于换源方式成功性不做评价</p>
</blockquote>
<ul>
<li><p>显示之前的镜像源</p>
<p><code>conda config --show</code></p>
</li>
<li><p>添加镜像源</p>
<p><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</code><br><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</code><br><code>conda config --set show_channel_urls yes</code></p>
</li>
<li><p>清除之前的缓存</p>
<p><code>conda clean -i</code></p>
</li>
<li><p>删除指定的镜像源</p>
<p><code>conda config --remove channels 你想移除的指定镜像路径</code></p>
</li>
<li><p>恢复默认镜像源</p>
<p><code>conda config --remove-key channels</code></p>
</li>
</ul>
<h2 id="cudnn包问题"><a href="#cudnn包问题" class="headerlink" title="cudnn包问题"></a>cudnn包问题</h2><p>由于在安装的过程中,发现报错</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524120302807.png" alt="image-20220524120302807"></p>
<p>后面查询相关知识了解到一个<a href="https://github.com/conda/conda/issues/8293">issue</a> ,因此推断可能是镜像源问题,所以更换成默认镜像源,然后发现更换了报错信息:</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524120404556.png" alt="image-20220524120404556"></p>
<p>根据相关指引,去官方库中进行搜索,发现:</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20220524120519754.png" alt="image-20220524120519754"></p>
<p>特喵的! <code>cudnn</code>包并没有 <code>8.0</code>版本,如果想自行配置<code>8.0</code>版本,时间开销可能过大,因此选择已有的<code>7.6</code>版本,与其匹配的是 <code>Tensorflow-2.3.0</code>版本,因此上面部分信息可能图文不符,<strong>以文字描述为主</strong>(主要是懒不想删照片重新截图2333)</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote>
<p>排名不分先后</p>
</blockquote>
<ul>
<li><a href="https://tensorflow.google.cn/install?hl=zh-cn">Tensorflow官网安装教程</a></li>
<li><a href="https://blog.csdn.net/qq_45688354/article/details/108014189">Conda换源教程</a></li>
<li><a href="https://tensorflow.google.cn/install/source_windows?hl=zh-cn#gpu">Tensorflow版本对应关系</a></li>
<li><a href="https://www.anaconda.com/">Anconda官网</a></li>
</ul>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Arch Linux删除多余软件缓存包</title>
    <url>/OLD_BLOG/2022/07/10/Arch%20Linux%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E8%BD%AF%E4%BB%B6%E7%BC%93%E5%AD%98%E5%8C%85/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了进一步给我电脑<code>Linux</code>增加内存，经过查询之后，发现如下方法可以清除多余的安装包缓存 ，从而给我电脑腾出空间</p>
<span id="more"></span>

<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="我为什么需要清除？"><a href="#我为什么需要清除？" class="headerlink" title="我为什么需要清除？"></a>我为什么需要清除？</h2><p>由于在日常的实际使用过程中，我们会经常更新相关的软件安装包，但是在<code>Arch Linux</code>中，其 <code>pacman</code>与<code>yay</code>软件安装工具对软件进行安装的过程中通常会将安装的软件缓存包一同保存到电脑中，与其他<code>Linux</code>发行版不同，其不会自行删除软件缓存包，因此在使用一段时间之后，电脑存储空间可能会被相关软件缓存占据大概 <code>40G</code>的使用空间(我自己)，因此，清除缓存空间刻不容缓2333</p>
<h2 id="我需要怎么做"><a href="#我需要怎么做" class="headerlink" title="我需要怎么做"></a>我需要怎么做</h2><h3 id="使用pacman进行清除"><a href="#使用pacman进行清除" class="headerlink" title="使用pacman进行清除"></a>使用<code>pacman</code>进行清除</h3><p>在其<a href="https://man.archlinux.org/man/pacman.8">官网</a>中其实也有所提醒过，对于软件缓存包的清除，可以使用<code>sudo pacman -Sc</code>对其进行清除</p>
<blockquote>
<p>请注意：清除安装包之后，所有的软件再次安装需要重新去下载，因此在删除前推荐对其进行安装</p>
</blockquote>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="使用paccache进行清除"><a href="#使用paccache进行清除" class="headerlink" title="使用paccache进行清除"></a>使用<code>paccache</code>进行清除</h3><p>在使用上文所提到的方法时，会删除所有的缓存包，但是由于<code>arch</code>的特性，在大多数情况下不应该删除那么多的缓存包，往往想要留下一部分，因此可以安装<code>paccache</code>进行辅助卸载，其官网和安装方式如下：</p>
<p><a href="https://man.archlinux.org/man/paccache.8">官网</a></p>
<p><code>sudo pacman -Syu pacman-contrib</code></p>
<p>安装之后使用<code>sudo paccache -ruk0</code>删除缓存包，其中 <code>0</code>代表的是为每个缓存包留出多少个前置版本，如果参数为0则全部删除</p>
<h3 id="使用yay进行清除"><a href="#使用yay进行清除" class="headerlink" title="使用yay进行清除"></a>使用<code>yay</code>进行清除</h3><p>在大多数情况，我们也会使用<code>yay</code>命令去安装软件，但是yay使用的大多都是第三方<code>AUR</code>库中的内容，其与<code>pacman</code>的安装缓存位置不同，因此需要使用不同的方法进行清除，在<a href="https://github.com/Jguer/yay">其<code>Github</code></a>中给出的方式为：<code>yay -c</code>即可清除。或者使用<code>yay -Yc</code>清除不需要用到的依赖包。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://bynss.com/linux/471439.html">使用Pacman和Paccache回收Arch Linux上的存储空间 | 月灯依旧</a></li>
<li><a href="https://bynss.com/linux/696422.html">怎样在 Arch Linux 中清除包缓存 | 月灯依旧</a></li>
<li><a href="https://man.archlinux.org/man/pacman.8">pacman(8) — Arch manual pages</a></li>
<li><a href="https://man.archlinux.org/man/paccache.8">paccache(8) — Arch manual pages</a></li>
<li><a href="https://github.com/Jguer/yay">GitHub - Jguer/yay: Yet another Yogurt - An AUR Helper written in Go</a></li>
</ul>
]]></content>
      <categories>
        <category>学校课程</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>water</tag>
        <tag>Arch Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python RSA文件加密系列——生成公私钥、文件签名</title>
    <url>/OLD_BLOG/2022/09/25/Python%20RSA%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%94%9F%E6%88%90%E5%85%AC%E7%A7%81%E9%92%A5%E3%80%81%E6%96%87%E4%BB%B6%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>个人认为后续工作中可能需要涉及到相关信息的唯一性以及相关信息传输的保密性，因此尝试现阶段学习一下相关加密技术（呜呜呜应该复习考公的）</p>
<span id="more"></span>

<h2 id="需要"><a href="#需要" class="headerlink" title="需要"></a>需要</h2><ul>
<li>python环境（感觉什么都可以）</li>
<li>第三方库：<code>rsa</code></li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="生成公私钥"><a href="#生成公私钥" class="headerlink" title="生成公私钥"></a>生成公私钥</h2><p>使用函数： <code>rsa.newkeys(num)</code>，其中：</p>
<ul>
<li><p><code>num</code>：必要参数，存储<code>n=q*p</code>所需要的位数</p>
</li>
<li><p><code>accurate</code>：可选参数，默认是<code>True</code></p>
<p>当它为真时，上述参数中的 <code>n</code>必定为你所需要的位数（创建速度会慢）</p>
<p>当它为假时，上述参数中的 <code>n</code>的数值可能会小（处理速度快）</p>
</li>
<li><p><code>poolsize</code>：可选参数，默认是 <code>1</code></p>
<p>用于生成素数的进程数 数字。如果设置为大于 <code>1</code> 的数字，将使用并行算法。 这需要 <code>Python 2.6</code> 或更高版本。</p>
</li>
<li><p><code>exponent</code>：可选参数，默认<code>65537</code></p>
<p>  他是密钥的指数；更改它的时候你要对此有极大的了解，因为指数会影响破解私钥的难度。</p>
</li>
</ul>
<p>它会返回一个公钥和私钥，因此需要创建一个元组去接值</p>
<p>整体代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">(pubkey, privkey) = rsa.newkeys(<span class="number">2048</span>)</span><br><span class="line">pub = pubkey.save_pkcs1()</span><br><span class="line">pubfile = <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pubfile.write(pub)</span><br><span class="line">pubfile.close()</span><br><span class="line"></span><br><span class="line">pri = privkey.save_pkcs1()</span><br><span class="line">prifile = <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">prifile.write(pri)</span><br><span class="line">prifile.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个公钥和私钥到你本地目录下</span></span><br></pre></td></tr></table></figure>



<h2 id="读取公私钥"><a href="#读取公私钥" class="headerlink" title="读取公私钥"></a>读取公私钥</h2><p>这里仅贴代码仅供参考</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载公私钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pubkey = rsa.PublicKey.load_pkcs1(f.read().encode())</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    privkey = rsa.PrivateKey.load_pkcs1(f.read().encode())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>



<h2 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h2><p>当你要给别人发消息时候，需要确保消息的真实性，不会被别人所截获，因此会需要使用到私钥对你的数据进行签名，到对方手上的时候，对方可以使用你所给的公钥进行验签，这里讲解如何实现签名的生成</p>
<p>此处使用函数：<code>rsa.sign()</code>，其中：</p>
<ul>
<li><p><code>message</code>：必要参数，要签名的消息。</p>
<p>可以是 8 位字符串或类似文件 目的。如果 <code>message</code> 有 <code>read()</code> 方法，它被假定为 类文件对象。</p>
</li>
<li><p> <code>priv_key</code>：必要参数，使用的私钥信息。</p>
</li>
</ul>
<p>  需要先加载私钥信息才可使用</p>
<ul>
<li><p><code>hash_method</code>：必要参数，所使用的哈希算法。</p>
<p>通常参数为：<code>MD5</code>、<code>SHA-1</code>、<code>SHA-224</code>、<code>SHA-256</code>、<code>SHA-384</code>、<code>SHA-512</code></p>
<blockquote>
<p>具体参数优劣请自行查询其他文档</p>
</blockquote>
</li>
</ul>
<p>可能会出现的异常信息：  <code>OverflowError</code>：如果私钥信息过小，可能无法包含相关信息</p>
<p>可选函数：<code>base64.b64encode(你需要编码的信息)</code>，使用其将上述信息进行二次编码，方便后续传输</p>
<p>部分代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sign_by</span>(<span class="params">data: <span class="built_in">str</span>, privkey: rsa.PrivateKey</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    私钥加密，使用此函数对相应信息进行加密</span></span><br><span class="line"><span class="string">    :param data: 所需要加密的信息，字符串格式</span></span><br><span class="line"><span class="string">    :param privkey: 私钥信息，已经读取好的</span></span><br><span class="line"><span class="string">    :return: 返回私钥签名好的信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sign = rsa.sign(data.encode(), privkey, <span class="string">&#x27;SHA-256&#x27;</span>)</span><br><span class="line">    sign = base64.b64encode(sign)</span><br><span class="line">    <span class="keyword">return</span> sign</span><br></pre></td></tr></table></figure>



<h2 id="验证签名"><a href="#验证签名" class="headerlink" title="验证签名"></a>验证签名</h2><p>当对方拿到你发的信息以及所生成的签名之后，他需要使用公钥对其进行判断，确保在传输过程中没有信息有所损失。</p>
<p>使用函数：<code>rsa.verify()</code>，其中：</p>
<ul>
<li><code>message</code>：必要参数。需要验证的信息内容（需要字节流信息）</li>
<li><code>signature</code>：必要参数。拿到的签名信息</li>
<li><code>pub_key</code>：必要参数。你手上的公钥信息</li>
</ul>
<p>可能会出现的异常信息：<code>rsa.VerificationError</code>：当验证签名信息失败的时候进行抛出，否则返回的是所使用的签名算法名称</p>
<p>部分代码片段（为方便，用try函数判定是否出现，并返回布尔型数据）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkout_sign</span>(<span class="params">data: <span class="built_in">str</span>, sign: <span class="built_in">bytes</span>, pubkey</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用公钥验证签名信息</span></span><br><span class="line"><span class="string">    :param data: 需要检验的信息</span></span><br><span class="line"><span class="string">    :param sign: 签名信息，base64编码格式文件</span></span><br><span class="line"><span class="string">    :param pubkey: 公钥信息，已经读取好的</span></span><br><span class="line"><span class="string">    :return: 根据是否验签成功，如果检验成功则返回True，如果不成功则返回False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sign = base64.b64decode(sign)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rsa.verify(data.encode(), sign, pubkey)</span><br><span class="line">    <span class="keyword">except</span> rsa.VerificationError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>





<h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><p>增加了一丢丢代码之后的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2022/9/25 19:23</span></span><br><span class="line"><span class="comment"># @Author  : ZHYCarge</span></span><br><span class="line"><span class="comment"># @Email   : ZHYCarge@126.com</span></span><br><span class="line"><span class="comment"># @File    : 生成签名.py</span></span><br><span class="line"><span class="comment"># @Brief   :使用私钥生成签名以获得一个概览信息</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">&#x27;Tmq2JoRvPCfvVKUhC2pjaiEu5c9EZxu5NlC7wGw6jl766r1Aqv/7I/Cmi2vIT15Icye/TiwArV0NNG4XqGP40oTebkfaCLfU5R91QnJFgUFnXAHLWO62ehWXcigmt5mSo4DojwfvmlMbzbuEZ0Qdj0XoVdqn96qEPvFGLAixzG/9+4KzBjgIKr3N4iQwBz3TIWM6iQU4TIxTZqJv9CvRQBZye1exj5PPB1ppWtNqsa5zx39FFwZdRXKfiUNGcSoNVAjXP3TU76cuWsCPIe7HLqDdtV4hTmjTvJ2trQ2SWne4p+SzvzsOUHGRLCIob1l2w4+EB6FvEvFhOjagwd0ieQ==&#x27;</span></span><br><span class="line"><span class="comment"># 加载公私钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pubkey = rsa.PublicKey.load_pkcs1(f.read().encode())</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    privkey = rsa.PrivateKey.load_pkcs1(f.read().encode())</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign_by</span>(<span class="params">data: <span class="built_in">str</span>, privkey: rsa.PrivateKey</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    私钥加密，使用此函数对相应信息进行加密</span></span><br><span class="line"><span class="string">    :param data: 所需要加密的信息，字符串格式</span></span><br><span class="line"><span class="string">    :param privkey: 私钥信息，已经读取好的</span></span><br><span class="line"><span class="string">    :return: 返回私钥签名好的信息</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sign = rsa.sign(data.encode(), privkey, <span class="string">&#x27;SHA-256&#x27;</span>)</span><br><span class="line">    sign = base64.b64encode(sign)</span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkout_sign</span>(<span class="params">data: <span class="built_in">str</span>, sign: <span class="built_in">bytes</span>, pubkey</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用公钥验证签名信息</span></span><br><span class="line"><span class="string">    :param data: 需要检验的信息</span></span><br><span class="line"><span class="string">    :param sign: 签名信息，base64编码格式文件</span></span><br><span class="line"><span class="string">    :param pubkey: 公钥信息，已经读取好的</span></span><br><span class="line"><span class="string">    :return: 根据是否验签成功，如果检验成功则返回True，如果不成功则返回False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sign = base64.b64decode(sign)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rsa.verify(data.encode(), sign, pubkey)</span><br><span class="line">    <span class="keyword">except</span> rsa.VerificationError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename = sys.argv[<span class="number">1</span>]</span><br><span class="line">        method = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;操作2：进行验签，返回True或者False\n&quot;</span></span><br><span class="line">              <span class="string">&quot;操作1：进行签名，将数据进行签名&quot;</span>)</span><br><span class="line">        methods = <span class="built_in">input</span>(<span class="string">&quot;请输入你所需要操作的文件以及需要的操作（用空格进行分开）&quot;</span>)</span><br><span class="line">        methods = methods.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            filename = methods[<span class="number">0</span>]</span><br><span class="line">            method = methods[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输入的信息格式错误，请重新输入！&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        sign = <span class="built_in">input</span>(<span class="string">&quot;请输入签名信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(checkout_sign(message, sign.encode(), pubkey))</span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        sign = sign_by(message, privkey)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;签名信息如下，请保存：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(sign)[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你所输入的信息不满足，进程已停止&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib中文字体的显示问题</title>
    <url>/OLD_BLOG/2022/10/19/matplotlib%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E7%9A%84%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在实际使用 <code>matplotlib</code>这个库的时候，发现如果使用中文字体，会造成方块字的显示，因此尝试修复此类问题</p>
<span id="more"></span>

<h2 id="出现方式"><a href="#出现方式" class="headerlink" title="出现方式"></a>出现方式</h2><p>使用阿里云天池的<code>DSW</code>用上述库会出现此类问题</p>
<h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><h2 id="使用原生字体"><a href="#使用原生字体" class="headerlink" title="使用原生字体"></a>使用原生字体</h2><p>使用以下命令去查看在<code>matplotlib</code>中已经默认识别好的相关字体</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> font <span class="keyword">in</span> font_manager.fontManager.ttflist:</span><br><span class="line">    <span class="comment"># 查看字体名以及对应的字体文件名</span></span><br><span class="line">    <span class="built_in">print</span>(font.name, <span class="string">&#x27;-&#x27;</span>, font.fname)</span><br></pre></td></tr></table></figure>

<p>然后找到你认识的能使用中文的字体名称，如下图的：</p>
<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20221019205305064.png" alt="image-20221019205305064"></p>
<p>之后使用<code>plt.rcParams[&#39;font.sans-serif&#39;] = &#39;AR PL UKai CN&#39;</code>即可将全局文字进行替换(<code>Ubuntu20.04</code>好像自带此款字体，但是 <code>matplotlib</code>并不会初始使用此款字体 )</p>
<h2 id="使用第三方字体"><a href="#使用第三方字体" class="headerlink" title="使用第三方字体"></a>使用第三方字体</h2><p>如果在上述命令中你并未发现能够有识别中文的字体文件，则可以临时注册将一个第三方字体来传入到 <code>matplotlib</code>中进行使用</p>
<p>以 <code>SimSun.ttf</code>字体为例</p>
<ol>
<li><p>首先获取该字体文件，可以使用我的文件<a href="https://github.com/ZHYCarge/SundryBox/blob/main/font/SimSun.ttf">点我获取</a></p>
</li>
<li><p>使用 <code>matplotlib</code>自带的 <code>font_manager.fontManager.addfont()</code>方法进行注册字体：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line">font_manager.fontManager.addfont(<span class="string">&#x27;../数据挖掘/SimSun.ttf&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>确认字体文件已经被加载到字体库中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> font <span class="keyword">in</span> font_manager.fontManager.ttflist:</span><br><span class="line">    <span class="comment"># 查看字体名以及对应的字体文件名</span></span><br><span class="line">    <span class="keyword">if</span> font.fname.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>] == <span class="string">&#x27;SimSun.ttf&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(font.name, <span class="string">&#x27;-&#x27;</span>, font.fname)</span><br></pre></td></tr></table></figure>

<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20221019204156443.png" alt="image-20221019204156443"></p>
</li>
<li><p>输入显示最前面的字体名称进行导入并输出测试文字进行测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimSun&#x27;</span></span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;数据挖掘&#x27;</span>,fontsize=<span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20221019204524564.png" alt="image-20221019204524564"></p>
</li>
</ol>
<p>为了解决保存图像是负号’-‘显示为方块的问题，最好添加下方的代码：</p>
<p><code>plt.rcParams[&#39;axes.unicode_minus&#39;] = False  # 解决保存图像是负号&#39;-&#39;显示为方块的问题</code></p>
<p>整体实现代码如下（字体文件为：<code>SimSun.ttf</code>，路径为：<code>../数据挖掘/SimSun.ttf</code>）:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">font_manager.fontManager.addfont(<span class="string">&#x27;../数据挖掘/SimSun.ttf&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimSun&#x27;</span></span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;数据挖掘&#x27;</span>,fontsize=<span class="number">60</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://cloud.tencent.com/developer/article/1761532">matplotlib字体设置看这一篇就够了</a></li>
</ul>
]]></content>
      <tags>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>国考之常识推理</title>
    <url>/OLD_BLOG/2023/01/03/%E5%9B%BD%E8%80%83%E4%B9%8B%E5%B8%B8%E8%AF%86%E6%8E%A8%E7%90%86/</url>
    <content><![CDATA[<h1 id="国考之常识推理"><a href="#国考之常识推理" class="headerlink" title="国考之常识推理"></a>国考之常识推理</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>记录整理网络中如何快速判断常识答案的蒙题技巧</p>
<span id="more"></span>



<h1 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h1><h2 id="题干分析法"><a href="#题干分析法" class="headerlink" title="题干分析法"></a>题干分析法</h2><p>主体一致。抓住定语、约束范围的词语</p>
<p>例1：</p>
<p>日前，习近平主席在亚太经合组织工商领导人峰会上表示，新常态将给中国带来新的发展机遇。下列关于我国经济发展“新常态”的主要特点描述正确的一项是(C)。</p>
<p>A.从高速增长转为低速增长</p>
<p>B.从投资驱动转向要素驱动</p>
<p>C.经济结构不断优化升级</p>
<p>D.面临的挑战趋于常态化</p>
<p>由于表示是<code>新常态</code>，A：低速增长不为<code>新</code>，排除；B：无法体现<code>新的感觉</code>；C：优化升级可以体现<code>新的、好处的发展趋势</code>；D：挑战常态化，表示不出来<code>新的东西</code>。因此选<code>C</code></p>
<h2 id="绝对表述排除法"><a href="#绝对表述排除法" class="headerlink" title="绝对表述排除法"></a>绝对表述排除法</h2><p>绝对化表述内容不选。例如：一定、完全、所有、任何、必须、最、绝对、唯一，一般用于选非题</p>
<p>例：</p>
<p>关于我国的水资源与水能，下列说法错误的是:(A)</p>
<p>A.我国水能大部分分布在西南地区,按河流统计以雅鲁藏布江水系最多</p>
<p>B.我国水能资源理论蕴藏量居世界首位</p>
<p>C.我国已经被联合国列为13个贫水国家之一</p>
<p>D.我国是一-个水资源短缺、水灾频繁的国家</p>
<p>由于在A选项中出现了 <code>最</code>字，因此优先排除</p>
<h2 id="逻辑分析法"><a href="#逻辑分析法" class="headerlink" title="逻辑分析法"></a>逻辑分析法</h2><p>选项是否出现矛盾关系</p>
<p>例：</p>
<p>下列与我国军事国防相关的说法错误的是:(A)</p>
<p>A.大力发展军民融合是维护国家主权和安全的战略基石</p>
<p>B.新形势下我军的军事战略方针是积极防御</p>
<p>C.中国位于海洋地缘战略区和欧亚大陆地缘战略区的交接处</p>
<p>D.维护地区和世界和平是我国军队担负的主要战略任务之一</p>
<p>军民融合对安全起不到作用</p>
<h2 id="法律常识推理"><a href="#法律常识推理" class="headerlink" title="法律常识推理"></a>法律常识推理</h2><p>核心内容：</p>
<ul>
<li>人身安全高于财产安全</li>
<li>不能让人“不爽”</li>
<li>维护社会公平</li>
<li>保护弱者、受害者</li>
</ul>
<p>例：</p>
<p>下列关于行政许可的表述中，错误的是:(C)</p>
<p>A.实施行政许可，应当遵循便民的原则，提高办事效率，提供优质服务</p>
<p>B.公民、法人或者其他组织依法取得的行政许可受法律保护，行政机关不得擅自改变已经生效的行政许可</p>
<p>C.行政许可的实施和结果，除涉及国家秘密的外，应当公开</p>
<p>D.公民、法人或者其他组织对行政机关实施行政许可，享有陈述权、申辩权</p>
<p>由于在实际执行过程中，除国家秘密外，还可能包含企业、个人的个人隐私，因此需要进行保密——<code>不能让人“不爽”</code></p>
<h1 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h1><h2 id="心中有党"><a href="#心中有党" class="headerlink" title="心中有党"></a>心中有党</h2><p>选项中涉及到习近平总书记的要进行选择，有国家领导人的一般都不选</p>
<p>例：</p>
<p>“四个全面”是新一届党的领导集体治国理政的战略布局。下列与“四个全面”有关的说法正确的是:(d)</p>
<p>A.党的十八大通过了《中共中央关于全面深化改革若干重大问题的决定》</p>
<p>B.十八届三中全会通过了《中共中央关于全面推进依法治国若干重大问题的决定》</p>
<p>C.十八届四中全会提出了“全面建成小康社会”的战略目标</p>
<p>D.习近平总书记在江苏调研时将“从严治党”首次提升到“全面从严”的高度</p>
<h2 id="公平正义"><a href="#公平正义" class="headerlink" title="公平正义"></a>公平正义</h2><p>可以与<a href="#%E6%B3%95%E5%BE%8B%E5%B8%B8%E8%AF%86%E6%8E%A8%E7%90%86">法律常识推理</a>一起判断</p>
<p>例：</p>
<p>甲于2010年3月1日开始使用“红红太阳”牌商标，乙同年4月1日开始使用相同商标。商标局于2011年5月10日同一天收到甲、乙关于“红红太阳”商标的申请文件，但甲的文件是5月8日寄出的，乙的文件是5月5日寄出的。商标局应初步审定公告谁的申请?(A)</p>
<p>A.公告甲的申请，因甲、乙虽同时申请，但甲使用在先</p>
<p>B.同时公告，因甲、乙申请日期相同</p>
<p>C.公告乙的申请，因乙申请在先</p>
<p>D.可以由商标局自由裁定.</p>
<h2 id="字斟句酌"><a href="#字斟句酌" class="headerlink" title="字斟句酌"></a>字斟句酌</h2><p>例：</p>
<p>下列情形中，甲和乙只需承担双方责任,无需承担共同责任的是:（A）</p>
<p>A.甲养的羊误入乙的菜地，乙发现后不管不问导致损失扩大</p>
<p>B.甲乙共同实施了故意伤害行为</p>
<p>C.甲乙合伙办了一家快递企业，乙在运输过程中丢失包裹</p>
<p>D.甲与乙协商共同买下一套房屋，二人约定各欠卖方十万元房款</p>
<h1 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h1><h2 id="正确选项积极向上，常和党性在一起"><a href="#正确选项积极向上，常和党性在一起" class="headerlink" title="正确选项积极向上，常和党性在一起"></a>正确选项积极向上，常和党性在一起</h2><p>与<a href="#%E5%BF%83%E4%B8%AD%E6%9C%89%E5%85%9A">心中有党</a>类似</p>
<h2 id="矛盾选项和稀泥，你不会就要选其一"><a href="#矛盾选项和稀泥，你不会就要选其一" class="headerlink" title="矛盾选项和稀泥，你不会就要选其一"></a>矛盾选项和稀泥，你不会就要选其一</h2><p>与<a href="#%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E6%B3%95">逻辑分析法</a>类似</p>
<p>例:</p>
<p>掩星是一种天文现象，指一个天体在另一个天体与观测者之间通过而产生 的遮蔽现象。<br>科学家经常借助观察这一现象来判断星体是否有大气层。当行星掩过 遥远恒星，如果恒星<br>变得模糊之后才消失，那么可以认为：(B)<br>A.该恒星有稠密的大气层<br>B.该行星有稠密的大气层<br>C.该恒星无大气层或大气层稀薄<br>D.该行星无大气层或大气层稀薄</p>
<h2 id="小心数字，数字经常迷惑你"><a href="#小心数字，数字经常迷惑你" class="headerlink" title="小心数字，数字经常迷惑你"></a>小心数字，数字经常迷惑你</h2><p>在判断不出来的时候，包含数字的项往往是错误的</p>
<p>例：</p>
<p>关于丝绸之路经济带，下列说法不正确的是：（C）<br>A.东接亚太经济圈，西系欧洲经济圈<br>B.被认为是世界上最长、最具有发展潜力的经济大走廊<br>C.以温带季风气候为主，年平均降水量在 800 毫米左右<br>D.是国家主席习近平在哈萨克斯坦纳扎尔巴耶夫大学演讲时提出的</p>
<h2 id="诗词哲学题不会，找关键词定主体"><a href="#诗词哲学题不会，找关键词定主体" class="headerlink" title="诗词哲学题不会，找关键词定主体"></a>诗词哲学题不会，找关键词定主体</h2><p>找关键词与内容相关即可与<a href="#%E9%A2%98%E5%B9%B2%E5%88%86%E6%9E%90%E6%B3%95">题干分析法</a>类似</p>
<p>例1：</p>
<p>我国古代用 “金”“石”“丝”“竹”指代不同材质、类别的乐器。下列诗词涉及 “竹”的是：（C）<br>A.珠帘夕殿闻钟磬，白日秋天忆鼓鼙<br>B.主人有酒欢今夕,请奏鸣琴广陵客<br>C.深秋帘幕千家雨，落日楼台一笛风<br>D.哀筝一弄湘江曲,声声写尽湘波绿</p>
<p>看选项可知，笛子一般都是使用竹子做的，其它乐器与竹子无关</p>
<p>例2：</p>
<p>对下列对联依次所指的文学家，判断正确的一项是：（C）<br>①哀怨托离骚，生而独开诗赋立；孤忠报楚国，余风波及汉湘人。<br>②兵甲富于胸中，一代功名高宋室；忧乐关乎天下，千秋俎豆重苏台。<br>③质而绮，真而醇，自可传之千古；樽中酒，篱下诗，岂甘了此一生。<br>④笔诤时政，心在苍生，万户争传新乐府；堤建西湖，神归东洛，千秋永祀老诗翁。<br>A.孔子 李白 李煜 陆游<br>B.屈原 陶潜 李煜 白居易<br>C.屈原 范仲淹 陶潜 白居易<br>D.孔子 李白 白居易 范仲淹</p>
<p>第一句：<code>离骚</code>，能判断出是屈原；第二句：<code>忧乐</code>，能想到范仲淹；第三句：<code>篱下</code>，能想到陶渊明；第四句：<code>新乐府</code>、<code>西湖</code>，能想到白居易</p>
<h2 id="太绝对要提高警惕，不符合中庸语气"><a href="#太绝对要提高警惕，不符合中庸语气" class="headerlink" title="太绝对要提高警惕，不符合中庸语气"></a>太绝对要提高警惕，不符合中庸语气</h2><p>与<a href="#%E7%BB%9D%E5%AF%B9%E8%A1%A8%E8%BF%B0%E6%8E%92%E9%99%A4%E6%B3%95">绝对表述排除法</a>类似，答案一定是比较模糊的、摸棱两可的，若出现过于绝对的内容，则一般是错误的</p>
<p>例：</p>
<p>关于地质年代与地层，下列说法错误的是：（D）<br>A.当岩层之间有切割现象时，被切割的岩层比切割的岩层古老<br>B.发现大量三叶虫化石的岩层比发现大量鱼类化石的岩层古老<br>C.放射性同位素方法可用来测定岩层的形成年代<br>D.在全球范围内,形成于同一地质时期的岩层岩性都是相同的</p>
<p>选项太过于绝对</p>
<h2 id="包含关系，选择最概括的"><a href="#包含关系，选择最概括的" class="headerlink" title="包含关系，选择最概括的"></a>包含关系，选择最概括的</h2><p>选择包含面最广的，涉及内容最多的</p>
<p>例：</p>
<p>下列关于我国脱贫攻坚工作说法准确的是：（D）<br>A.强化行政一把手负总责的责任制<br>B.坚持先扶志，再扶智，后扶技的顺序<br>C.坚持中央统筹省负总责县乡抓落实的工作机制<br>D.动员全党全国全社会力量，坚持精准扶贫，精准脱贫</p>
<h2 id="本质出发点落脚点，实在不行选民意"><a href="#本质出发点落脚点，实在不行选民意" class="headerlink" title="本质出发点落脚点，实在不行选民意"></a>本质出发点落脚点，实在不行选民意</h2><p>看到人民群众，基本都是正确的</p>
<p>例1：</p>
<p>“中国共产党必须始终代表中国先进生产力的发展要求，代表中国先进文化的前进方向，代表中国最广大人民的根本利益。”这是对“三个 代表”重要思想的集中概括。“三个代表”重要思想的根本出发点和落脚点是：（A）<br>A.实现人民的愿望、满足人民的需要、维护人民的利益<br>B.大力促进先进生产力的发展<br>C.大力发展社会主义先进文化<br>D.不断增强社会主义国家的综合国力</p>
<p>例2：</p>
<p>习近平总书记指出，体育强国的基础在于（ A），要通过举办北京冬奥会、冬残奥会，把我国冰雪运动特别是雪上运动搞上去,在 3 亿人中更好推广冰雪运动。</p>
<p>A.群众体育<br>B.竞技体育<br>C.体育文化<br>D.体育产业</p>
<h2 id="四个选项三个同，选择存异选项"><a href="#四个选项三个同，选择存异选项" class="headerlink" title="四个选项三个同，选择存异选项"></a>四个选项三个同，选择存异选项</h2><p>选择与其它选项不同的</p>
<p>例：</p>
<p>下列关于武器装备的说法中错误的是：（C）<br>A.尼米兹级航母是美军装备的核动力航空母舰<br>B.S300 导弹是俄罗斯生产的高空防空导弹<br>C.枭龙是我国生产的性能优良的无人机<br>D.Ｆ-22 是美军装备的先进的隐身战机</p>
<p>由于其它四个选项都在说国外，因此选C</p>
<h2 id="正确选项常辨证说，错误选项脱离实际"><a href="#正确选项常辨证说，错误选项脱离实际" class="headerlink" title="正确选项常辨证说，错误选项脱离实际"></a>正确选项常辨证说，错误选项脱离实际</h2><p>选项内容要符合实际情况</p>
<p>例：</p>
<p>下列关于农业的说法正确的是：（A）<br>Ａ.花生、大豆、向日葵和芝麻都属于油料作物<br>Ｂ.农药在夏天中午气温较高时喷洒灭虫效果最好<br>Ｃ.有机农作物通常种在便于运输的交通主干线附近<br>Ｄ.追肥是农闲时期为调节土地所含养分而施用的肥料</p>
<h1 id="第四种方法"><a href="#第四种方法" class="headerlink" title="第四种方法"></a>第四种方法</h1><p>第四种方法内容与其它内容有一定重合，这里只记录不一样的地方</p>
<h2 id="关键词中庸"><a href="#关键词中庸" class="headerlink" title="关键词中庸"></a>关键词中庸</h2><p>答案出现在选项中最多相同或相反的关键词中。若多个选项含有相同关健词，答案越容易被遮蔽，不易被发现，符合中庸之道。 某一个选项含有最多的关健词语，那么这个选项最容易隐藏自己，最符合中庸之道， 就是正确选项。</p>
<p>例：</p>
<p>下列表述不正确的是（B）。 </p>
<p>A.自然界中的金属在常温下一般呈固态 </p>
<p>B.惰性气体不与其他物质发生化学反应 </p>
<p>C.天然气是一种无色无味无毒的气体燃料 </p>
<p>D.钢是铁和碳按照一定比例加工而成的合金<br>由于B C 选项中都有关键词气体。所以答案在 B C 选项中，进一步分析，选B</p>
<h2 id="判断选项长短"><a href="#判断选项长短" class="headerlink" title="判断选项长短"></a>判断选项长短</h2><p>原则一 如果题干要选正确的 那么答案在长度最中庸的选项中即长度不长不短的选项是答案<br>原则二 如果题干要选错误的 那么答案在长度最不中庸的选项中即长度最长或者最短的选项便是答案</p>
<p>例1：</p>
<p>下列关于国家主权及国防地理的表述，不正确的是：（A）<br>A. 主权是联合国赋予国家的最基本的权利<br>B. 一国的领海和领空都是其领土的组成部分<br>C. 我国南海四大群岛是东沙、西沙、中沙和南沙群岛<br>D. 我国与越南、缅甸、吉尔吉斯斯坦等十几个国家接壤<br>首先，要选错误的。根据原则二 A 选项最短 D 选项最长，所以排除 B C，进一步分析则选A</p>
<p>例2：</p>
<p>关于欧洲主权债务危机的原因，下列说法不正确的是？（A）<br>A.欧元升值<br>B.欧元区经济低迷<br>C.巨额财政赤字<br>D.财政政策与货币政策的不协调<br>首先，要选不正确的。根据原则二 A 选项最短 D 选项最长，所以排除 B C。又根 据<a href="#%E5%85%B3%E9%94%AE%E8%AF%8D%E4%B8%AD%E5%BA%B8">关键词中庸</a>原则，直接选 A。</p>
<h2 id="答案体现民族自豪感"><a href="#答案体现民族自豪感" class="headerlink" title="答案体现民族自豪感"></a>答案体现民族自豪感</h2><p>体现中国好的是正确的，反之是错误的。命题者必须积极弘扬中国的强大。</p>
<p>注意：民族自豪感会表现的比较隐蔽</p>
<p>例：</p>
<p>下列关于我国经济发展现状的表达，不正确的是：（C）<br>A、人均国民生产总值已超过 3000 美元<br>B、黄金储备量已超过 1000 吨<br>C、对石油进口的依存度已接近 30%<br>D、第三产业增加值已接近第二产业<br>我们看到每个选项都有数字，不能用规律一了。这时，我们仔细观察人均生产总值突破了，黄金储量超过了，第三产业增加值接近了，全部是说的我国强大的一面。只有 C 选项说的是我国的依存度问题，不能积极反应我国的强大。所以答案是C。 </p>
<h2 id="年份最近的常是答案"><a href="#年份最近的常是答案" class="headerlink" title="年份最近的常是答案"></a>年份最近的常是答案</h2><p>出题者喜欢考最近年份的知识</p>
<p>下列关于我国人大代表选举的表述，不正确的是：（D）<br>A、1953 年通过的选举法规定，全国人大代表的选举，各省按每 80 万人选代表 1人， 直辖市和人口在 50 万以上的直辖市按每 10 万人选代表 1 人<br>B、1979 年修订的选举法规定。自治州、县、自治县人大代表中，农村每一代表的人 口数 4 倍于镇每一代表所代表的人口数、省、自治区人大为 5：1，全国人大为8：1<br>C、1995 年修改的选举法规定，省、自治区和全国人大代表中，农村每一代表与城市每一代表所代表的人口数为 4：1，自治州、县、自治县仍是 4：1<br>D、2010 年修改的选举法规定，全国人民代表大会代表名额，按照每一代表所代表的城乡人口数 2： 1 的原则，以及保证各地区、各民族、各方面都有适当数量代表的 要求进行分配</p>
<p>由于2010年距离最近，则选择D</p>
]]></content>
      <tags>
        <tag>国考</tag>
      </tags>
  </entry>
  <entry>
    <title>国考之资料分析</title>
    <url>/OLD_BLOG/2022/12/30/%E5%9B%BD%E8%80%83%E4%B9%8B%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="国考之资料分析"><a href="#国考之资料分析" class="headerlink" title="国考之资料分析"></a>国考之资料分析</h1><p><a href="https://doi.org/10.5281/zenodo.7500772"><img src="https://zenodo.org/badge/DOI/10.5281/zenodo.7500772.svg" alt="DOI"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在此处记录一下资料分析的相关知识点，内容来自于花生十三</p>
<span id="more"></span>

<p>在花生十三这里，有几个数据需要记录：</p>
<ul>
<li>B：现期值</li>
<li>A：基期值</li>
<li>R：增长率</li>
<li>X：增长量</li>
</ul>
<h1 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h1><h2 id="高位叠加"><a href="#高位叠加" class="headerlink" title="高位叠加"></a>高位叠加</h2><p>与记忆中的列竖式作加法顺序相反，高位叠加是从高位加起，抓住问题的主要矛盾。非精确求和和没有选项可以参考时可以使用高位叠加</p>
<img src="https://npicture.oss-cn-beijing.aliyuncs.com/Picgo/image-20230102153019795.png" alt="image-20230102153019795" style="zoom:50%;" />

<p>适合：非精确题目</p>
<p>适用范围：求比重、合计多少、</p>
<h2 id="“21”-“12”分段法"><a href="#“21”-“12”分段法" class="headerlink" title="“21” “12”分段法"></a>“21” “12”分段法</h2><p>将三位数的减法分为“21”或者“12”两段，并尽可能保证不需要借位</p>
<p>如 <code>519-127</code>：</p>
<p>个位：9&gt;7，百位+十位：51&gt;12；我们可以将减法进行分段计算，百位+十位为一段“2”，个位为一段“1”</p>
<p>则个位  = 9-7=2；百位+十位 = 51-12=39；将数据回归原位，答案=392</p>
<h2 id="整数基准值法"><a href="#整数基准值法" class="headerlink" title="整数基准值法"></a>整数基准值法</h2><p>被减数-减数=（被减数-基准值）+（基准值-减数）</p>
<p>如 <code>632-588</code> ：</p>
<p>十位+个位中的3 2均小于 8  8；因此可以加入基准值，将减数588向上取整为600，则<br>$$<br>632-588 = （632-600）+（600-588） = 44<br>$$</p>
<h2 id="小分互换"><a href="#小分互换" class="headerlink" title="小分互换"></a>小分互换</h2><p>若乘法中有某个乘数可以近似转化为某个常见分数，我们可以将多位数乘法转华为简单的除法计算</p>
<p>常见百化分分数：</p>
<table>
<thead>
<tr>
<th>1/2 = 50%</th>
<th>1/7=14.3%</th>
<th>1/12=8.3%</th>
<th>1/17=5.9%</th>
</tr>
</thead>
<tbody><tr>
<td>1/3=33.3%</td>
<td>1/8=12.5%</td>
<td>1/13=7.7%</td>
<td>1/18=5.6%</td>
</tr>
<tr>
<td>1/4=25%</td>
<td>1/9=11.1%</td>
<td>1/14=7.1%</td>
<td>1/19=5.3%</td>
</tr>
<tr>
<td>1/5=20%</td>
<td>1/10=10%</td>
<td>1/15=6.7%</td>
<td>2/7=28.6%</td>
</tr>
<tr>
<td>1/6=16.7%</td>
<td>1/11=9.9%</td>
<td>1/16=6.3%</td>
<td>3/7=42.9%</td>
</tr>
</tbody></table>
<p>如 <code>464*25%</code> ：<br>$$<br>25%=1/4，则464<em>25%=464/4=116<br>$$<br>如果遇到不是那么整的数值，如$464</em>12.1%$，则可以考虑将$12.1%化为11.1%+1%$之后转成$\frac{464}{9}+4.64\approx56.2$</p>
<h2 id="凑整拆分"><a href="#凑整拆分" class="headerlink" title="凑整拆分"></a>凑整拆分</h2><p>将乘数拆分为“2或5”等容易计算的数字组成</p>
<p>如 <code>464*48%</code>：<br>$$<br>464<em>48% = 464</em>（50%-2%） = 464/2-464*2% =232-9.28=222.72<br>$$</p>
<h2 id="预估拆分法"><a href="#预估拆分法" class="headerlink" title="预估拆分法"></a>预估拆分法</h2><p>将被除数由大到小拆成几部分分别计算，通过逐步分解，从而得到结果。</p>
<p>例1：</p>
<p>$\frac{715}{729} = \frac{729-14}{729}=1-\frac{14}{729}\ \ \ \ 由于，\frac{14}{729} =2^-%，\ \ \ \ 因此\frac{715}{729} = 98^+%$</p>
<p>例2：</p>
<p>$\frac{247}{532}=\frac{266-19}{532}=50%-4^-%=46^+%$</p>
<p>例3：</p>
<p>$\frac{335}{831}\ \ 大体可以看出，约40%，因此40%*831=332,\frac{335}{831}=\frac{332+3}{831}=40%+0.4^-%=40.4^-%$</p>
<p>使用规则：</p>
<ul>
<li>如果分数大小接近1（分子分母相差不大）可以先用100%减去、加上</li>
<li>如果分子在分母的50%附近，先拆出50%</li>
<li>如果分子在分母的50%-100%之间且不好预估，先拆出50%，之后继续计算</li>
<li>如果分母接近500或1000，可以直接根据分子判断分数大约的百分比</li>
<li>在不满足上述情况下，可以根据首位比值或分子前两位与分母首位比值，拆出其它特殊分数（如：1/3、1/4、1/6、1/7、30%、40%、70%等）</li>
</ul>
<h2 id="“415”份数法"><a href="#“415”份数法" class="headerlink" title="“415”份数法"></a>“415”份数法</h2><p>将数量关系转化为份数比例关系，从而简化计算。一般来讲，将现期B和增长率R为已知量的前提下，可以使用415份数法快速获得基期A与变化量X的数值</p>
<p>例如：增长率为25%（$\frac14$），为了方便计算，可以将基期设为4份，变化量X=AR=1份，现期为基期和变化量之和，为5份。则基期、变化量、现期的份数分别为4、1、5</p>
<p>使用时机：增长率R在一个分数附近</p>
<p>例：</p>
<p><em>今年工资456，比去年降低了12.5%，则去年工资是多少？</em></p>
<p>$-12.5%=-\frac18$，则对于“415”份数来讲，现期为7份，增长量为-1份，基期为8份，$\frac{456}{7} \approx65$,则基期为“7+1”则为$65+456=521$</p>
<h2 id="假设分配法"><a href="#假设分配法" class="headerlink" title="假设分配法"></a>假设分配法</h2><p>现期、基期、增长量成一定比例，且现期=基期+增长量，通常通过假设基期、增长量来分配现期，多退少补，逐步趋于正确的基期和增长量。</p>
<p>核心公式：</p>
<ul>
<li>B=A+X——剩余分配=B-A-X</li>
<li>A=B/(1+R)——A：X：B=x：100：100+x</li>
<li>X=AR<ul>
<li>R&gt;0——ABX同号，且A&lt;B</li>
<li>R&lt;0——AB与X异号，且A&gt;B</li>
</ul>
</li>
</ul>
<p>其结构图大致如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A((现期值))</span><br><span class="line">B((基期值))</span><br><span class="line">C((剩余分配值))</span><br><span class="line">D((增长量))</span><br><span class="line">E((基期值))</span><br><span class="line">F((增长量))</span><br><span class="line">G((剩余分配值))</span><br><span class="line">A--&gt;B</span><br><span class="line">A--&gt;C</span><br><span class="line">A--&gt;D</span><br><span class="line">C--&gt;E</span><br><span class="line">C--&gt;G</span><br><span class="line">C--&gt;F</span><br></pre></td></tr></table></figure>



<p>左边分支为基期值，右边分支为增长量，中间剩余分配值为基期值与增长量和现期的差（基期和增长量的数值为假定）</p>
<p>由于大部分情况下知道现期、增长量的值，求基期的情况较多，因此，以下为两个例子</p>
<h5 id="例1（0-lt-x-lt-10-）"><a href="#例1（0-lt-x-lt-10-）" class="headerlink" title="例1（0&lt;x&lt;10%）:"></a>例1（0&lt;x&lt;10%）:</h5><p>假设现期量为<code>5362</code>，增长了<code>8%</code>，求基期or增长量：</p>
<p>假设基期量为<code>5000</code>，其<code>8%</code>为<code>400</code>，<code>5000+400=5400</code>，与<code>5362</code>相差<code>38</code>，因此中间位置写<code>-38</code>，两侧分别写<code>5000</code>和<code>400</code>，之后将<code>-38</code>看作<code>-40</code>，以<code>40*8%=3%</code>，填入右侧，则左侧值为<code>38-3=35</code>。因此基期值为<code>4965</code>，增长量为<code>397</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A((5362))</span><br><span class="line">B((5000))</span><br><span class="line">C([-38])</span><br><span class="line">D((400))</span><br><span class="line">E([-35])</span><br><span class="line">F([-3])</span><br><span class="line"></span><br><span class="line">A--&gt;B</span><br><span class="line">A--&gt;C</span><br><span class="line">A--&gt;D</span><br><span class="line">C--&gt;E</span><br><span class="line">C--&gt;F</span><br></pre></td></tr></table></figure>

<h5 id="例2（x-gt-10-）"><a href="#例2（x-gt-10-）" class="headerlink" title="例2（x&gt;10%）:"></a>例2（x&gt;10%）:</h5><p>假设现期量为<code>402</code>，增长了<code>16%</code>，求基期or增长量:</p>
<p>假设基期量为<code>300</code>，其增长量为<code>300*16%=48</code>，因此可以得到剩余量为<code>402-300-48=54</code>，由于增长量为<code>16%</code>，近似约等于可以看成<code>16.7%</code>，为$\frac16$，则增长一份的量为$\frac{54}{7}\approx8$，则增长量为<code>8</code>，基期量为<code>46</code>。因此基期为<code>346</code>，增长量为<code>56</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A((402))</span><br><span class="line">B((300))</span><br><span class="line">C((54))</span><br><span class="line">D((48))</span><br><span class="line">E((46))</span><br><span class="line">F((8))</span><br><span class="line"></span><br><span class="line">A--&gt;B</span><br><span class="line">A--&gt;C</span><br><span class="line">A--&gt;D</span><br><span class="line">C--&gt;E</span><br><span class="line">C--&gt;F</span><br></pre></td></tr></table></figure>



<p>在第二步的时候使用“415”方法，第一步使用误差较大，可能会导致无法选择合适数据</p>
<h5 id="例3（x-lt-0）"><a href="#例3（x-lt-0）" class="headerlink" title="例3（x&lt;0）:"></a>例3（x&lt;0）:</h5><p>假设现期量为456，减少了7%，求基期or增长量：</p>
<p>假设基期量为500，则增长量为-35，剩余量为456-500-35=-9，之后使用-9*-7%可以得到约等于1，则前面为-10</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A((456))</span><br><span class="line">B((500))</span><br><span class="line">C([-9])</span><br><span class="line">D([-35])</span><br><span class="line">E([-10])</span><br><span class="line">F((1))</span><br><span class="line"></span><br><span class="line">A--&gt;B</span><br><span class="line">A--&gt;C</span><br><span class="line">A--&gt;D</span><br><span class="line">C--&gt;E</span><br><span class="line">C--&gt;F</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>国考</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用公开图床优化文档撰写</title>
    <url>/OLD_BLOG/2022/09/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%85%AC%E5%BC%80%E5%9B%BE%E5%BA%8A%E4%BC%98%E5%8C%96%E6%96%87%E6%A1%A3%E6%92%B0%E5%86%99/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在网上，只要你用 <code>免费图床</code>字眼进行搜索，一定会搜索出来许多的资源，例如这篇博客：<a href="https://zhuanlan.zhihu.com/p/81713842">超好用：免费的图床</a>其中不乏有一些很适合新手小白在一开始什么也不知道的情况下帮助你更好的完成博文撰写工作的相关免费图床网站，本篇文章以 <a href="https://imgse.com/">路过图床</a>为基础，浅浅介绍一下如何使用免费图床来帮助你更好的进行文章撰写。</p>
<span id="more"></span>



<p>在使用之前，推荐阅读每一个免费图床的使用公告，例如 <a href="https://imgse.com/page/tos">服务条款-路过图床</a></p>
<p>作为一个计算机学子，在使用每一款产品之前，希望可以有时间阅读好每一款的使用说明，虽然可能很枯燥，但是往往会避免出现很多不必要的错误。</p>
<h1 id="如何使用免费图床"><a href="#如何使用免费图床" class="headerlink" title="如何使用免费图床"></a>如何使用免费图床</h1><h2 id="NO-1-注册一个账户"><a href="#NO-1-注册一个账户" class="headerlink" title="NO.1 注册一个账户"></a>NO.1 注册一个账户</h2><p>为了更好的记录你的身份，因此在使用前你需要注册一个图床账户：</p>
<p><img src="https://s1.ax1x.com/2022/09/08/vb6IQe.png" alt="vb6IQe.png"></p>
<p>这很简单，直接注册就好</p>
<h2 id="NO-2-将你的照片放置到图床上"><a href="#NO-2-将你的照片放置到图床上" class="headerlink" title="NO.2 将你的照片放置到图床上"></a>NO.2 将你的照片放置到图床上</h2><p>经测试，在使用的时候只要在网站内使用<kbd>Ctrl</kbd>+<kbd>V</kbd>即可激活它的上传功能，显示出如下内容：</p>
<p><img src="https://s1.ax1x.com/2022/09/08/vb6HeA.md.png" alt="vb6HeA.md.png"></p>
<p>其中，图片格式要求为 <code>JPG</code>or <code>PNG</code>，并且照片大小不能大于<code>10MB</code></p>
<p>之后会让你选择你存放的图库名称，以及是否进行上传，图库的话可以选择对访客开放，这样无论是谁通过什么渠道都可以看到你上传的照片：</p>
<p><a href="https://imgse.com/i/vbcQT1"><img src="https://s1.ax1x.com/2022/09/08/vbcQT1.md.png" alt="vbcQT1.md.png"></a></p>
<h2 id="使用你在图床上的照片"><a href="#使用你在图床上的照片" class="headerlink" title="使用你在图床上的照片"></a>使用你在图床上的照片</h2><p>如果进行顺利的话，它会上传完毕并且会跳转到你图片网页，并在下方附有如下内容：</p>
<p><a href="https://imgse.com/i/vbcCes"><img src="https://s1.ax1x.com/2022/09/08/vbcCes.md.png" alt="vbcCes.md.png"></a></p>
<p>你可以直接在这选择 <code>Markdown代码</code>的链接信息来复制到你的编辑器中，你的编辑器会自动识别它的格式并且进行加载图片（应该吧看你编辑器了2333）</p>
<p>之后这样操作就完成了</p>
<h2 id="如何查看我上传的照片"><a href="#如何查看我上传的照片" class="headerlink" title="如何查看我上传的照片"></a>如何查看我上传的照片</h2><p>这很简单，右上角点击个人ID找到我的图片即可，你上传过的所有照片均在此处，点进去一张照片后，你可以选择删除或者下载图片等操作。</p>
<p><a href="https://imgse.com/i/vbcW0s"><img src="https://s1.ax1x.com/2022/09/08/vbcW0s.png" alt="vbcW0s.png"></a></p>
<h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><p>请注意，虽然是免费图床，并且都宣传其很安全，但是请<strong>不要将自己的个人信息以及个人隐私上传到图床中</strong>，容易造成隐私泄露等风险</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://imgse.com/">路过图床</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/81713842">超好用：免费的图床</a></li>
</ul>
]]></content>
      <categories>
        <category>Education</category>
      </categories>
      <tags>
        <tag>Education</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在PyPI上发布自己开发的包</title>
    <url>/OLD_BLOG/2022/11/28/%E5%A6%82%E4%BD%95%E5%9C%A8PyPI%E4%B8%8A%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84%E5%8C%85/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于发现python的第三方包中没有自己想要用的一款，所以打算自己手写一个，顺便放在上面（为开源做贡献</p>
<span id="more"></span>

<h2 id="Need"><a href="#Need" class="headerlink" title="Need"></a>Need</h2><ul>
<li>python 3.7</li>
<li>一个能写python的IDE</li>
<li>一个PyPI账户</li>
<li>没了</li>
</ul>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p>一下内容以 <code>sister_xie</code>这个包名为例：</p>
<p>由于此项目是一个简单的示例项目，因此它的文件路径为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Z:.                             </span><br><span class="line">│  setup.py                     </span><br><span class="line">│                               </span><br><span class="line">└─sister_xie</span><br><span class="line">        __init__.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中，文件夹下的 <code>sister_xie</code>名字要与后面安装文件中 <code>name</code>保持一致</p>
<h2 id="配置安装文件"><a href="#配置安装文件" class="headerlink" title="配置安装文件"></a>配置安装文件</h2><p>其中，<code>setup.py</code>为python的安装文件，在使用pip安装的时候，会使用到这个文件。文件配置以及详细说明如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;README.rst&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  long_description = f.read()</span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;sister_xie&#x27;</span>, <span class="comment"># 软件名称</span></span><br><span class="line">    version=<span class="string">&#x27;0.0.1&#x27;</span>, <span class="comment"># 软件版本号</span></span><br><span class="line">    author=<span class="string">&#x27;ZHYCarge&#x27;</span>, <span class="comment"># 软件作者</span></span><br><span class="line">    long_description = long_description, <span class="comment"># 长描述，显示在pypi上的介绍</span></span><br><span class="line">    author_email=<span class="string">&#x27;ZHYCarge@126.com&#x27;</span>, <span class="comment"># 作者的联系方式</span></span><br><span class="line">    url=<span class="string">&#x27;https://github.com/ZHYCarge/sister_xie&#x27;</span>, <span class="comment"># 软件的源地址</span></span><br><span class="line">    description=<span class="string">u&#x27;写给妹妹的一个小软件（确信）&#x27;</span>, <span class="comment"># 软件说明</span></span><br><span class="line">    packages=[<span class="string">&#x27;sister_xie&#x27;</span>], <span class="comment"># 指定最终发布的包中要包含的packages</span></span><br><span class="line">    install_requires=[], <span class="comment"># 需要使用到的前置库</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="编写主要代码"><a href="#编写主要代码" class="headerlink" title="编写主要代码"></a>编写主要代码</h2><p>在 <code>sister_xie</code>文件夹中的 <code>__init__.py</code>文件进行编写即可</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>为防止代码编写过程中出现相关问题，因此可以使用 <code>python setup.py check</code>命令进行检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) PS Z:\test_python&gt; python .\setup.py check</span><br><span class="line">running check</span><br><span class="line">(base) PS Z:\test_python&gt; </span><br></pre></td></tr></table></figure>

<p>当出现如上内容代表检查无误</p>
<h2 id="打包与发布"><a href="#打包与发布" class="headerlink" title="打包与发布"></a>打包与发布</h2><p>之后使用<code>python setup.py sdist build</code>命令进行打包，成功打包之后会在当前目录的dist文件夹下,创建你的包名</p>
<p>然后输入 <code>pip install twine</code>下载 <code>twine</code>来将你文件上传到PyPI中。</p>
<p>安装完成 <code>twine</code>后，输入<code>twine upload dist/*</code>来将你的打包文件进行上传，其中会要求你输入用户名和密码</p>
<p>最后会显示上传成功，并返回一个地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Uploading sister_xie-0.0.1.tar.gz</span><br><span class="line">100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.9/3.9 kB • 00:00 • ?</span><br><span class="line"></span><br><span class="line">View at:</span><br><span class="line">https://pypi.org/project/sister-xie/0.0.1/</span><br><span class="line">(base) PS Z:\test_python&gt; </span><br></pre></td></tr></table></figure>

<p>至此，项目便成功发布到PyPI上面</p>
<h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>由于操作问题，在PyPI上面包名更改为 <code>xyqsister</code>，如需了解此项目可以直接点击<a href="https://pypi.org/project/xyqsister/0.0.1/">此处</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/26159930">如何将自己的程序发布到 PyPI</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1757852">实战教程：如何将自己的Python包发布到PyPI上</a></li>
<li><a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/">PyPI官方教程</a></li>
</ul>
<blockquote>
<p> 排名不分先后</p>
</blockquote>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>如何高效友好的提出一个技术性问题</title>
    <url>/OLD_BLOG/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么要规范问题格式？"><a href="#为什么要规范问题格式？" class="headerlink" title="为什么要规范问题格式？"></a>为什么要规范问题格式？</h2><p>因为在实际的学习中，总会遇到许许多多的问题提问方式，有些提问方式会显得更加高效率，而有些提问会极大的延长回复问题的时间，因此制作一个 <code>关于技术性问题的提问模板</code>，就会显得比较重要</p>
<span id="more"></span>
<p>如果不想看那么多，只想获得一个模板格式，<a href="##%E6%A1%86%E6%9E%B6%E5%86%85%E5%AE%B9">点我</a></p>
<h2 id="这样做对我有什么好处？"><a href="#这样做对我有什么好处？" class="headerlink" title="这样做对我有什么好处？"></a>这样做对我有什么好处？</h2><p>对于每个人来讲，更加规范更加优秀的提问会极大的促进问答两个人之间的沟通效率，因此如何高效而又有效的问答，则是每个人需要学会的一件事。规范了问答格式，会让大家更倾向于去解决你的问题</p>
<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p>这个标题最早来自于GitHub的一个开源仓库，由于其中内容介绍的十分中肯，因此也是受到了许多同行们的fork以及star，因此如果有时间可以去阅读一下他的文章，<a href="https://github.com/GUET-EETB/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">文章链接</a></p>
<p>对于其中的一些问题，我做了一部分的节选（该章节其余内容来源于其文章内容）：</p>
<h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p>
<p>这样做的用处至少有三点。 第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加； 第二，简化问题使你更有可能得到<strong>有用</strong>的答案； 第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p>
<h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p>
<p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的 RGB 值？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot）， 但却无法从某绘图程序的颜色选择器取得十六进制的 RGB 值。</p>
</blockquote>
<p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p>
<h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p>
<p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p>
<p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p>
<p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好地理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p>
<h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p>
<p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户群组，论坛或（最后一招）在项目的<strong>用户</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的用户也许仍会给你一些提示。</p>
<h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p>
<p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p>
<p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p>
<p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p>
<p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p>
<p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p>
<p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p>
<p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p>
<h1 id="那我应该使用什么方式进行提问？"><a href="#那我应该使用什么方式进行提问？" class="headerlink" title="那我应该使用什么方式进行提问？"></a>那我应该使用什么方式进行提问？</h1><p>由于每个问题都会对应不同的提问框架，但是对于一般的技术性问题来讲，你大抵可以使用以下此类框架：</p>
<h2 id="使用框架前你需要明确："><a href="#使用框架前你需要明确：" class="headerlink" title="使用框架前你需要明确："></a>使用框架前你需要明确：</h2><ul>
<li>我已经阅读完毕 <a href="https://zhycarge.github.io/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/">如何高效友好的提出一个技术性问题</a>，并保证自己会遵守里面的<a href="https://zhycarge.github.io/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/##%E4%BD%BF%E7%94%A8%E6%A1%86%E6%9E%B6%E5%89%8D%E4%BD%A0%E9%9C%80%E8%A6%81%E6%98%8E%E7%A1%AE">相关要求</a></li>
<li>在你提出这个问题之前，你已经去查证在论坛或者其他你可以搜索到的地方没有人提出了相关问题</li>
<li>如果本文并未有效的帮助你更好的精简你的语言，我应该去看看 <a href="https://github.com/GUET-EETB/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">提问的智慧</a></li>
<li>我接下来要上传的内容不包含个人敏感信息（在上传日志、代码截图之前，我已经有效的处理好我的个人敏感信息）</li>
<li>如果我的问题并没有遵循相关要求，但是我还是提出了这个问题，那么我的问题会被无条件关闭或者被管理者拒绝回答</li>
</ul>
<h2 id="框架内容"><a href="#框架内容" class="headerlink" title="框架内容"></a>框架内容</h2><p>如有需要，请将下方内容复制粘贴到你需要的地方即可</p>
<p>此处内容采用协议 <a href="https://creativecommons.org/publicdomain/mark/1.0/">Public Domain</a></p>
<h3 id="框架1"><a href="#框架1" class="headerlink" title="框架1"></a>框架1</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 在开始之前</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [<span class="string"> </span>] 我已经阅读完毕并遵守[<span class="string">如何高效友好的提出一个技术性问题</span>](<span class="link">https://zhycarge.github.io/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/</span>)里面的内容</span><br><span class="line"></span><br><span class="line"><span class="section"># 我当前使用的系统环境是</span></span><br><span class="line"></span><br><span class="line">写上你的个人系统环境信息，如Windows10，python3.7 使用了什么第三方库 etc.</span><br><span class="line"></span><br><span class="line"><span class="section"># 重现步骤</span></span><br><span class="line"></span><br><span class="line">你是通过什么操作出现了这个问题，是否这个问题在你再次尝试之后再次出现</span><br><span class="line">在此处可以使用markdown代码框贴出你的代码部分（已脱敏），方便我们进行复现或者重试</span><br><span class="line"></span><br><span class="line"><span class="section"># 我的预期成果是什么？</span></span><br><span class="line"></span><br><span class="line">比如我需要1+1=2</span><br><span class="line"></span><br><span class="line"><span class="section"># 但是实际输出时什么</span></span><br><span class="line"></span><br><span class="line">但是输出了1+1=3</span><br><span class="line"></span><br><span class="line"><span class="section"># 如果有日志（报错），那么日志（报错）记录了什么？</span></span><br><span class="line"></span><br><span class="line">如果有信息，请截全</span><br><span class="line"></span><br><span class="line"><span class="section"># 有什么需要向我们进行补充的？</span></span><br><span class="line"></span><br><span class="line">可选信息</span><br></pre></td></tr></table></figure>

<h3 id="框架2"><a href="#框架2" class="headerlink" title="框架2"></a>框架2</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 在开始之前</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [<span class="string"> </span>] 我已经阅读完毕并遵守[<span class="string">如何高效友好的提出一个技术性问题</span>](<span class="link">https://zhycarge.github.io/2022/09/11/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%8F%8B%E5%A5%BD%E7%9A%84%E6%8F%90%E5%87%BA%E4%B8%80%E4%B8%AA%E6%8A%80%E6%9C%AF%E6%80%A7%E9%97%AE%E9%A2%98/</span>)里面的内容</span><br><span class="line"></span><br><span class="line"><span class="section"># 我的预期成果是什么？</span></span><br><span class="line"></span><br><span class="line">比如我需要1+1=2</span><br><span class="line"></span><br><span class="line"><span class="section"># 但是实际输出时什么</span></span><br><span class="line"></span><br><span class="line">但是输出了1+1=3</span><br><span class="line"></span><br><span class="line"><span class="section"># 为解决这个问题我尝试做了什么？</span></span><br><span class="line"></span><br><span class="line">比如我去百度查询了一下小学数学知识，但是并没有帮助</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># 你还有什么需要补充的吗？</span></span><br></pre></td></tr></table></figure>


<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/GUET-EETB/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">提问的智慧</a></li>
<li><a href="https://github.com/GUET-EETB/How-To-Create-A-Issue">How-To-Create-A-Issue</a></li>
</ul>
<h2 id="本文协议"><a href="#本文协议" class="headerlink" title="本文协议"></a>本文协议</h2><p><a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.</p>
]]></content>
      <categories>
        <category>Education</category>
      </categories>
      <tags>
        <tag>Education</tag>
      </tags>
  </entry>
  <entry>
    <title>尾声&amp;新生</title>
    <url>/OLD_BLOG/2024/12/08/%E5%B0%BE%E5%A3%B0&amp;%E6%96%B0%E7%94%9F/</url>
    <content><![CDATA[<h1 id="从“新”出发"><a href="#从“新”出发" class="headerlink" title="从“新”出发"></a>从“新”出发</h1><span id="more"></span>

<p>距今本博客平台已经存在了3年了。从对技术懵懵懂懂，一无所知，到现在勉勉强强，从完全稚嫩的文笔，到现在稍显稚嫩的文笔，这个平台陪我成长了许多。。。</p>
<p>但是，天下没有不散的宴席。由于当时自身技术知识的薄弱（回首看平台的部署历程苦不堪言。。博客采用的插件也从未更新过。。），加上对博文分类（哪里来的奇奇怪怪分类）、内容撰写的十分混乱（甚至博客平台内的图片图床都包含了三四个平台），导致对这个博客网站内容仿佛屎山，重构起来十分困难（还有<code>Next</code>主题发生过<a href="https://github.com/next-theme/hexo-theme-next/issues/4#issuecomment-626205848">仓库更换事件</a>）。</p>
<p>因此，打算对此博客平台进行一次系统化的重构，并将使用<code>GitHub</code>的仓库存档功能对这个博客平台进行封存，留作纪念。</p>
<p>准备进行的工作如下:</p>
<ul>
<li><p>仓库封存。将该博客平台重命名并列入<code>GitHub</code>的存档仓库进行封存</p>
</li>
<li><p>重新开始。删除所有博文，重构规范（包括但不限于完善分组分类，确定统一书写格式）。</p>
</li>
<li><p>更换留言平台。更换<code>Valine</code>评论平台变成<code>Waline</code>。<strong>据本博文发出后，<code>Valine</code>评论平台随时可能会被移除</strong></p>
</li>
<li><p>整合插件。更新相关插件、主题等，并做好定时更新，做好现有插件的记录（U1S1我都不知道这个平台已经存在过什么插件了。。。）</p>
</li>
<li><p>新增友人帐功能。</p>
</li>
<li><p>抢救“垃圾”。（从“垃圾堆”里翻找一下还能用的部分，对老旧博文进行更新后重新发布）</p>
</li>
</ul>
<p>至此，博客平台改造可能会持续一个礼拜到两个礼拜，该博客平台内的所有照片信息不再保证链接有效性。</p>
<p>更新后，为保证后续还要从里面翻找“垃圾”，会将该博客平台用到的大部分照片一同保存到存档仓库中，方便后续查看。</p>
<p>如果对该博客平台中相关博文仍存在疑问，请通过邮件与我联系:<a href="mailto:ZHYCarge@zhycarge.top">ZHYCarge@zhycarge.top</a></p>
<p>向前走，初心不泯。</p>
<center>二〇二四年十二月</center>
]]></content>
      <tags>
        <tag>Announce</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘自救指南</title>
    <url>/OLD_BLOG/2022/12/10/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="好像密码不正确呢？再试试吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="25225cfb0dc4cee2ff3ad6cb81243de6bb8db1482603e27c8d1b1b876375ca69"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">输入正确密码查看正确文章</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/OLD_BLOG/lib/hbe.js"></script><link href="/OLD_BLOG/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>学校课程</tag>
      </tags>
  </entry>
  <entry>
    <title>毕设问题汇总</title>
    <url>/OLD_BLOG/2023/03/14/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="好像密码不正确呢？再试试吧" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="15a5f05c7fa09b59a76dee481914e95ad5b91f523eea6e6a327e170e6b775bf0">9863e730576695b52e0649b599751ab4544977e71ef33a71ead5b64f72966bec79f3d96bc0c710efd0b98b7606e9dae297fb584a90886a94eadccfda05934a64302c5e76ce3af2775f5b130d1b42f3661e84d0ab3c1157cc022eeffc11b39bab37d8df14d8253dc860fbff7bbe1742bbbaa42a835df7b85ae8bcc0cea98c52b0040593f12643cb1bef34d696764e75db87b3b1111a0f65255050ac82c0cea8a1b49fb1a0374b706599729932e2312c17d563419d1d206bd8830b73c4fe2c26ff5845b1e6ae675b5b6be64befb91880b66eb0a75dbb4af029a25380346b1985b4c6c257b1b3e1c8c78dc9fecf50501f7bcb7d5192bc6ccc25c1d6dae83729e9222a9290a042cf1125e6e86fb918428ba5cd43a40c54ba213c1d9357c1941699dadae0913dfc167e0246569e8aceab9629873c61287b6f2588e7f68e6c5cde1ec2db656963b6371200bd1d7794c98b5c667ca2bc1da1d02313f89d3da506bfffe397d62af532fd33090caec0c65a38a499bd7433a1aae28a3c7e186d97b665d18350e8f6ab01123ecffb5c1e328a8cfdc8ce536dd090387d3ba7e55977916c72b13550cc0319949a80094016508651e5da9a01e5e7eec1d50e24a3fe3a8744493cea3dff4c227a46af54cb618bd5a0ea060cf5816fac40d0fe107fe382e55865b3ba2f7f5a21b6b599c44911a15848bf85</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">输入正确密码查看正确文章</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/OLD_BLOG/lib/hbe.js"></script><link href="/OLD_BLOG/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>毕设</tag>
      </tags>
  </entry>
  <entry>
    <title>由于CI引起的博文更新异常</title>
    <url>/OLD_BLOG/2022/10/16/%E7%94%B1%E4%BA%8ECI%E5%BC%95%E8%B5%B7%E7%9A%84%E5%8D%9A%E6%96%87%E6%9B%B4%E6%96%B0%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于在进行 <code>CI</code>的时候，会将仓库下所有的博文全部拉去到存储区 ，导致<code>HEXO</code>默认所有博文全部进行了修改，从而个人博客的博文的更新日期失常</p>
<span id="more"></span>

<h1 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h1><p>在了解到<a href="https://mrseawave.github.io/blogs/articles/2021/01/07/ci-hexo-update-time/">这篇博文</a>之后，参考我自身的 <code>GitHub Actions</code>的相关设置，发现了这个错误，并且得知可以根据以下内容对 <code>GitHub Actions</code>进行修改来防止错误产生</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在<code>yml</code>文件中将<code>checkout</code>命令更新成：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"><span class="attr">with:</span></span><br><span class="line">  <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">file</span> <span class="string">modification</span> <span class="string">time</span> <span class="comment"># 更新所有文件为最后修改时间</span></span><br><span class="line">	<span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">	<span class="string">cd</span> <span class="string">source/_post/</span></span><br><span class="line">    <span class="string">git</span> <span class="string">ls-files</span> <span class="string">-z</span> <span class="string">|</span> <span class="string">while</span> <span class="string">read</span> <span class="string">-d</span> <span class="string">&#x27;&#x27;</span> <span class="string">path;</span> <span class="string">do</span> <span class="string">touch</span> <span class="string">-d</span> <span class="string">&quot;$(git log -1 --format=&quot;</span><span class="string">@%ct&quot;</span> <span class="string">&quot;$path&quot;</span><span class="string">)&quot;</span> <span class="string">&quot;$path&quot;</span><span class="string">;</span> <span class="string">done</span></span><br><span class="line">    <span class="string">cd</span> <span class="string">../..</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>即可</p>
<p>由于在实际过程中，如果仅仅使用了<code>git</code>的相关命令会导致它会获取全部的内容。由于<code>Hexo</code>以及<code>Next</code>的相关代码更新久远，会极大的延长<code>Actions</code>的运行处理时间，因此这里仅进入到文章界面进行更改</p>
]]></content>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
</search>
